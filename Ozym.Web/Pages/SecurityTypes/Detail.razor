@page "/security-types/{ModelId:int}/detail"

@inherits ModelDetail<SecurityTypeDto>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle(Model.SecurityTypeName).AsPageTitle())</PageTitle>

        <ModelPageHeader ActionMenu="@SectionNavigationMenu"
                         Header="@(PageTitle.ReadSingle(Model.SecurityTypeName))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <ContentTile>
            <Body>
                <CascadingValue Value="@Model">
                    <EditForm class="model-editor" Model="@Model">
                        <SecurityTypeCRUD Disabled="false" ReadOnly="true" 
                            SecurityTypeGroups="@SecurityTypeGroups" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
    }
</ThemedComponent>


@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<SecurityTypeGroupDto> SecurityTypeGroups { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = HttpService.GetAsync(ModelId);
            var typeGroupsQuery = HttpService.GetAllAsync<SecurityTypeGroupDto>();

            await Task.WhenAll(modelQuery, typeGroupsQuery);

            Model = await modelQuery;
            SecurityTypeGroups = await typeGroupsQuery;
        }
        finally
        {
            IsLoading = Model is null || SecurityTypeGroups is null;
        }
    }
}