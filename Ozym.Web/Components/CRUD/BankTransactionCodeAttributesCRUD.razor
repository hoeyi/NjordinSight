@inherits ModelCRUD<BankTransactionCodeAttributeGrouping>

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <ContentTile>
        <TitleAlignLeft>
            <div>
                @ModelDto.ParentAttribute.DisplayName
            </div>
            @if (!ReadOnly)
            {
                <button id="add-new-entry-button"
                class="form-control button icon"
                type="button"
                @onclick="AddNew_OnClick">
                    <IonIcon Name="add" />
                </button>
            }
        </TitleAlignLeft>
        <Body>
            <EditForm class="model-editor" Model="@ModelDto">
                <DataGrid Data="@ModelDto.Entries">
                    @if(!ReadOnly)
                    {
                        <DataGridColumn Type="DataGridCellType.Button">
                            <CellEditTemplate Context="model">
                                <button class="form-control button icon" type="button"
                                    @onclick="(args) => RemoveExisting_OnClick(args, model)">
                                    <IonIcon Name="close-circle" />
                                </button>
                            </CellEditTemplate>
                        </DataGridColumn>
                    }
                    @if (ReadOnly)
                    {
                        <DataGridColumn 
                            Property=@nameof(BankTransactionCodeAttributeDto.AttributeMemberId)
                            Caption=@(ModelMetadata.NameFor<BankTransactionCodeAttributeDto>(
                                x => x.AttributeMemberId))>
                            <CellTemplate Context="model">
                                @model.AttributeMember.DisplayName
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Property=@nameof(BankTransactionCodeAttributeDto.EffectiveDate)
                            Caption=@(ModelMetadata.NameFor<BankTransactionCodeAttributeDto>(
                                x => x.EffectiveDate))>
                            <CellTemplate Context="model">
                                @model.EffectiveDate.ToShortDateString()
                            </CellTemplate>
                        </DataGridColumn>
                    }
                    else
                    {
                        <DataGridColumn
                            Type="DataGridCellType.Control"
                            Property=@nameof(BankTransactionCodeAttributeDto.AttributeMemberId)
                            Caption=@(ModelMetadata.NameFor<BankTransactionCodeAttributeDto>(
                                x => x.AttributeMemberId))>
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control"
                                    @bind-Value="@model.AttributeMemberId">
                                    @foreach (var member in AttributeMemberLookup)
                                    {
                                        <option value="@member.Key">@member.Value</option>
                                    }
                                </InputSelect>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property=@nameof(BankTransactionCodeAttributeDto.EffectiveDate)
                            Caption=@(ModelMetadata.NameFor<BankTransactionCodeAttributeDto>(
                                x => x.EffectiveDate))>
                            <CellEditTemplate Context="model">
                                <InputDate class="form-control"
                                    @bind-Value="@model.EffectiveDate" />
                            </CellEditTemplate>
                        </DataGridColumn>
                    }
                </DataGrid>
            </EditForm>
        </Body>
    </ContentTile>
}

@code {
    [CascadingParameter(Name = nameof(AttributeMembers))]
    public IEnumerable<ModelAttributeMemberDtoBase> AttributeMembers { get; set; }

    private IDictionary<int, string> AttributeMemberLookup { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AttributeMemberLookup = AttributeMembers?.ToDictionary(x => x.AttributeMemberId, y => y.DisplayName);

        IsLoading = ModelDto is null || (ReadOnly ^ (AttributeMemberLookup is null));
    }

    private void AddNew_OnClick(MouseEventArgs e)
    {
        // TODO: Do something with MouseEventArgs ?

        ModelDto.AddNewEntry();
    }

    private void RemoveExisting_OnClick(
        MouseEventArgs e, BankTransactionCodeAttributeDto model)
    {
        // TODO: Do something with MouseEventArgs ?

        ModelDto.RemoveEntry(model);
    }
}