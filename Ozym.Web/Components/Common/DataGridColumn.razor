@typeparam TModel
@attribute [CascadingTypeParameter(nameof(TModel))]

@inherits ComponentBase

 <CascadingValue Value="@DataGrid" />

@code{
    /// <summary>
    /// Gets or sets the index of this column.
    /// </summary>
    public int Index { get; set; }

    /// <summary>
    /// Gets or sets the parent <see cref"DataGrid{TModel}"/> for this column.
    /// </summary>
    [CascadingParameter]
    public DataGrid<TModel> DataGrid { get; set; } = default!;

    //[Parameter]
    //public RenderFragment Columns { get; set; }

    /// <summary>
    /// Gets or sets whether this column is visible.
    /// </summary>
    [Parameter]
    public bool Visible { get; set; } = true;

    /// <summary>
    /// Gets or sets the property path for the value bound to this column.
    /// </summary>
    [Parameter]
    public string Property { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the header text for this column.
    /// </summary>
    [Parameter]
    public string Caption { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the tool-tip text that describes this column.
    /// </summary>
    [Parameter]
    public string ToolTip { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the string format for the data type of this column.
    /// </summary>
    [Parameter]
    public string Format { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the column cell type. The default is <see cref="DataGridCellType.Text" />.
    /// </summary>
    [Parameter]
    public DataGridCellType Type { get; set; } = DataGridCellType.Text;

    /// <summary>
    /// Gets or sets the attributes to apply to the underlying <th> element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> ColumnAttributes { get; set; } = default!;

    [Parameter]
    public RenderFragment<TModel> CellTemplate { get; set; } = default!;

    [Parameter]
    public RenderFragment<TModel> CellEditTemplate { get; set; } = default!;

    protected override void OnParametersSet()
    {
        DataGrid.AddColumn(this);
    }

    protected override Task OnParametersSetAsync()
    {
        DataGrid.AddColumn(this);
        return base.OnParametersSetAsync();
    }

    public object? GetValue(TModel model)
    {
        if (model is null)
            throw new ArgumentNullException(paramName: nameof(model));

        return PropertyAccessor.GetValue<TModel>(Property, model);
    }
}