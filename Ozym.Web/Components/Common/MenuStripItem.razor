<li class="@GetItemClass()">
    @if (string.IsNullOrEmpty(MenuItem.UriRelativePath))
    {
        <div class="grid-container @GetGridContainerClassModifier()">
            @if(DisplayIconLeft)
            {
                <div class="icon left">
                    <IonIcon Name="@MenuItem.IconKey" />
                </div>
            }
            @if(DisplayCaption)
            {
                <div class="caption left">
                    @MenuItem.Caption
                </div>
            }
            @if (DisplayChildMenuChevron && MenuItem.HasChildren)
            {
                <div class="icon right">
                    <IonIcon Name="caret-forward" class="caret-forward" />
                </div>
            }
        </div>
    }
    else
    {
        <a class="grid-container custom-nav-link @GetGridContainerClassModifier()" 
            style="cursor: pointer;"
            href="@MenuItem.UriRelativePath"
            @onclick="(async (args) => await HyperlinkClickCallBack.InvokeAsync(
                new(){ UriPath = MenuItem.UriRelativePath } ))">
            @if (DisplayIconLeft)
            {
                <div class="icon left">
                    <IonIcon Name="@MenuItem.IconKey" />
                </div>
            }
            @if (DisplayCaption)
            {
                <div class="caption left">
                    @MenuItem.Caption
                </div>
            }
            @if (DisplayChildMenuChevron && MenuItem.HasChildren)
            {
                <div class="icon right">
                    <IonIcon Name="caret-forward" class="caret-forward" />
                </div>
            }
        </a>
    }
    @if (MenuItem.HasChildren)
    {
        <ul class="@GetChildMenuClass()">
            @foreach (var child in MenuItem.Children)
            {
                <MenuStripItem 
                    MenuItem="@child" 
                    HyperlinkClickCallBack="HyperlinkClickCallBack"
                    DisplayIconLeft="MenuItem.ChildMenuOptions.DisplayIcon"
                    DisplayCaption="MenuItem.ChildMenuOptions.DisplayCaption"
                               DisplayChildMenuChevron="child.ChildMenuOptions.DisplayChildMenuChevron" />
            }
        </ul>
    }
</li>

@code {
    /// <summary>
    /// Gets or sets the object defining the content of this menu item.
    /// </summary>
    [Parameter, EditorRequired]
    public MenuItem MenuItem { get; set; } = default!;

    /// <summary>
    /// Gets or sets the delegate handler for the hyperlink click event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<LinkClickEventArgs> HyperlinkClickCallBack { get; set; }

    /// <summary>
    /// Gets or sets whether the icon in the left-column of menu item is shown.
    /// </summary>
    [Parameter]
    public bool DisplayIconLeft { get; set; }

    /// <summary>
    /// Gets or sets whether the icon in the left-column of menu item is shown.
    /// </summary>
    [Parameter]
    public bool DisplayCaption { get; set; }

    /// <summary>
    /// Gets or sets whether the icon in the right-column of menu item is shown. Ignored if 
    /// the menu item has no children.
    /// </summary>
    [Parameter]
    public bool DisplayChildMenuChevron { get; set; }

    [CascadingParameter(Name = nameof(VerticalExpansion))]
    public ExpandDirection VerticalExpansion { get; set; } = ExpandDirection.Down;

    [CascadingParameter(Name = nameof(HorizontalExpansion))]
    public ExpandDirection HorizontalExpansion { get; set; } = ExpandDirection.Left;

    public enum ExpandDirection
    {
        Up,

        Down,

        Left,

        Right
    }

    private const string MenuLevelRoot = "level-0";
    private const string MenuLevelChild = "level-n";
    private const string MenuItemClass = "menu-item";

    private bool ShowColumnA => DisplayIconLeft;
    private bool ShowColumnB => DisplayCaption;
    private bool ShowColumnC => (MenuItem?.HasChildren ?? false) && DisplayChildMenuChevron;

    private string GetChildMenuClass()
    {
        System.Text.StringBuilder sb = new();
        sb.Append("sub-menu");

        if(MenuItem.IsRoot)
            sb.Append($" {MenuLevelRoot}");
        else
            sb.Append($" {MenuLevelChild}");

        if(VerticalExpansion == ExpandDirection.Up)
            sb.Append(" expand-up");
        else if (VerticalExpansion == ExpandDirection.Down)
            sb.Append(" expand-down");

        if(HorizontalExpansion == ExpandDirection.Left)
            sb.Append(" expand-left");
        else if (HorizontalExpansion == ExpandDirection.Right)
            sb.Append(" expand-right");

        return sb.ToString();
    }

    private string GetItemClass()
    {
        System.Text.StringBuilder sb = new();
        sb.Append(MenuItemClass);

        if (MenuItem.HasChildren)
            sb.Append(" parent");

        if (MenuItem.IsRoot)
            sb.Append(" root-node");

        if(!string.IsNullOrEmpty(MenuItem?.IconKey))
            sb.Append(" has-icon-key");

        return sb.ToString();
    }

    private string GetGridContainerClassModifier()
    {
        System.Text.StringBuilder sb = new();

        if (ShowColumnA)
            sb.Append(" col-a");

        if (ShowColumnB)
            sb.Append(" col-b");

        if (ShowColumnC)
            sb.Append(" col-c");
        
        return sb.ToString();
    }
}