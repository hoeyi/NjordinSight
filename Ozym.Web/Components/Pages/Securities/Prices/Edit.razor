@page "/securities/prices/edit"

@inherits ModelPagedIndexEditor<SecurityPriceDto>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

<ModelPageHeader Header="@(PageTitle.ReadMany())" />

@if (SearchService.SearchFields is null)
{
    <LoadingSvg />
}
else
{
    @if (SearchService.SearchFields.Any())
    {
        <ContentTile>
            <Body>
                <SearchInputTable TModel="SecurityPriceDto"
                                    ComparisonOperators=@SearchService.ComparisonOperators
                                    ExpressionBuilder=@SearchService.ExpressionBuilder
                                    SearchFields=@SearchService.SearchFields
                                    OnSearchClick=@(async (args) => await SearchClicked(args))>
                </SearchInputTable>
            </Body>
        </ContentTile>
    }
}

<CascadingValue Value="@ErrorMessage">
    <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
</CascadingValue>

@if(Context is null)
{
    <LoadingSvg />
}
else
{
    <EditForm width="100%" EditContext="@Context">
            <DataAnnotationsValidator />
            <ActionButtonMenu>
                <button class="form-control button"
                    @onclick="@(async (args) => await Submit_OnClick(context, args))">
                    @Strings.Caption_Button_Save
                </button>
                <button class="form-control button"
                    @onclick="((args) => AddNew(args))">
                    @Strings.Caption_CreateNew.Format(ModelNoun?.GetSingular())
                </button>
                <button class="form-control button" @onclick="CancelEditor_OnClick"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Cancel
                </button>
            </ActionButtonMenu>
            <ContentTile>
                <TitleAlignLeft>
                    <Paginator Model="PaginationHelper"
                            IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
                </TitleAlignLeft>
                <Body>
                    @if (IsLoading)
                    {
                        <LoadingSvg />
                    }
                    else
                    {
                        <ValidationSummary />
                    <DataGrid Data="@WorkingEntries" FootNote="@PaginationHelper.RecordReport">
                            <DataGridColumn Type="DataGridCellType.Button">
                                <CellEditTemplate Context="model">
                                    <ToolTip Text="@Strings.Caption_Button_Delete">
                                        <button class="form-control button icon" type="button"
                                            @onclick="(args) => DeleteRecord(args, model)">
                                            <IonIcon Name="close-circle" />
                                        </button>
                                    </ToolTip>
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(SecurityPriceDto.SecurityId)
                                Type="DataGridCellType.Control"
                                Caption=@(NameFor(x => x.SecurityId))>
                                <CellEditTemplate Context="model">
                                    <InputSelect class="form-control" @bind-Value="@model.SecurityId">
                                        @foreach (var lookup in SecurityLookup ?? [])
                                        {
                                            <option value=@lookup.SecurityId>@lookup.SecurityDescription</option>
                                        }
                                    </InputSelect>
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(SecurityPriceDto.PriceDate)
                                Type="DataGridCellType.Control"
                                Caption=@(NameFor(x => x.PriceDate))>
                                <CellEditTemplate Context="model">
                                    <InputDate class="form-control" @bind-Value="model.PriceDate" />
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(SecurityPriceDto.PriceClose)
                                Type="DataGridCellType.Control"
                                Caption=@(NameFor(x => x.PriceClose))>
                                <CellEditTemplate Context="model">
                                    <InputNumber class="form-control" @bind-Value="model.PriceClose" />
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(SecurityPriceDto.PriceOpen)
                                Type="DataGridCellType.Control"
                                Caption=@(NameFor(x => x.PriceOpen))>
                                <CellEditTemplate Context="model">
                                    <InputNumber class="form-control" @bind-Value="model.PriceOpen" />
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(SecurityPriceDto.PriceHigh)
                                Type="DataGridCellType.Control"
                                Caption=@(NameFor(x => x.PriceHigh))>
                                <CellEditTemplate Context="model">
                                    <InputNumber class="form-control" @bind-Value="model.PriceHigh" />
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(SecurityPriceDto.PriceLow)
                                Type="DataGridCellType.Control"
                                Caption=@(NameFor(x => x.PriceLow))>
                                <CellEditTemplate Context="model">
                                    <InputNumber class="form-control" @bind-Value="model.PriceLow" />
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(SecurityPriceDto.Volume)
                                Type="DataGridCellType.Control"
                                Caption=@(NameFor(x => x.Volume))>
                                <CellEditTemplate Context="model">
                                    <InputNumber class="form-control" @bind-Value="model.Volume" />
                                </CellEditTemplate>
                            </DataGridColumn>
                        </DataGrid>
                    }
                </Body>
            </ContentTile>
        </EditForm>
}

@code {
    private IEnumerable<SecurityDtoBase>? SecurityLookup { get; set; }

    /// <inheritdoc />
    protected override string IndexUriRelativePath => $"{base.IndexUriRelativePath}/prices";

    /// <inheritdoc />
    protected override bool PageDataIsLoading() => SecurityLookup is null || WorkingEntries is null;

    /// <inheritdoc />
    protected override async Task RefreshResultsAsync(
    ParameterDto<SecurityPriceDto>? parameter, int pageNumber, int pageSize)
    {
        var pricesTask = parameter is null ?
            HttpService.IndexAsync(
                    pageNumber: PaginationHelper.PageIndex,
                    pageSize: PaginationHelper.PageSize) :
            HttpService.SearchAsync(
                parameter: parameter,
                pageNumber: PaginationHelper.PageIndex,
                pageSize: PaginationHelper.PageSize);

        var securityDtosTask = HttpService.GetAllAsync<SecurityDtoBase>();

        await InitializationTasksAsync(pricesTask, securityDtosTask);

        var pricesResult = await pricesTask;
        var securityDtosResult = await securityDtosTask;

        SecurityLookup = securityDtosResult;
        WorkingEntries = new TrackingEnumerable<SecurityPriceDto>(pricesResult.Item1.ToList());

        Context = new(WorkingEntries);

        PaginationHelper.TotalItemCount = pricesResult.Item2.ItemCount;
        PaginationHelper.ItemCount = WorkingEntries.Count;
    }
}
