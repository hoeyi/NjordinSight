@page "/securities/{ModelId:int}/detail"

@inherits ModelDetail<SecurityDto>

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <PageTitle>@(PageTitle.ReadSingle($"{Model.CurrentSymbol} {Model.SecurityDescription}").AsPageTitle())
    </PageTitle>

    <ModelPageHeader 
        ActionMenu="@SectionNavigationMenu" 
        Header="@(PageTitle.ReadSingle(Model.SecurityDescription))" />

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <ContentTile>
        <Body>
            <CascadingValue Value="@Model">
                <EditForm class="model-editor" Model="@Model">
                    <SecurityCRUD
                        SecurityTypes="SecurityTypes"
                        SecurityExchanges="Exchanges"
                        Issuers="Issuers"
                        Disabled="false" ReadOnly="true" />
                </EditForm>
            </CascadingValue>
        </Body>
    </ContentTile>
    @foreach (var group in Model.AttributeCollection.CurrentEntryCollectionGroups
        .OrderBy(g => g.ParentAttribute.DisplayName))
    {
        <CascadingValue Value="@group">
            <EditForm class="model-editor" Model="@group">
                <SecurityAttributesCRUD 
                    Disabled="false"
                    ReadOnly="true" />
            </EditForm>
        </CascadingValue>
    }
    <ContentTile>
        <TitleAlignLeft>
            @(ModelMetadata
                .GetAttribute<SecuritySymbolDto, NounAttribute>()
                .GetPlural().ToTitleCase())
        </TitleAlignLeft>
        <Body>
            <EditForm width="100%" Model="@Model.Symbols">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <DataGrid Data="@Model.Symbols">
                    <DataGridColumn Property="@nameof(SecuritySymbolDto.SymbolTypeId)"
                                Caption="@(ModelMetadata.NameFor<SecuritySymbolDto>(
                                    x => x.SymbolTypeId))">
                        <CellTemplate Context="model">
                            @(SymbolTypes!.FirstOrDefault(x => x.SymbolTypeId == model.SymbolTypeId)?.SymbolTypeName)
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(SecuritySymbolDto.EffectiveDate)"
                                Caption="@(ModelMetadata.NameFor<SecuritySymbolDto>(x => x.EffectiveDate))">
                        <CellTemplate Context="model">
                            @model.EffectiveDate.ToShortDateString()
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(SecuritySymbolDto.Ticker)"
                                Caption="@(ModelMetadata.NameFor<SecuritySymbolDto>(x => x.Ticker))">
                        <CellTemplate Context="model">
                            @model.Ticker
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(SecuritySymbolDto.Cusip)"
                                Caption="@(ModelMetadata.NameFor<SecuritySymbolDto>(x => x.Cusip))">
                        <CellTemplate Context="model">
                            @model.Cusip
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(SecuritySymbolDto.CustomSymbol)"
                                Caption="@(ModelMetadata.NameFor<SecuritySymbolDto>(x => x.CustomSymbol))">
                        <CellTemplate Context="model">
                            @model.CustomSymbol
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(SecuritySymbolDto.OptionTicker)"
                                Caption="@(ModelMetadata.NameFor<SecuritySymbolDto>(x => x.OptionTicker))">
                        <CellTemplate Context="model">
                            @model.OptionTicker
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            </EditForm>
        </Body>
    </ContentTile>
}

@code {
    [Parameter]
    public int ModelId { get; init; }

    [Inject]
    protected IQueryService QueryService { get; init; } = default!;

    private IEnumerable<SecurityExchangeDto>? Exchanges { get; set; }

    private IEnumerable<SecurityTypeDto>? SecurityTypes { get; set; }

    private IEnumerable<SecuritySymbolTypeDto>? SymbolTypes { get; set; }

    private IEnumerable<string>? Issuers { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        try
        {
            var exchangesQuery = HttpService.GetAllAsync<SecurityExchangeDto>();
            var issuersQuery = QueryService.BuiltIn.GetIssuersAsync(pageSize: int.MaxValue);
            var securityTypesQuery = QueryService.BuiltIn.GetSecurityTypeDTOsAsync(pageSize: int.MaxValue);
            var symbolTypesQuery = QueryService.BuiltIn.GetSecuritySymbolTypesAsync(pageSize: int.MaxValue);

            var securityQuery = HttpService.GetAsync(ModelId);

            await Task.WhenAll(
                exchangesQuery, securityTypesQuery, issuersQuery, securityQuery, symbolTypesQuery);

            Model = await securityQuery;
            Exchanges = await exchangesQuery;
            SecurityTypes = (await securityTypesQuery).Item1;
            SymbolTypes = (await symbolTypesQuery).Item1;
            Issuers = (await issuersQuery).Item1;
        }
        finally
        {
            IsLoading = 
                Exchanges is null || 
                SecurityTypes is null || 
                Issuers is null || 
                SymbolTypes is null || 
                Model is null;
        }
    }
}
