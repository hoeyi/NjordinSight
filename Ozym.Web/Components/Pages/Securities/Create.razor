@page "/securities/create/{RequestGuid:guid}"

@inherits ModelDetail<SecurityDto>

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <PageTitle>
        @(PageTitle.CreateSingle().AsPageTitle())
    </PageTitle>

    <ModelPageHeader Header="@(PageTitle.CreateSingle())" />

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <CascadingValue Value="@Model">
        <AttributeEntryCollectionEditor 
            TViewModelParent="SecurityAttributeDtoCollection"
            TViewModelChild="SecurityAttributeGrouping"
            TModel="SecurityDto"
            TModelChild="SecurityAttributeDto"
            OnCancelEditorClick="FormCancelClickHandler"
            OnValidFormSubmit="HandleValidSubmit"
            EffectiveDatePath="@(x => x.EffectiveDate)"
            ModelDto="@Model.AttributeCollection"
            Mode="EditorMode.Add">
            <ViewModelCRUD>
                <SecurityCRUD SecurityTypes="SecurityTypes"
                            SecurityExchanges="Exchanges"
                            Issuers="Issuers"
                            Disabled="false" ReadOnly="false" />
            </ViewModelCRUD>
            <ViewModelChildCRUD>
                <SecurityAttributesCRUD Disabled="false" ReadOnly="false" />
            </ViewModelChildCRUD>
        </AttributeEntryCollectionEditor>
    </CascadingValue>
}

@code {
    [Parameter]
    public Guid RequestGuid { get; init; }

    [Inject]
    protected IQueryService QueryService { get; init; } = default!;

    private IEnumerable<SecurityExchangeDto>? Exchanges { get; set; }

    private IEnumerable<SecurityTypeDto>? SecurityTypes { get; set; }

    private IEnumerable<string>? Issuers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var exchangesQuery = HttpService.GetAllAsync<SecurityExchangeDto>();
            var securityTypesQuery = QueryService.BuiltIn.GetSecurityTypeDTOsAsync(pageSize: int.MaxValue);
            var issuersQuery = QueryService.BuiltIn.GetIssuersAsync(pageSize: int.MaxValue);

            var securityQuery = HttpService.InitDefaultAsync();

            await Task.WhenAll(exchangesQuery, securityTypesQuery, issuersQuery, securityQuery);

            Model = await securityQuery;
            Exchanges = await exchangesQuery;
            SecurityTypes = (await securityTypesQuery).Item1;
            Issuers = (await issuersQuery).Item1;
        }
        finally
        {
            IsLoading = Exchanges is null || SecurityTypes is null || Issuers is null || Model is null;
        }
    }

    private void FormCancelClickHandler() => NavigationHelper.NavigateTo(IndexUriRelativePath);
}
