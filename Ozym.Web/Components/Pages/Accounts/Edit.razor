@page "/accounts/{ModelId:int}/edit"

@inherits ModelDetail<AccountDto>

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <PageTitle>@(PageTitle.UpdateSingle(Model.ShortCode).AsPageTitle())</PageTitle>

    <ModelPageHeader Header="@(PageTitle.UpdateSingle(Model.ShortCode))" />

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <CascadingValue Value="@Model">
        <AttributeEntryEditor TViewModelParent="AccountAttributeDtoCollection"
            TViewModelChild="AccountAttributeGrouping"
            TModel="AccountBaseDto"
            TModelChild="AccountBaseAttributeDto"
            OnCancelEditorClick="FormCancelClickHandler"
            OnDeleteModelClick="FormDeleteClickHandler"
            OnValidFormSubmit="ValidFormSubmitHandler"
            ModelDto="@Model.AttributeCollection"
            Mode="EditorMode.Edit">
            <ViewModelCRUD>
                <AccountCRUD AccountCustodians="@CustodianDtos" Disabled="false" ReadOnly="false" />
            </ViewModelCRUD>
            <ViewModelChildCRUD>
                <AccountAttributesCRUD Disabled="false" ReadOnly="false" />
            </ViewModelChildCRUD>
        </AttributeEntryEditor>
    </CascadingValue>
}

@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<AccountCustodianDto>? CustodianDtos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var accountQuery = HttpService.GetAsync(ModelId);
            var custodiansQuery = HttpService.GetAllAsync<AccountCustodianDto>();

            await Task.WhenAll(accountQuery, custodiansQuery);

            Model = await accountQuery;
            CustodianDtos = await custodiansQuery;
        }
        finally
        {
            IsLoading = Model is null || CustodianDtos is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task FormDeleteClickHandler(MouseEventArgs args)
    {
        var result = RunCatchingHttpRequestException(HttpService.DeleteAsync(Model.Id));

        await result;

        if (result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var result = RunCatchingHttpRequestException(HttpService.PutAsync(ModelId, Model));

        await result;

        if (result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
}
