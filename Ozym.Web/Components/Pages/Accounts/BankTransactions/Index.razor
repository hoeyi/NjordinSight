@page "/accounts/{ModelId:int}/detail/bank-transactions"

@inherits ModelPagedIndex<BankTransactionDto>

@if (ParentAccount is null)
{
    <LoadingSvg />
}
else
{
    <PageTitle>@(PageTitle.ReadMany(ParentAccount.ShortCode).AsPageTitle())</PageTitle>

    <ModelPageHeader Header="@(PageTitle.ReadMany(ParentAccount.ShortCode))" 
        ActionMenu="@SectionNavigationMenu" />
}

<CascadingValue Value="@ErrorMessage">
    <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
</CascadingValue>

<ContentTile>
    <TitleAlignLeft>
        <Paginator Model="PaginationHelper"
                IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
    </TitleAlignLeft>
    <Body>
        @if(IsLoading)
        {
            <LoadingSvg />
        }
        else
        {
            <DataGrid Data="@Entries" FootNote="@PaginationHelper.RecordReport">
                <DataGridColumn Property="@nameof(BankTransactionDto.TransactionCodeId)"
                            Caption="@NameFor(x => x.TransactionCodeId)">
                    <CellTemplate Context="model">
                        @GetDisplayValue(TransactionCodes!, model.TransactionCodeId)
                    </CellTemplate>
                </DataGridColumn>
                <DataGridColumn Property="@nameof(BankTransactionDto.TransactionDate)"
                            Caption="@(NameFor(x => x.TransactionDate))">
                    <CellTemplate Context="model">
                        @model.TransactionDate.ToShortDateString()
                    </CellTemplate>
                </DataGridColumn>
                <DataGridColumn Property="@nameof(BankTransactionDto.Amount)"
                            Caption="@(NameFor(x => x.Amount))">
                    <CellTemplate Context="model">
                        @model.Amount
                    </CellTemplate>
                </DataGridColumn>
                <DataGridColumn Property="@nameof(BankTransactionDto.Comment)"
                            Caption="@(NameFor(x => x.Comment))">
                    <CellTemplate Context="model">
                        @model.Comment
                    </CellTemplate>
                </DataGridColumn>
            </DataGrid>
        }
    </Body>
</ContentTile>

@code {
    [Parameter]
    public int ModelId { get; init; }

    [Inject]
    protected IQueryService QueryService { get; init; } = default!;

    [Inject]
    protected new IHttpCollectionService<BankTransactionDto, int> HttpService { get; init; } = default!;

    private IEnumerable<BankTransactionCodeDtoBase>? TransactionCodes { get; set; }

    private AccountDto? ParentAccount { get; set; }

    protected override MenuRoot CreateSectionNavigationMenu() => new()
    {
        Children = new()
        {
            new MenuItem()
            {
                IconKey = "caret-back-circle",
                Caption = string.Format(
                        Strings.Caption_NavigateBackTo,
                        ModelMetadata.GetAttribute<AccountDto, NounAttribute>()?.GetSingular()),
                UriRelativePath = $"{IndexUriRelativePath}/{ModelId}/detail"
            },
            new MenuItem()
            {
                IconKey = "pencil",
                Caption = string.Format(Strings.Caption_EditMany, ModelNoun?.GetPlural()),
                UriRelativePath = $"{IndexUriRelativePath}/{ModelId}/edit/bank-transactions"
            }
        }
    };

    /// <inheritdoc />
    protected override bool PageDataIsLoading() => 
        Entries is null || ParentAccount is null || TransactionCodes is null;

    /// <inheritdoc/>
    protected override async Task RefreshResultsAsync(
        ParameterDto<BankTransactionDto>? parameter, int pageNumber, int pageSize)
    {
        ParentAccount = await HttpService.GetAsync<AccountDto>(id: ModelId);

        var transactionCodeDTOsTask = QueryService.BuiltIn
            .GetBankTransactionCodeDTOsAsync(pageSize: int.MaxValue);

        var transactionsQueryTask = parameter is null ?
            HttpService.IndexAsync<AccountDto>(ModelId, pageNumber, pageSize) :
            HttpService.SearchAsync<AccountDto>(ModelId, parameter, pageNumber, pageSize);

        await InitializationTasksAsync(transactionsQueryTask, transactionCodeDTOsTask);

        var transactionResult = await transactionsQueryTask;
        var transactionCodeDtoResult = await transactionCodeDTOsTask;

        Entries = transactionResult.Item1;
        ParentAccount = transactionResult.Item2;
        TransactionCodes = transactionCodeDtoResult.Item1;

        PaginationHelper.TotalItemCount = transactionResult.Item3.ItemCount;
        PaginationHelper.ItemCount = Entries.Count();
    }

    private string GetDisplayValue(
        IEnumerable<BankTransactionCodeDtoBase> lookupModels, int id) =>
        lookupModels.FirstOrDefault(x => x.TransactionCodeId == id)?.TransactionCode ?? string.Empty;

}