@page "/accounts/{ModelId:int}/edit/bank-transactions"

@inherits ModelPagedIndexEditor<BankTransactionDto>

<ThemedComponent>
    @if (ParentAccount is null)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateMany(ParentAccount.ShortCode).AsPageTitle())</PageTitle>

        <ModelPageHeader Header="@(PageTitle.UpdateMany(ParentAccount.ShortCode))" />
    }

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    @if(Context is null)
    {
        <LoadingSvg />
    }
    else
    {
        <EditForm width="100%" EditContext="Context">
            <DataAnnotationsValidator />
            <ActionButtonMenu>
                <button class="form-control button" width="20%"
                    @onclick="@(async (args) => await Submit_OnClick(context, args))">
                    @Strings.Caption_Button_Save
                </button>
            <button class="form-control button" width="20%"
                    @onclick=@((args) => AddNew(args))>
                    @Strings.Caption_CreateNew.Format(ModelNoun?.GetSingular())
                </button>
                <button class="form-control button" width="20%"
                    @onclick="CancelEditor_OnClick"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Cancel
                </button>
            </ActionButtonMenu>
            <ContentTile>
                <TitleAlignLeft>
                    <Paginator Model="PaginationHelper"
                            IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
                </TitleAlignLeft>
                <Body>
                    @if(IsLoading)
                    {
                        <LoadingSvg />
                    }
                    else
                    {
                        <ValidationSummary />
                        <DataGrid Data="@WorkingEntries" FootNote="@PaginationHelper.RecordReport">
                            <DataGridColumn Type="DataGridCellType.Button">
                                <CellEditTemplate Context="model">
                                    <ToolTip Text="@Strings.Caption_Button_Delete">
                                    <button class="form-control button icon" type="button"
                                        @onclick="(args) => DeleteRecord(args, model)">
                                        <IonIcon Name="close-circle" />
                                    </button>
                                    </ToolTip>
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn 
                                Type="DataGridCellType.Control"
                                Property="@nameof(BankTransactionDto.TransactionCodeId)"
                                Caption="@NameFor(x => x.TransactionCodeId)">
                                <CellEditTemplate Context="model">
                                    <InputSelect class="form-control"
                                                @bind-Value="@model.TransactionCodeId">
                                        @foreach (var lookup in TransactionCodes ?? [])
                                        {
                                            <option value=@lookup.TransactionCodeId>@lookup.TransactionCode</option>
                                        }
                                    </InputSelect>
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn 
                                Type="DataGridCellType.Control"
                                Property="@nameof(BankTransactionDto.TransactionDate)"
                                Caption="@(NameFor(x => x.TransactionDate))">
                                <CellEditTemplate Context="model">
                                    <InputDate class="form-control" @bind-Value="@model.TransactionDate" />
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn 
                                Type="DataGridCellType.Control" 
                                Property="@nameof(BankTransactionDto.Amount)"
                                Caption="@(NameFor(x => x.Amount))">
                                <CellEditTemplate Context="model">
                                    <InputNumber class="form-control" @bind-Value="@model.Amount" />
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property="@nameof(BankTransactionDto.Comment)"
                                        Caption="@(NameFor(x => x.Comment))">
                                <CellEditTemplate Context="model">
                                    <InputText class="form-control" @bind-Value="@model.Comment" />
                                </CellEditTemplate>
                            </DataGridColumn>
                        </DataGrid>
                    }
                </Body>
            </ContentTile>
        </EditForm>
    }
</ThemedComponent>

    @code {
    [Parameter]
    public int ModelId { get; init; }

    [Inject]
    protected IQueryService QueryService { get; init; } = default!;

    [Inject]
    protected new IHttpCollectionService<BankTransactionDto, int> HttpService { get; init; } = default!;

    private IEnumerable<BankTransactionCodeDtoBase>? TransactionCodes { get; set; }

    private AccountDto? ParentAccount { get; set; }

    /// <inheritdoc/>
    protected override bool PageDataIsLoading() =>
        WorkingEntries is null
        || ParentAccount is null
        || TransactionCodes is null;

    /// <inheritdoc/>
    protected override async Task RefreshResultsAsync(
        ParameterDto<BankTransactionDto> parameter, int pageNumber, int pageSize)
    {
        if (WorkingEntries?.HasChanges ?? false)
        {
            var discardConfirmed = await ConfirmDiscardChangesAsync();

            if (!discardConfirmed)
                return;
        }

        ParentAccount = await HttpService.GetAsync<AccountDto>(id: ModelId);

        var transactionCodeDTOsTask = QueryService.BuiltIn
            .GetBankTransactionCodeDTOsAsync(pageSize: int.MaxValue);

        var transactionsQueryTask = parameter is null ?
            HttpService.IndexAsync<AccountDto>(ModelId, pageNumber, pageSize) :
            HttpService.SearchAsync<AccountDto>(ModelId, parameter, pageNumber, pageSize);

        await InitializationTasksAsync(transactionsQueryTask, transactionCodeDTOsTask);

        var transactionResult = await transactionsQueryTask;
        var transactionCodeDtoResult = await transactionCodeDTOsTask;

        WorkingEntries = new TrackingEnumerable<BankTransactionDto>(
            transactionResult.Item1.ToList());
        TransactionCodes = transactionCodeDtoResult.Item1;

        Context = new(WorkingEntries);

        PaginationHelper.TotalItemCount = transactionResult.Item3.ItemCount;
        PaginationHelper.ItemCount = WorkingEntries.Count;
    }

    /// <inheritdoc/>
    protected override void ReturnToIndex() =>
        NavigationHelper.NavigateTo($"{IndexUriRelativePath}/{ModelId}/detail/bank-transactions");

    /// <inheritdoc/>
    protected override async Task Submit_OnClick(EditContext context, MouseEventArgs args)
    {
        // Clear error message, if present.
        ErrorMessage = null;

        if (!WorkingEntries.HasChanges)
            ReturnToIndex();

        bool isValid = context.Validate();
        if (isValid)
        {
            var changes = WorkingEntries.GetChanges();

            try
            {
                var saveResult = await HttpService.PatchCollectionAsync(changes, ParentAccount!.Id);

                ReturnToIndex();
            }
            catch (HttpRequestException e)
            {
                ErrorMessage = e?.Message;
            }
        }
        else
        {
            ErrorMessage = string.Join("\n", context.GetValidationMessages());
        }
    }
}
