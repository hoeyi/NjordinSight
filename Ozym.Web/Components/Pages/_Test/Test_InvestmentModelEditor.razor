@page "/_test/test-investment-model-editor"

@inherits ModelDetail<InvestmentModelDto>

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

    <ModelPageHeader Header="@(PageTitle.CreateSingle())" />

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <CascadingValue Value="@Model">
        <ContentTile class="left">
            <Body>
                <ActionButtonMenu>
                    <button type="submit" form="@_formGuid" class="form-control button" disabled="@_formInvalid">
                        @Strings.Caption_Button_Save
                    </button>
                    <button type="button" class="form-control button"
                            @onclick="FormShowModalClickHandler"
                    @onclick:preventDefault>
                        Show modal
                    </button>
                    <button type="button" class="form-control button"
                            @onclick="FormCancelClickHandler"
                    @onclick:preventDefault>
                        @Strings.Caption_Button_Cancel
                    </button>
                </ActionButtonMenu>
                <EditForm id="@_formGuid"
                          EditContext="_editContext"
                          OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <InvestmentModelCRUD Disabled="false" ReadOnly="false" />
                </EditForm>
            </Body>
        </ContentTile>
        @if (showModal)
        {
            <CascadingValue Value="@AttributeGroup">
                <CascadingValue Value="@AttributeMembers" Name="AttributeMembers">
                    <AttributeTargetModalCRUD 
                        TModelDto="InvestmentModelTargetGrouping"
                        OnClose="FormShowModalClickHandler">
                        <InvestmentModelTargetCRUD Disabled="false" ReadOnly="false" />
                    </AttributeTargetModalCRUD>
                </CascadingValue>
            </CascadingValue>
        }
    </CascadingValue>
}

@code {
    private IEnumerable<ModelAttributeDto> Attributes { get; set; } = [];
    private IEnumerable<ModelAttributeMemberDto> AttributeMembers { get; set; } = [];
    private EditContext _editContext = default!;
    private Guid _formGuid = new Guid();
    private bool _formInvalid = false;

    private InvestmentModelTargetGrouping AttributeGroup { get; set; } = default!;
    private InvestmentModelTargetDtoCollection ViewModel { get; set; } = default!;

    private bool showModal = false;

    protected override string IndexUriRelativePath => "/";

#if DEBUG
    protected override async Task OnInitializedAsync()
    {
    IsLoading = true;

    await Task.Delay(1500);

    Attributes = [
    new ModelAttributeDto()
        {
        AttributeId = 1,
        DisplayName = "Test attribute"
        }
    ];
    AttributeMembers = [
    new ModelAttributeMemberDto()
        {
        DisplayOrder = 1,
        Attribute = Attributes.First(),
        AttributeMemberId = 1,
        DisplayName = "Value 1"
    },
    new ModelAttributeMemberDto()
        {
        DisplayOrder = 1,
        Attribute = Attributes.First(),
        AttributeMemberId = 1,
        DisplayName = "Value 2"
        }
    ];
    Model = new InvestmentModelDto(){ Targets = [] };
    ViewModel = new(Model);

    AttributeGroup = ViewModel.AddNew(Attributes.First());

    _editContext = new(Model);

    IsLoading = Model is null || Attributes is null || AttributeMembers is null;
    }
#endif
    private void FormCancelClickHandler() => NavigationHelper.NavigateTo("/");

    private void FormShowModalClickHandler() => showModal = !showModal;
}
