@page "/security-types/{ModelId:int}/edit"

@inherits ModelDetail<SecurityTypeDto>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateSingle(Model.SecurityTypeName).AsPageTitle())</PageTitle>

        <ModelPageHeader Header="@(PageTitle.UpdateSingle(Model.SecurityTypeName))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic"/>
        </CascadingValue>

        <ContentTile>
            <Body>
                <CascadingValue Value="@Model">
                    <EditForm class="model-editor" Model="@Model"
                        OnValidSubmit="ValidFormSubmitHandler">
                        <DataAnnotationsValidator />
                        <ActionButtonMenu>
                            <button type="submit" class="form-control button">
                                @Strings.Caption_Button_Save
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="FormDeleteClickHandler"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Delete
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="FormCancelClickHandler"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Cancel
                            </button>
                        </ActionButtonMenu>
                        <SecurityTypeCRUD Disabled="false" ReadOnly="false"
                            SecurityTypeGroups="@SecurityTypeGroups" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
    }
</ThemedComponent>


@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<SecurityTypeGroupDto>? SecurityTypeGroups { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = HttpService.GetAsync(ModelId);
            var typeGroupsQuery = HttpService.GetAllAsync<SecurityTypeGroupDto>();

            await Task.WhenAll(modelQuery, typeGroupsQuery);

            Model = await modelQuery;
            SecurityTypeGroups = await typeGroupsQuery;
        }
        finally
        {
            IsLoading = Model is null || SecurityTypeGroups is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task FormDeleteClickHandler(MouseEventArgs args)
    {
        var result = RunCatchingHttpRequestException(HttpService.DeleteAsync(Model.SecurityTypeId));

        await result;

        if (result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var result = RunCatchingHttpRequestException(HttpService.PutAsync(ModelId, Model));

        await result;

        if (result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
}