@page "/composites/create/{RequestGuid:guid}"

@inherits ModelDetail<AccountCompositeDto>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

        <ModelPageHeader Header="@(PageTitle.CreateSingle())" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic"/>
        </CascadingValue>

        <CascadingValue Value="@Model">
            <EditForm class="model-editor"
                      Model="@Model"
                  OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ActionButtonMenu>
                    <button type="submit" class="form-control button">
                        @Strings.Caption_Button_Save
                    </button>
                    <button type="button" class="form-control button"
                        @onclick="FormCancelClickHandler"
                        @onclick:preventDefault>
                        @Strings.Caption_Button_Cancel
                    </button>
                </ActionButtonMenu>
                <ContentTile>
                    <Body>
                        <AccountCompositeCRUD Disabled="false" ReadOnly="false" />
                    </Body>
                </ContentTile>
            </EditForm>
            <EditForm Model="@Model">
                <ContentTile>
                    <Body>
                        <AccountCompositeMembersCRUD Accounts="@AccountDtos" Disabled="false" ReadOnly="false" />
                    </Body>
                </ContentTile>
            </EditForm>
        </CascadingValue>
    }
</ThemedComponent>

@code {
    [Parameter]
    public Guid RequestGuid { get; init; }

    [Inject]
    protected IQueryService QueryService { get; init; } = default!;

    private IEnumerable<AccountSimpleDto>? AccountDtos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var compositeQuery = HttpService.InitDefaultAsync();
            var accountsQuery = QueryService.BuiltIn.GetAccountDTOsAsync(pageSize: int.MaxValue);

            await Task.WhenAll(compositeQuery, accountsQuery);

            Model = await compositeQuery;
            AccountDtos = (await accountsQuery).Item1;
        }
        finally
        {
            IsLoading = Model is null || AccountDtos is null;
        }
    }

    private void FormCancelClickHandler() => NavigationHelper.NavigateTo(IndexUriRelativePath);
}
