@page "/composites/{ModelId:int}/edit"

@inherits ModelDetail<AccountCompositeDto>

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <PageTitle>@(PageTitle.UpdateSingle(Model.ShortCode).AsPageTitle())</PageTitle>

    <ModelPageHeader Header="@(PageTitle.UpdateSingle(Model.ShortCode))" />

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic"/>
    </CascadingValue>

    <CascadingValue Value="@Model">
        <AttributeEntryEditor TViewModelParent="AccountAttributeDtoCollection"
            TViewModelChild="AccountAttributeGrouping"
            TModel="AccountBaseDto"
            TModelChild="AccountBaseAttributeDto"
            OnCancelEditorClick="FormCancelClickHandler"
            OnDeleteModelClick="FormDeleteClickHandler"
            OnValidFormSubmit="ValidFormSubmitHandler"
            ModelDto="@Model.AttributeCollection"
            Mode="EditorMode.Edit">
            <ViewModelCRUD>
                <AccountCompositeCRUD Disabled="false" ReadOnly="false" />
            </ViewModelCRUD>
            <ViewModelChildCRUD>
                <AccountAttributesCRUD Disabled="false" ReadOnly="false" />
            </ViewModelChildCRUD>
        </AttributeEntryEditor>
        <ContentTile>
            <Body>
                <EditForm Model="@Model">
                    <AccountCompositeMembersCRUD Accounts="@AccountDtos" Disabled="false" ReadOnly="false" />
                </EditForm>
            </Body>
        </ContentTile>
    </CascadingValue>
}

@code {
    [Parameter]
    public int ModelId { get; init; }

    [Inject]
    protected IQueryService QueryService { get; init; } = default!;

    private IEnumerable<AccountSimpleDto> AccountDtos { get; set; } = [];

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        try
        {
            var compositeQuery = HttpService.GetAsync(ModelId);
            var accountsQuery = QueryService.BuiltIn.GetAccountDTOsAsync(pageSize: int.MaxValue);

            var dataTask = Task.WhenAll(compositeQuery, accountsQuery);

            Model = await compositeQuery;
            AccountDtos = (await accountsQuery).Item1;
        }
        finally
        {
            IsLoading = Model is null || AccountDtos is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task FormDeleteClickHandler(MouseEventArgs args)
    {
        var result = RunCatchingHttpRequestException(HttpService.DeleteAsync(Model.Id));

        await result;

        if(result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var result = RunCatchingHttpRequestException(HttpService.PutAsync(ModelId, Model));

        await result;

        if (result.Status  == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
}
