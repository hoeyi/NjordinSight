@page "/attributes/{ModelId:int}/edit"

@inherits ModelDetail<ModelAttributeDto>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@PageTitle.UpdateSingle(Model.DisplayName).AsPageTitle()</PageTitle>

        <ModelPageHeader Header="@(PageTitle.UpdateSingle(Model.DisplayName))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <CascadingValue Value="@Model">
            <EditForm class="model-editor" Model="@Model" OnValidSubmit="ValidFormSubmitHandler">
                <DataAnnotationsValidator />
                <ActionButtonMenu>
                    <button type="submit" class="form-control button">
                        @Strings.Caption_Button_Save
                    </button>
                    <button type="button" class="form-control button"
                        @onclick="FormDeleteClickHandler"
                        @onclick:preventDefault>
                        @Strings.Caption_Button_Delete
                    </button>
                    <button type="button" class="form-control button"
                        @onclick="FormCancelClickHandler"
                        @onclick:preventDefault>
                        @Strings.Caption_Button_Cancel
                    </button>
                </ActionButtonMenu>
                <ContentTile>
                    <Body>
                        <ModelAttributeCRUD Disabled="false" ReadOnly="false" />
                    </Body>
                </ContentTile>
            </EditForm>
            <EditForm class="model-editor" EditContext="_attributeScopeContext" >
                <DataAnnotationsValidator />
                <ContentTile>
                    <Body>
                        <ActionButtonMenu>
                            <button class="form-control button"
                                @onclick="args => Model.AttributeScopes.Add(new(){ AttributeId = Model.AttributeId })">
                                @Strings.Caption_CreateNew.Format(ModelMetadata
                                    .GetAttribute<ModelAttributeScopeDto, NounAttribute>()?.GetSingular())
                            </button>
                        </ActionButtonMenu>
                        <ValidationSummary />
                        <DataGrid Data="@Model.AttributeScopes">
                            <DataGridColumn Type="DataGridCellType.Button">
                                <CellEditTemplate Context="model">
                                    <ToolTip Text="@Strings.Caption_Button_Delete">
                                        <button class="form-control button icon" type="button"
                                            @onclick="(args) => Model.AttributeScopes.Remove(model)">
                                            <IonIcon Name="close-circle" />
                                        </button>
                                    </ToolTip>
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Type="DataGridCellType.Control"
                                        Property="@nameof(ModelAttributeScopeDto.ScopeCode)"
                                            Caption="@(ModelMetadata.NameFor<ModelAttributeScopeDto>(x => x.ScopeCode))">
                                <CellEditTemplate Context="model">
                                    <InputSelect class="form-control" @bind-Value="@model.ScopeCode">
                                        @foreach (var scopeLookup in AttributeScopeDtos ?? [])
                                        {
                                            <option value=@scopeLookup.Key>@scopeLookup.Value</option>
                                        }
                                    </InputSelect>
                                </CellEditTemplate>
                            </DataGridColumn>
                        </DataGrid>
                    </Body>
                </ContentTile>
            </EditForm>
            <EditForm class="model-editor" EditContext="_attributeMemberContext">
                <ContentTile>
                    <Body>
                        <ActionButtonMenu>
                            <button class="form-control button"
                                @onclick="args => Model.AttributeValues.Add(new(){ Attribute = Model})">
                                @Strings.Caption_CreateNew.Format(ModelMetadata
                                    .GetAttribute<ModelAttributeMemberDto, NounAttribute>()?.GetSingular())
                            </button>
                        </ActionButtonMenu>
                        <ValidationSummary />
                        <DataGrid Data="@Model.AttributeValues">
                            <DataGridColumn Type="DataGridCellType.Button">
                                <CellEditTemplate Context="model">
                                    <ToolTip Text="@Strings.Caption_Button_Delete">
                                        <button class="form-control button icon" type="button"
                                            @onclick="async (args) => Model.AttributeValues.Remove(model)">
                                            <IonIcon Name="close-circle" />
                                        </button>
                                    </ToolTip>
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Type="DataGridCellType.Control"
                                            Property="@nameof(ModelAttributeMemberDto.DisplayName)"
                                            Caption="@(ModelMetadata.NameFor<ModelAttributeMemberDto>(x => x.DisplayName))">
                                <CellEditTemplate Context="model">
                                    <InputText class="form-control" @bind-Value="model.DisplayName" />                            
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Type="DataGridCellType.Control"
                                            Property="@nameof(ModelAttributeMemberDto.DisplayOrder)"
                                        Caption="@(ModelMetadata.NameFor<ModelAttributeMemberDto>(x => x.DisplayOrder))">
                                <CellEditTemplate Context="model">
                                    <InputNumber class="form-control" @bind-Value="@model.DisplayOrder" />
                                </CellEditTemplate>
                            </DataGridColumn>
                        </DataGrid>
                    </Body>
                </ContentTile>
            </EditForm>
        </CascadingValue>
    }
</ThemedComponent>

    @code {
    [Parameter]
    public int ModelId { get; init; }

    [Inject]
    protected IQueryService QueryService { get; init; } = default!;

    private IEnumerable<KeyValuePair<string, string>>? AttributeScopeDtos { get; set; }

    private EditContext _attributeScopeContext = default!;
    private EditContext _attributeMemberContext = default!;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = HttpService.GetAsync(ModelId);
            var attributeScopeCodes = QueryService.BuiltIn.GetModelAttributeScopeDisplayMap(
                placeHolderDelegate: () => 
                    new KeyValuePair<string, string>(string.Empty, Strings.Caption_InputSelect_Prompt));

            await modelQuery;

            if (modelQuery.Status == TaskStatus.RanToCompletion)
            {
                Model = await modelQuery;
                AttributeScopeDtos = attributeScopeCodes
                    .OrderByDescending(k => k.Key == string.Empty).ThenBy(k => k.Value);

                _attributeScopeContext = new(Model.AttributeScopes);
                _attributeMemberContext = new(Model.AttributeValues);
            }
        }
        finally
        {
            IsLoading = Model is null || !(AttributeScopeDtos?.Any() ?? false);
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task FormDeleteClickHandler(MouseEventArgs args)
    {
        var result = RunCatchingHttpRequestException(HttpService.DeleteAsync(Model.AttributeId));

        await result;

        if (result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var result = RunCatchingHttpRequestException(HttpService.PutAsync(ModelId, Model));

        await result;

        if (result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
}
