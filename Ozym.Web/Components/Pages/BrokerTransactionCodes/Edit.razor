@page "/broker-transaction-codes/{ModelId:int}/edit"

@inherits ModelDetail<BrokerTransactionCodeDto>

<PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <ModelPageHeader ActionMenu="@SectionNavigationMenu"
                    Header="@(PageTitle.CreateSingle())" />

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <CascadingValue Value="@Model">
        <AttributeEntryEditor TViewModelParent="BrokerCodeAttributeDtoCollection"
                        TViewModelChild="BrokerTransactionCodeAttributeGrouping"
                        TModel="BrokerTransactionCodeDto"
                        TModelChild="BrokerTransactionCodeAttributeDto"
                        OnCancelEditorClick="FormCancelClickHandler"
                        OnDeleteModelClick="FormDeleteClickHandler"
                        OnValidFormSubmit="ValidFormSubmitHandler"
                        ModelDto="@Model.AttributeCollection"
                        Mode="EditorMode.Edit">
            <ViewModelCRUD>
                <BrokerTransactionCodeCRUD Disabled="false" ReadOnly="false" />
            </ViewModelCRUD>
            <ViewModelChildCRUD>
                <BrokerTransactionCodeAttributesCRUD Disabled="false" ReadOnly="false" />
            </ViewModelChildCRUD>
        </AttributeEntryEditor>
    </CascadingValue>
}

@code {
    [Parameter]
    public int ModelId { get; init; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            Model = await HttpService.GetAsync(ModelId);
        }
        finally
        {
            IsLoading = Model is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task FormDeleteClickHandler(MouseEventArgs args)
    {
        var result = RunCatchingHttpRequestException(HttpService.DeleteAsync(Model.TransactionCodeId));

        await result;

        if (result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var result = RunCatchingHttpRequestException(HttpService.PutAsync(ModelId, Model));

        await result;

        if (result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
}