@page "/market-indices/{ModelId:int}/edit"

@inherits ModelDetail<MarketIndexDto>

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <PageTitle>@(PageTitle.UpdateSingle(Model.IndexCode).AsPageTitle())</PageTitle>

    <ModelPageHeader Header="@(PageTitle.UpdateSingle(Model.IndexCode))" />

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <CascadingValue Value="@Model">
        <EditForm class="model-editor" Model="@Model" OnValidSubmit="ValidFormSubmitHandler">
            <ActionButtonMenu>
                <button type="submit" class="form-control button">
                    @Strings.Caption_Button_Save
                </button>
                <button type="button" class="form-control button"
                    @onclick="FormDeleteClickHandler"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Delete
                </button>
                <button type="button" class="form-control button"
                    @onclick="FormCancelClickHandler"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Cancel
                </button>
            </ActionButtonMenu>
            <ContentTile>
                <Body>
                    <DataAnnotationsValidator />
                    <MarketIndexCRUD Disabled="false" ReadOnly="false" />
                </Body>
            </ContentTile>
        </EditForm>
    </CascadingValue>
}

@code {
    [Parameter]
    public int ModelId { get; init; }

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;

        try
        {
            Model = await HttpService.GetAsync(ModelId);
        }
        finally
        {
            IsLoading = Model is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task FormDeleteClickHandler(MouseEventArgs args)
    {
        var result = RunCatchingHttpRequestException(HttpService.DeleteAsync(Model.IndexId));

        await result;

        if (result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var result = RunCatchingHttpRequestException(HttpService.PutAsync(ModelId, Model));

        await result;

        if (result.Status == TaskStatus.RanToCompletion)
            NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
}