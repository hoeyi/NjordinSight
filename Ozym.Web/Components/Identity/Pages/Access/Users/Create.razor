@page "/access/users/create"

@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using System.ComponentModel.DataAnnotations.Schema
@using System.Transactions

@inject IEmailSender<ApplicationUser> EmailSender
@inject IUserStore<ApplicationUser> UserStore
@inject IModelMetadataService ModelMetadata
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<ApplicationRole> RoleManager
@inject ILogger<Create> Logger

<PageTitle>
    @(titleInfo.CreateSingle().AsPageTitle())
</PageTitle>

<ModelPageHeader Header="@(titleInfo.CreateSingle())" />

@if (isLoading)
{
    <LoadingSvg />
}
else
{
    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <ContentTile>
        <Body>
            <CascadingValue Value="@user" >
                <ActionButtonMenu>
                    <button type="submit" class="form-control button" form="@_formGuid">
                        @Strings.Caption_Button_Save
                    </button>
                    <button type="button" class="form-control button"
                            @onclick="FormCancelClickHandler"
                    @onclick:preventDefault>
                        @Strings.Caption_Button_Cancel
                    </button>
                </ActionButtonMenu>
                <EditForm class="model-editor" id="@_formGuid" Model="@user"
                          OnValidSubmit="ValidFormSubmitHandler">
                    <DataAnnotationsValidator />
                    <ModelForm TModelDto="InputModel">
                        <ModelFormEntry ForMember="@(() => user.UserName)">
                            <InputText 
                                @bind-Value=user.UserName 
                                DisplayName=@(NameFor(x => x.UserName!))
                                class="form-control" />
                        </ModelFormEntry>
                        <ModelFormEntry ForMember="@(() => user.Email)">
                            <InputText 
                                @bind-Value=user.Email 
                                DisplayName=@(NameFor(x => x.Email!))
                                class="form-control" />
                        </ModelFormEntry>
                        <ModelFormEntry ForMember="@(() => user.Password)">
                            <InputText 
                                type="password"
                                @bind-Value=user.Password 
                                DisplayName=@(NameFor(x => x.Password))
                                class="form-control" />
                        </ModelFormEntry>
                        <ModelFormEntry ForMember="@(() => user.ConfirmPassword)">
                            <InputText 
                                type="password"
                                @bind-Value=user.ConfirmPassword 
                                DisplayName=@(NameFor(x => x.ConfirmPassword))
                                class="form-control" />
                        </ModelFormEntry>
                    </ModelForm>
                </EditForm>
            </CascadingValue>
        </Body>
    </ContentTile>
    <ContentTile>
        <TitleAlignLeft>
            <div>
                @(NameFor(x => x.Roles))
            </div>
            <button id="add-new-entry-button"
                    class="form-control button icon"
                    type="button"
                    @onclick="() => user.Roles.Add(new(){ Name = string.Empty })">
                <IonIcon Name="add" />
            </button>
        </TitleAlignLeft>
        <Body>
            <DataGrid Data="@user.Roles" TModel="ApplicationRole">
                <DataGridColumn Type="DataGridCellType.Button">
                    <CellEditTemplate Context="role">
                        <ToolTip Text="@Strings.Caption_Button_Delete">
                            <button class="form-control button icon" type="button"
                                    @onclick="() => user.Roles.Remove(role)">
                                <IonIcon Name="close-circle" />
                            </button>
                        </ToolTip>
                    </CellEditTemplate>
                </DataGridColumn>
                <DataGridColumn Type="DataGridCellType.Control"
                                Property="@nameof(ApplicationRole.Name)"
                                Caption="@(ModelMetadata.NameFor<ApplicationRole>(x => x.Name))">
                    <CellEditTemplate Context="role">
                        <InputSelect class="form-control" @bind-Value="@role.Name">
                            <option value="" disabled selected>@Strings.Caption_InputSelect_Prompt</option>
                            @foreach (var role in roles ?? [])
                            {
                                <option value="@role.Name">@role.Name</option>
                            })
                        </InputSelect>
                    </CellEditTemplate>
                </DataGridColumn>
            </DataGrid>
        </Body>
    </ContentTile>
}

@code {
    private InputModel user = default!;

    private IEnumerable<ApplicationRole>? roles;

    private bool isLoading = true;

    private IPageTitle titleInfo = IPageTitle.GetTitleFor<ApplicationUser>();

    private Guid _formGuid = new Guid();

    private readonly string _userIndexUrl = "/access/users";

    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // If the user manager does not support user email, throw an exception before loading
        // the page.
        if (!UserManager.SupportsUserEmail)
            throw new NotSupportedException("The default UI requires a user store with email support.");

        user = new();
        roles = await RoleManager.Roles.ToListAsync();

        isLoading = user is null || roles is null;
    }

    private string NameFor(Expression<Func<InputModel, object>> expression) =>
        ModelMetadata.NameFor(expression);

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var appUser = (ApplicationUser)user;
        using(var scope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            try
            {
                // var setResult = UserStore
                //     .SetUserNameAsync(appUser, appUser.UserName, CancellationToken.None);
                // await setResult;

                var emailStore = (IUserEmailStore<ApplicationUser>)UserStore;
                await emailStore.SetEmailAsync(appUser, appUser.Email, CancellationToken.None);

                var result = await UserManager.CreateAsync(appUser, user.Password);

                if (!result.Succeeded)
                {
                    ErrorMessage = string.Join("\n", result.Errors!.Select(x => x.Description));
                    return;
                }
                else
                {
                    ErrorMessage = null;
                }

                var logUser = new { Id = appUser.Id };

                Logger.LogInformation("{User} created a new account with password.", logUser);

                IEnumerable<string> roles = (appUser.Roles
                    .Where(x => !string.IsNullOrEmpty(x.Name))
                    .Select(x => x.Name) ?? [])!;

                if(roles.Count() > 0)
                {
                    var addRolesTask = await UserManager.AddToRolesAsync(appUser, roles ?? []);
                    if (!addRolesTask.Succeeded)
                    {
                        ErrorMessage = string.Join("\n", result.Errors!.Select(x => x.Description));
                        return;
                    }
                    else
                    {
                        ErrorMessage = null;
                    }
                }

                Logger.LogInformation("{User} assgined to roles: {Roles}", logUser, roles);

            }
            catch (TransactionAbortedException ex)
            {
                scope?.Dispose();
                ErrorMessage = ex.Message;
                return;
            }
        }
        
        NavigationManager.NavigateTo($"{_userIndexUrl}/{user.Id}");
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationManager.NavigateTo(_userIndexUrl);

    internal sealed class InputModel : ApplicationUser
    {
        [Required]
        [Display(
            Name = nameof(ApplicationUser_SR.UserName_Name),
            Description = nameof(ApplicationUser_SR.UserName_Description),
            ResourceType = typeof(ApplicationUser_SR))]
        public override string? UserName { get; set; } = string.Empty;

        [Required]
        [StringLength(
            64,
            ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", 
            MinimumLength = 16)]
        [DataType(DataType.Password)]
        [Display(
            Name = nameof(ApplicationUser_SR.Password_Name),
            Description = nameof(ApplicationUser_SR.Password_Description),
            ResourceType = typeof(ApplicationUser_SR))]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Compare(nameof(Password), ErrorMessage = "The password and confirmation password do not match.")]
        [Display(
            Name = nameof(ApplicationUser_SR.ConfirmPassword_Name),
            Description = nameof(ApplicationUser_SR.ConfirmPassword_Description),
            ResourceType = typeof(ApplicationUser_SR))]
        public string ConfirmPassword { get; set; } = string.Empty;

        [EmailAddress]
        [Display(
            Name = nameof(ApplicationUser_SR.Email_Name),
            Description = nameof(ApplicationUser_SR.Email_Description),
            ResourceType = typeof(ApplicationUser_SR))]
        public override string? Email { get; set; }
    }
}