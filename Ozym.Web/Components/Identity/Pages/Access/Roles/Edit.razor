@page "/access/roles/{Id:guid}/edit"

@using Microsoft.EntityFrameworkCore

@inherits ModelPage<ApplicationRole>

@inject RoleManager<ApplicationRole> RoleManager

@if (isLoading)
{
    <LoadingSvg />
}
else
{
    <PageTitle>
        @(titleInfo.UpdateSingle(heading: role!.Name).AsPageTitle())
    </PageTitle>

    <ModelPageHeader Header="@(titleInfo.UpdateSingle(heading: role!.Name))" />

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <ContentTile>
        <Body>
            <CascadingValue Value="@role">
                <ActionButtonMenu>
                    <button type="submit" class="form-control button" form="@_formGuid">
                        @Strings.Caption_Button_Save
                    </button>
                    <button type="button" class="form-control button"
                            @onclick="FormDeleteClickHandler"
                    @onclick:preventDefault>
                        @Strings.Caption_Button_Delete
                    </button>
                    <button type="button" class="form-control button"
                            @onclick="FormCancelClickHandler"
                    @onclick:preventDefault>
                        @Strings.Caption_Button_Cancel
                    </button>
                </ActionButtonMenu>
                <EditForm class="model-editor" id="@_formGuid" Model="@role"
                          OnValidSubmit="ValidFormSubmitHandler">
                    <DataAnnotationsValidator />
                    <ApplicationRoleCRUD Disabled="false" ReadOnly="false" />
                </EditForm>
            </CascadingValue>
        </Body>
    </ContentTile>
}
@code {
    [Parameter]
    public Guid Id { get; set; }

    private ApplicationRole? role;

    private bool isLoading = true;

    private IPageTitle titleInfo = IPageTitle.GetTitleFor<ApplicationRole>();

    private MenuRoot navMenu = default!;

    private Guid _formGuid = new Guid();

    protected override string IndexUriRelativePath => "/access/roles";

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            role = await RoleManager.Roles.FirstAsync(u => u.Id == Id.ToString());

            string editCaption = Strings.Caption_EditSingle.Format(ModelNoun?.GetSingular());
            string indexCaption = Strings.Caption_NavigateBackTo.Format(ModelNoun?.GetPlural());

            navMenu = new()
                {
                    IconKey = "reorder-four",
                    Children = new()
                {
                    // Add return to index button.
                    new MenuItem()
                    {
                        IconKey = "caret-back-circle",
                        Caption = indexCaption,
                        UriRelativePath = $"{IndexUriRelativePath}"
                    },
                    // Add edit button.
                    new MenuItem()
                    {
                        IconKey = "pencil",
                        Caption = editCaption,
                        UriRelativePath = FormatEditUri(GetKeyValueOrDefault<string>(role))
                    }
                }
                };
        }
        finally
        {
            isLoading = role is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task FormDeleteClickHandler(MouseEventArgs args)
    {
        var result = RoleManager.DeleteAsync(role!);

        await result;

        if (result.IsCompletedSuccessfully)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
        else if (result.IsFaulted)
            ErrorMessage = result.Exception?.Message;
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var result = RoleManager.UpdateAsync(role!);

        await result;

        if (result.IsCompletedSuccessfully)
            NavigationHelper.NavigateTo(FormatDetailUri(role!.Id));
        else if (result.IsFaulted)
            ErrorMessage = result.Exception?.Message;
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(role!.Id));
}