@rendermode InteractiveServer

<div class="ni-dashboard-tile">
    <div class="future-value-calculator">
        <EditForm Model="_inputModel" OnSubmit="Calculate" id="@_formGuid">
            <DataAnnotationsValidator />
            <ModelForm TModelDto="FutureValueInput">
                <ModelFormEntry ForMember="@(() => _inputModel.StartDate)">
                    <InputDate class="form-control"
                        DisplayName="@(GetName<FutureValueInput>(x => x.StartDate))"
                        @bind-Value="_inputModel.StartDate" />
                </ModelFormEntry>
                <ModelFormEntry ForMember="@(() => _inputModel.Periods)">
                    <InputNumber class="form-control"
                        DisplayName="@(GetName<FutureValueInput>(x => x.Periods))"
                        @bind-Value="_inputModel.Periods" />
                </ModelFormEntry>
                <ModelFormEntry ForMember="@(() => _inputModel.PresentValue)">
                    <InputNumber class="form-control"
                        DisplayName="@(GetName<FutureValueInput>(x => x.PresentValue))"
                        @bind-Value="_inputModel.PresentValue" />
                </ModelFormEntry>
                <ModelFormEntry ForMember="@(() => _inputModel.GrowthRate)">
                    <InputNumber class="form-control"
                        DisplayName="@(GetName<FutureValueInput>(x => x.GrowthRate))"
                        @bind-Value="_inputModel.GrowthRate" />
                </ModelFormEntry>
                <ModelFormEntry ForMember="@(() => _inputModel.RegularDeposit)">
                    <InputNumber class="form-control"
                        DisplayName="@(GetName<FutureValueInput>(x => x.RegularDeposit))"
                        @bind-Value="_inputModel.RegularDeposit" />
                </ModelFormEntry>
            </ModelForm>
        </EditForm>
        <ActionButtonMenu>
            <button type="submit" class="form-control button" form="@_formGuid">
                @Strings.Caption_Button_Calculate
            </button>
        </ActionButtonMenu>
    </div>
    <div class="radzen-chart"> 
        <RadzenChart>
            <RadzenAreaSeries 
                Smooth="@smooth" Data="@Data" CategoryProperty="@nameof(FutureValueResult.PeriodDate)" 
                Title="@(GetName<FutureValueResult>(x => x.Balance))" 
                ValueProperty="@nameof(FutureValueResult.Balance)" RenderingOrder="1">
                <ChildContent>
                    <RadzenMarkers MarkerType="MarkerType.Diamond" StrokeWidth="@markerStrokeWidth" Size="@markerSize" />
                </ChildContent>
                <TooltipTemplate Context="data">
                    @($"{GetName<FutureValueResult>(x => x.Balance)}: {data.Balance:C0}")
                </TooltipTemplate>
            </RadzenAreaSeries>

            <RadzenAreaSeries 
                Smooth="@smooth" Data="@Data" CategoryProperty="@nameof(FutureValueResult.PeriodDate)" 
                Title="@(GetName<FutureValueResult>(x => x.Principal))"
                LineType="LineType.Dashed"
                ValueProperty="@nameof(FutureValueResult.Principal)" RenderingOrder="2">
                <ChildContent>
                    <RadzenMarkers MarkerType="MarkerType.Diamond" StrokeWidth="@markerStrokeWidth" Size="@markerSize" />
                </ChildContent>
                <TooltipTemplate Context="data">
                    @($"{GetName<FutureValueResult>(x => x.Principal)}: {data.Principal:C0}")
                </TooltipTemplate>
            </RadzenAreaSeries>
            <RadzenAreaSeries 
                Smooth="@smooth" Data="@Data" CategoryProperty="@nameof(FutureValueResult.PeriodDate)" 
                Title="@(GetName<FutureValueResult>(x => x.Interest))" 
                LineType="LineType.Dashed"
                ValueProperty="@nameof(FutureValueResult.Interest)" RenderingOrder="3">
                <ChildContent>
                    <RadzenMarkers MarkerType="MarkerType.Diamond" StrokeWidth="@markerStrokeWidth" Size="@markerSize" />
                </ChildContent>
                <TooltipTemplate Context="data">
                    @($"{GetName<FutureValueResult>(x => x.Interest)}: {data.Interest:C0}")
                </TooltipTemplate>
            </RadzenAreaSeries>
            <RadzenCategoryAxis Padding="20" Formatter="@FormatAsYear" />
            <RadzenValueAxis Formatter="@FormatAsUSD">
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="@(GetName<FutureValueResult>(x => x.Balance))" />
            </RadzenValueAxis>
        </RadzenChart>
    </div>
</div>
@code {
    [Inject]
    IModelMetadataService Metadata { get; init; }

    [Inject] IFinancialCalculator Calculator { get; init; }

    bool smooth = true;
    short markerSize = 3;
    short markerStrokeWidth = 1;
    Guid _formGuid = Guid.NewGuid();
    private EditContext _inputContext;
    private FutureValueInput _inputModel;

    private IEnumerable<FutureValueResult> Data { get; set; }

    protected override void OnInitialized()
    {
        _inputModel = new();
        _inputContext = new(_inputModel);
    }

    private void Calculate()
    {
        var isValid = _inputContext.Validate();
        Data = Calculator.FutureValue(
            startDate: _inputModel.StartDate,
            periods: _inputModel.Periods,
            presentValue: _inputModel.PresentValue,
            growthRate: _inputModel.GrowthRate,
            regularDeposit: _inputModel.RegularDeposit,
            periodType: _inputModel.PeriodType);
    }

    private string GetName<T>(Expression<Func<T, object>> selector)
    where T : class
        => Metadata.NameFor<T>(selector);

    private string GetDescription<T>(Expression<Func<T, object>> selector)
        where T : class
        => Metadata.DescriptionFor<T>(selector);

    string FormatAsUSD(object value) => ((double)value).ToString("C0");

    string FormatAsYear(object value) =>
        value is null ? string.Empty : Convert.ToDateTime(value).ToString("yyyy");
}
