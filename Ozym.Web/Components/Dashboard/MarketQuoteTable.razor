@inherits ModelComponent<Quote>
@implements IDisposable

<div class="ni-dashboard-tile">
    @if(Quotes is null)
    {
        <LoadingSvg />
    }
    else
    {
        <DataGrid Data="Quotes">
            <DataGridColumn 
                Type="DataGridCellType.Text"
                Property="@nameof(Quote.Symbol)" Caption="@NameFor(x => x.Symbol)">
                <CellTemplate Context="model">
                        @model.Symbol
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Text"
                Property="@nameof(Quote.Description)" Caption="@NameFor(x => x.Description)">
                <CellTemplate Context="model">
                        @model.Description
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Text"
                Property="@nameof(Quote.LastPrice)" Caption="@NameFor(x => x.LastPrice)">
                <CellTemplate Context="model">
                        @model.LastPrice.ToString("C2")
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Text"
                Property="@nameof(Quote.Change)" Caption="@NameFor(x => x.Change)">
                <CellTemplate Context="model">
                    <div class="@(CssClassModifiers(model.Change))">
                        @model.Change.ToString("C2")
                    </div>
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Text"
                Property="@nameof(Quote.PercentChange)" Caption="@NameFor(x => x.PercentChange)">
                <CellTemplate Context="model">
                    <div class="@(CssClassModifiers(model.Change))">
                        @model.PercentChange.ToString("P2")
                    </div>
                </CellTemplate>
            </DataGridColumn>
        </DataGrid>
    }
</div>

@code {
    [Inject]
    public IWatchlist Watchlist { get; init; } = default!;

    private IEnumerable<Quote> Quotes { get; set; } = [];

    private Timer _timer = default!;
    private int _interval = 5000;
    private int _delay = 0;

    protected override void OnInitialized()
    {
        Quotes = Watchlist.GetQuotes();

        _timer = new(callback: TimerCallbackAsync, null, _delay, _interval);
    }

    private async void TimerCallbackAsync(object? state)
    {
        await InvokeAsync(() => UpdateQuotes(state));
    }

    private void UpdateQuotes(object? state = null)
    {
        Quotes = Watchlist.UpdateQuotes(Quotes.ToList());

        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private string CssClassModifiers(double delta) => 
        delta > 0 ? "positive" : delta < 0 ? "negative" : string.Empty;
}