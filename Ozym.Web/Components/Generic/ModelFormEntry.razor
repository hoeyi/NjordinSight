@typeparam TModelDto where TModelDto : class

@inherits LocalizableComponent

@if(!string.IsNullOrEmpty(LabelText))
{
    <tr class="grid-container model-property-input">
        <td class="label">
            @if(!string.IsNullOrEmpty(ToolTipText))
            {
                <ToolTip Text="@ToolTipText">
                    @LabelText
                </ToolTip>
            }
            else
            {
                @LabelText
            }
        </td>
        <td class="value">
            @ChildContent
            @if(!SuppressValidation)
            {
                <ValidationMessage For="@ForMember" />
            }
        </td>
    </tr>
}

@code {
    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter, EditorRequired]
    public Expression<Func<object>> ForMember { get; set; } = default!;

    [Parameter]
    public string LabelOverride { get; set; } = string.Empty;

    [Parameter]
    public bool SuppressValidation { get; set; }

    private string ToolTipText { get; set; } = string.Empty;

    private string LabelText { get; set; } = string.Empty;

    private Expression<Func<TModelDto, object>> TypedAccessor { get; set; } = default!;

    protected override void OnInitialized()
    {
        if (ForMember is null)
            throw new ArgumentNullException(paramName: nameof(ForMember));

        // Convert the ForMember parameter into a typed accessor for compatability with the
        // IModelMetadataService methods.
        TypedAccessor = ExpressionConverter.ConvertAccessor<TModelDto, object>(ForMember);

        LabelText = string.IsNullOrEmpty(LabelOverride) ?
            ModelMetadata.NameFor<TModelDto>(TypedAccessor) : LabelOverride;

        ToolTipText = ModelMetadata.DescriptionFor(TypedAccessor);
    }


}
