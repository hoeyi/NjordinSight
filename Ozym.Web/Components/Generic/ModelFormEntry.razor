@typeparam TModelDto where TModelDto : class

@inherits LocalizableComponent

@if(ParentForm is not null)
{
    <div class="@GetCssClass()">
        <div class="label">
            @if(!string.IsNullOrEmpty(ToolTipText))
            {
                <ToolTip Text="@ToolTipText">
                    @LabelText
                </ToolTip>
            }
            else
            {
                @LabelText
            }
        </div>
        <div class="value">
            @ChildContent
            @if(!SuppressValidation)
            {
                <ValidationMessage For="@ForMember" />
            }
        </div>
        @if(ModifierContent is not null)
        {
            <div class="modifier">
                @ModifierContent
            </div>
        }
    </div>
}

@code {
    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; } = default!;

    [Parameter, EditorRequired]
    public Expression<Func<object>> ForMember { get; set; } = default!;

    [Parameter]
    public RenderFragment? ModifierContent { get; set; }

    [Parameter]
    public string LabelOverride { get; set; } = string.Empty;

    [Parameter]
    public bool SuppressValidation { get; set; }

    [CascadingParameter, EditorRequired]
    public ModelForm<TModelDto>? ParentForm { get; set; }

    private string ToolTipText { get; set; } = string.Empty;

    private string LabelText { get; set; } = string.Empty;

    private Expression<Func<TModelDto, object>> TypedAccessor { get; set; } = default!;

    protected override void OnInitialized()
    {
        ArgumentNullException.ThrowIfNull(ForMember);
        ArgumentNullException.ThrowIfNull(ParentForm);

        // Convert the ForMember parameter into a typed accessor for compatability with the
        // IModelMetadataService methods.
        TypedAccessor = ExpressionConverter.ConvertAccessor<TModelDto, object>(ForMember);

        LabelText = string.IsNullOrEmpty(LabelOverride) ?
            ModelMetadata.NameFor<TModelDto>(TypedAccessor) : LabelOverride;

        ToolTipText = ModelMetadata.DescriptionFor(TypedAccessor);
    }

    private string GetCssClass()
    {
        var sb = new System.Text.StringBuilder();

        var gridFormat = string.Empty;

        gridFormat = ParentForm!.WithFormEntryModifiers ? "col-3" : "col-2";
        
        sb.AppendJoin(
            " ",
            "form-entry",
            "grid-container",
            "model-property-input",
            gridFormat
        );

        return sb.ToString().Trim();
    }
}
