// <auto-generated />
using System;
using NjordFinance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace NjordFinance.Migrations
{
    [DbContext(typeof(EulerDbContext))]
    partial class EulerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("seqAuditEventID", "EulerApp")
                .HasMin(1L);

            modelBuilder.Entity("NjordFinance.Model.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int?>("AccountCustodianId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCustodianID");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<DateTime?>("BooksClosedDate")
                        .HasColumnType("date");

                    b.Property<bool>("HasBankTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBrokerTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWallet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplianceTradable")
                        .HasColumnType("bit");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountCustodianId");

                    b.ToTable("Account", "EulerApp");

                    b.HasData(
                        new
                        {
                            AccountId = -101,
                            AccountCustodianId = -102,
                            HasBankTransaction = false,
                            HasBrokerTransaction = true,
                            HasWallet = false,
                            IsComplianceTradable = true
                        },
                        new
                        {
                            AccountId = -100,
                            HasBankTransaction = true,
                            HasBrokerTransaction = false,
                            HasWallet = false,
                            IsComplianceTradable = false
                        },
                        new
                        {
                            AccountId = -102,
                            AccountCustodianId = -102,
                            HasBankTransaction = false,
                            HasBrokerTransaction = true,
                            HasWallet = true,
                            IsComplianceTradable = true
                        });
                });

            modelBuilder.Entity("NjordFinance.Model.AccountAttributeMemberEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"), 1L, 1);

                    b.Property<int>("AccountObjectId")
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID");

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("EntryId");

                    b.HasIndex("AccountObjectId");

                    b.HasIndex("AttributeMemberId");

                    b.HasIndex(new[] { "EffectiveDate", "AccountObjectId", "AttributeMemberId" }, "UNI_AccountAttributeMemberEntry_RowDef")
                        .IsUnique();

                    b.ToTable("AccountAttributeMemberEntry", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.AccountComposite", b =>
                {
                    b.Property<int>("AccountCompositeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCompositeID");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.HasKey("AccountCompositeId");

                    b.ToTable("AccountComposite", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.AccountCompositeMember", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<int>("AccountCompositeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCompositeID");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("date");

                    b.HasKey("MemberId")
                        .HasName("PK_AccountCommpositeMember");

                    b.HasIndex("AccountCompositeId");

                    b.HasIndex("AccountId");

                    b.HasIndex(new[] { "EntryDate", "AccountId", "AccountCompositeId" }, "UNI_AccountCompositeMember_RowDef");

                    b.ToTable("AccountCompositeMember", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.AccountCustodian", b =>
                {
                    b.Property<int>("AccountCustodianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountCustodianID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountCustodianId"), 1L, 1);

                    b.Property<string>("CustodianCode")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(72)
                        .IsUnicode(false)
                        .HasColumnType("varchar(72)");

                    b.HasKey("AccountCustodianId");

                    b.HasIndex(new[] { "CustodianCode" }, "UNI_AccountCustodian_CustodianCode")
                        .IsUnique()
                        .HasFilter("[CustodianCode] IS NOT NULL");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_AccountCustodian_DisplayName")
                        .IsUnique()
                        .HasFilter("[DisplayName] IS NOT NULL");

                    b.ToTable("AccountCustodian", "EulerApp");

                    b.HasData(
                        new
                        {
                            AccountCustodianId = -100,
                            CustodianCode = "SOMEWHERE",
                            DisplayName = "SomeWhere Bank LLC"
                        },
                        new
                        {
                            AccountCustodianId = -101,
                            CustodianCode = "SOMENAME",
                            DisplayName = "Some Name Securities Broker"
                        },
                        new
                        {
                            AccountCustodianId = -102,
                            CustodianCode = "CRYPTO",
                            DisplayName = "Cryptopotamus Coin Exchange"
                        });
                });

            modelBuilder.Entity("NjordFinance.Model.AccountObject", b =>
                {
                    b.Property<int>("AccountObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountObjectId"), 1L, 1);

                    b.Property<string>("AccountObjectCode")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("date");

                    b.Property<string>("ObjectDescription")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ObjectDisplayName")
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("PrefixedObjectCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("varchar(17)")
                        .HasComputedColumnSql("(case when [ObjectType]='c' then concat('+',[AccountObjectCode]) else [AccountObjectCode] end)", false);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("AccountObjectId");

                    b.HasIndex(new[] { "AccountObjectCode" }, "UNI_AccountObject_AccountObjectCode")
                        .IsUnique()
                        .HasFilter("[AccountObjectCode] IS NOT NULL");

                    b.ToTable("AccountObject", "EulerApp");

                    b.HasData(
                        new
                        {
                            AccountObjectId = -100,
                            AccountObjectCode = "TESTBROKER",
                            ObjectDescription = "For testing functionality of broker acccount records.",
                            ObjectDisplayName = "Test Broker Account",
                            ObjectType = "a",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountObjectId = -101,
                            AccountObjectCode = "TESTBANK",
                            ObjectDescription = "For testing functionality of bank account records.",
                            ObjectDisplayName = "Test Bank Account",
                            ObjectType = "a",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AccountObjectId = -102,
                            AccountObjectCode = "TESTCRYPTO",
                            ObjectDescription = "For testing functionality of crypto broker account records.",
                            ObjectDisplayName = "Testt Crypto Account",
                            ObjectType = "a",
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("NjordFinance.Model.AccountWallet", b =>
                {
                    b.Property<int>("AccountWalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountWalletID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountWalletId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("AddressCode")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("AddressTag")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<int>("DenominationSecurityId")
                        .HasColumnType("int")
                        .HasColumnName("DenominationSecurityID");

                    b.HasKey("AccountWalletId");

                    b.HasIndex("AccountId");

                    b.HasIndex(new[] { "DenominationSecurityId", "AccountId" }, "UNI_AccountWallet_RowDef")
                        .IsUnique();

                    b.ToTable("AccountWallet", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.AuditEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    b.Property<int>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUserID");

                    b.Property<DateTime>("EventTimeUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("EventTimeUTC");

                    b.HasKey("EventId");

                    b.ToTable("AuditEvent", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.BankTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("Comment")
                        .HasMaxLength(72)
                        .IsUnicode(false)
                        .HasColumnType("varchar(72)");

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("TransactionVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionCodeId");

                    b.ToTable("BankTransaction", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.BankTransactionCode", b =>
                {
                    b.Property<int>("TransactionCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionCodeId"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.HasKey("TransactionCodeId")
                        .HasName("PK_BankTransactionSymbol");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_BankTransactionCode_DisplayName")
                        .IsUnique()
                        .HasFilter("[DisplayName] IS NOT NULL");

                    b.HasIndex(new[] { "TransactionCode" }, "UNI_BankTransactionCode_TransactionCode")
                        .IsUnique()
                        .HasFilter("[TransactionCode] IS NOT NULL");

                    b.ToTable("BankTransactionCode", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.BankTransactionCodeAttributeMemberEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"), 1L, 1);

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("EntryId");

                    b.HasIndex("AttributeMemberId");

                    b.HasIndex("TransactionCodeId");

                    b.HasIndex(new[] { "EffectiveDate", "TransactionCodeId", "AttributeMemberId" }, "UNI_BankTransactionCodeAttributeMemberEntry_RowDef")
                        .IsUnique();

                    b.ToTable("BankTransactionCodeAttributeMemberEntry", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.BrokerTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<DateTime?>("AcquisitionDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("DepSecurityId")
                        .HasColumnType("int")
                        .HasColumnName("DepSecurityID");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(9,4)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(19,6)");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    b.Property<DateTime?>("SettleDate")
                        .HasColumnType("date");

                    b.Property<int?>("TaxLotId")
                        .HasColumnType("int")
                        .HasColumnName("TaxLotID");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("date");

                    b.Property<int?>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    b.Property<decimal?>("Withholding")
                        .HasColumnType("decimal(9,4)");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("DepSecurityId");

                    b.HasIndex("SecurityId");

                    b.HasIndex("TaxLotId");

                    b.HasIndex("TransactionCodeId");

                    b.ToTable("BrokerTransaction", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.BrokerTransactionCode", b =>
                {
                    b.Property<int>("TransactionCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionCodeId"), 1L, 1);

                    b.Property<byte>("CashEffect")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ContributionWithdrawalEffect")
                        .HasColumnType("tinyint");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<byte>("QuantityEffect")
                        .HasColumnType("tinyint");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.HasKey("TransactionCodeId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_BrokerTransactionCode_DisplayName")
                        .IsUnique()
                        .HasFilter("[DisplayName] IS NOT NULL");

                    b.HasIndex(new[] { "TransactionCode" }, "UNI_BrokerTransactionCode_TransactionCode")
                        .IsUnique()
                        .HasFilter("[TransactionCode] IS NOT NULL");

                    b.ToTable("BrokerTransactionCode", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.BrokerTransactionCodeAttributeMemberEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"), 1L, 1);

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("EntryId")
                        .HasName("PK_BrokerTransactionAttributeMemberEntry");

                    b.HasIndex("AttributeMemberId");

                    b.HasIndex("TransactionCodeId");

                    b.HasIndex(new[] { "EffectiveDate", "TransactionCodeId", "AttributeMemberId" }, "UNI_BrokerTransactionCodeAttributeMemberEntry_RowDef")
                        .IsUnique();

                    b.ToTable("BrokerTransactionCodeAttributeMemberEntry", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IsoCode3")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.HasKey("CountryId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_Country_DisplayName")
                        .IsUnique()
                        .HasFilter("[DisplayName] IS NOT NULL");

                    b.HasIndex(new[] { "IsoCode3" }, "UNI_Country_IsoCode3")
                        .IsUnique()
                        .HasFilter("[IsoCode3] IS NOT NULL");

                    b.ToTable("Country", "EulerApp");

                    b.HasData(
                        new
                        {
                            CountryId = -100,
                            DisplayName = "United States of America",
                            IsoCode3 = "USA"
                        },
                        new
                        {
                            CountryId = -200,
                            DisplayName = "Germany",
                            IsoCode3 = "DEU"
                        },
                        new
                        {
                            CountryId = -300,
                            DisplayName = "Canada",
                            IsoCode3 = "CAN"
                        },
                        new
                        {
                            CountryId = -400,
                            DisplayName = "Japan",
                            IsoCode3 = "JPN"
                        });
                });

            modelBuilder.Entity("NjordFinance.Model.CountryAttributeMemberEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"), 1L, 1);

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("EntryId");

                    b.HasIndex("CountryId");

                    b.HasIndex(new[] { "AttributeMemberId", "CountryId", "EffectiveDate" }, "UNI_CountryAttributeMemberEntry_RowDef")
                        .IsUnique();

                    b.ToTable("CountryAttributeMemberEntry", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.InvestmentPerformanceAttributeMemberEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"), 1L, 1);

                    b.Property<int>("AccountObjectId")
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID");

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    b.Property<decimal>("AverageCapital")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Gain")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Irr")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("IRR");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("NetContribution")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("EntryId");

                    b.HasIndex("AccountObjectId");

                    b.HasIndex("AttributeMemberId");

                    b.HasIndex(new[] { "FromDate", "AccountObjectId", "AttributeMemberId" }, "UNI_InvestmentPerformanceAttributeMemberEntry_RowDef")
                        .IsUnique();

                    b.ToTable("InvestmentPerformanceAttributeMemberEntry", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.InvestmentPerformanceEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"), 1L, 1);

                    b.Property<int>("AccountObjectId")
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID");

                    b.Property<decimal>("AverageCapital")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Gain")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Irr")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("IRR");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("NetContribution")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("EntryId");

                    b.HasIndex("AccountObjectId");

                    b.HasIndex(new[] { "FromDate", "AccountObjectId" }, "UNI_InvestmentPerformanceEntry_RowDef")
                        .IsUnique();

                    b.ToTable("InvestmentPerformanceEntry", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.InvestmentStrategy", b =>
                {
                    b.Property<int>("InvestmentStrategyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvestmentStrategyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestmentStrategyId"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.HasKey("InvestmentStrategyId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_InvestmentStrategy_DisplayName")
                        .IsUnique()
                        .HasFilter("[DisplayName] IS NOT NULL");

                    b.ToTable("InvestmentStrategy", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.InvestmentStrategyTarget", b =>
                {
                    b.Property<int>("InvestmentStrategyTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvestmentStrategyTargetID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestmentStrategyTargetId"), 1L, 1);

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<int>("InvestmentStrategyId")
                        .HasColumnType("int")
                        .HasColumnName("InvestmentStrategyID");

                    b.Property<byte>("TargetPercent")
                        .HasColumnType("tinyint");

                    b.HasKey("InvestmentStrategyTargetId");

                    b.HasIndex("AttributeMemberId");

                    b.HasIndex("InvestmentStrategyId");

                    b.HasIndex(new[] { "EffectiveDate", "AttributeMemberId", "InvestmentStrategyId" }, "UNI_InvestmentStrategyTarget_RowDef")
                        .IsUnique();

                    b.ToTable("InvestmentStrategyTarget", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.MarketHoliday", b =>
                {
                    b.Property<int>("MarketHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MarketHolidayID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarketHolidayId"), 1L, 1);

                    b.Property<string>("MarketHolidayName")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.HasKey("MarketHolidayId");

                    b.HasIndex(new[] { "MarketHolidayName" }, "UNI_MarketHoliday_MarketHolidayName")
                        .IsUnique()
                        .HasFilter("[MarketHolidayName] IS NOT NULL");

                    b.ToTable("MarketHoliday", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.MarketHolidaySchedule", b =>
                {
                    b.Property<int>("MarketHolidayEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MarketHolidayEntryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarketHolidayEntryId"), 1L, 1);

                    b.Property<int>("MarketHolidayId")
                        .HasColumnType("int")
                        .HasColumnName("MarketHolidayID");

                    b.Property<DateTime>("ObservanceDate")
                        .HasColumnType("date");

                    b.HasKey("MarketHolidayEntryId")
                        .HasName("PK_MarketHolidayScheduleEntry");

                    b.HasIndex("MarketHolidayId");

                    b.HasIndex(new[] { "ObservanceDate", "MarketHolidayId" }, "UNI_MarketHolidaySchedule_RowDef")
                        .IsUnique();

                    b.ToTable("MarketHolidaySchedule", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.MarketIndex", b =>
                {
                    b.Property<int>("IndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndexID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndexId"), 1L, 1);

                    b.Property<string>("IndexCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("IndexDescription")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("IndexId");

                    b.HasIndex(new[] { "IndexCode" }, "UNI_MarketIndex_IndexCode")
                        .IsUnique()
                        .HasFilter("[IndexCode] IS NOT NULL");

                    b.ToTable("MarketIndex", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.MarketIndexPrice", b =>
                {
                    b.Property<int>("IndexPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndexPriceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndexPriceId"), 1L, 1);

                    b.Property<int>("MarketIndexId")
                        .HasColumnType("int")
                        .HasColumnName("MarketIndexID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("PriceCode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("date");

                    b.HasKey("IndexPriceId");

                    b.HasIndex("MarketIndexId");

                    b.HasIndex(new[] { "PriceDate", "MarketIndexId", "PriceCode" }, "UNI_MarketIndexPrice_RowDef")
                        .IsUnique()
                        .HasFilter("[PriceCode] IS NOT NULL");

                    b.ToTable("MarketIndexPrice", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.ModelAttribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeID");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.HasKey("AttributeId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_ModelAttribute_DisplayName")
                        .IsUnique()
                        .HasFilter("[DisplayName] IS NOT NULL");

                    b.ToTable("ModelAttribute", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.ModelAttributeMember", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeID");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<short?>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.HasKey("AttributeMemberId");

                    b.HasIndex("AttributeId");

                    b.HasIndex(new[] { "DisplayName", "AttributeId" }, "UNI_ModelAttributeMember_RowDef")
                        .IsUnique()
                        .HasFilter("[DisplayName] IS NOT NULL");

                    b.ToTable("ModelAttributeMember", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.ModelAttributeScope", b =>
                {
                    b.Property<int>("AttributeScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttributeScopeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeScopeId"), 1L, 1);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeID");

                    b.Property<string>("ScopeCode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("AttributeScopeId");

                    b.HasIndex(new[] { "AttributeId", "ScopeCode" }, "UNI_ModelAttributeScope_AttributeID_ScopeCode")
                        .IsUnique()
                        .HasFilter("[ScopeCode] IS NOT NULL");

                    b.ToTable("ModelAttributeScope", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.ReportConfiguration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConfigurationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigurationId"), 1L, 1);

                    b.Property<string>("ConfigurationCode")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("ConfigurationDescription")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("XmlDefinition")
                        .HasColumnType("xml");

                    b.HasKey("ConfigurationId")
                        .HasName("PK_ReportSetting");

                    b.HasIndex(new[] { "ConfigurationCode" }, "UNI_ReportConfiguration_ConfigurationCode")
                        .IsUnique()
                        .HasFilter("[ConfigurationCode] IS NOT NULL");

                    b.ToTable("ReportConfiguration", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.ReportStyleSheet", b =>
                {
                    b.Property<int>("StyleSheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StyleSheetID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StyleSheetId"), 1L, 1);

                    b.Property<string>("StyleSheetCode")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("StyleSheetDescription")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("XmlDefinition")
                        .HasColumnType("xml");

                    b.HasKey("StyleSheetId");

                    b.HasIndex(new[] { "StyleSheetCode" }, "UNI_ReportStyleSheet_StyleSheetCode")
                        .IsUnique()
                        .HasFilter("[StyleSheetCode] IS NOT NULL");

                    b.ToTable("ReportStyleSheet", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.ResourceImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<string>("FileExtension")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<byte[]>("ImageBinary")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageDescription")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("ImageId");

                    b.ToTable("ResourceImage", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.Security", b =>
                {
                    b.Property<int>("SecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityId"), 1L, 1);

                    b.Property<bool>("HasPerpetualMarket")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPerpetualPrice")
                        .HasColumnType("bit");

                    b.Property<string>("Issuer")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("SecurityDescription")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<int?>("SecurityExchangeId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityExchangeID");

                    b.Property<int>("SecurityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeID");

                    b.HasKey("SecurityId");

                    b.HasIndex("SecurityExchangeId");

                    b.HasIndex("SecurityTypeId");

                    b.ToTable("Security", "EulerApp");

                    b.HasData(
                        new
                        {
                            SecurityId = -100,
                            HasPerpetualMarket = false,
                            HasPerpetualPrice = false,
                            SecurityDescription = "Microsoft Inc.",
                            SecurityExchangeId = -200,
                            SecurityTypeId = -100
                        },
                        new
                        {
                            SecurityId = -101,
                            HasPerpetualMarket = false,
                            HasPerpetualPrice = false,
                            SecurityDescription = "Apple Inc.",
                            SecurityExchangeId = -200,
                            SecurityTypeId = -100
                        },
                        new
                        {
                            SecurityId = -102,
                            HasPerpetualMarket = false,
                            HasPerpetualPrice = false,
                            SecurityDescription = "JP Morgan Chase Co.",
                            SecurityTypeId = -100
                        },
                        new
                        {
                            SecurityId = -103,
                            HasPerpetualMarket = true,
                            HasPerpetualPrice = false,
                            SecurityDescription = "Bitcoin",
                            SecurityTypeId = -500
                        },
                        new
                        {
                            SecurityId = -104,
                            HasPerpetualMarket = true,
                            HasPerpetualPrice = false,
                            SecurityDescription = "Litecoin",
                            SecurityTypeId = -500
                        },
                        new
                        {
                            SecurityId = -105,
                            HasPerpetualMarket = true,
                            HasPerpetualPrice = false,
                            SecurityDescription = "Ether",
                            SecurityTypeId = -500
                        });
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityAttributeMemberEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"), 1L, 1);

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("EntryId");

                    b.HasIndex("AttributeMemberId");

                    b.HasIndex("SecurityId");

                    b.HasIndex(new[] { "EffectiveDate", "SecurityId", "AttributeMemberId" }, "UNI_SecurityAttributeMemberEntry_RowDef")
                        .IsUnique();

                    b.ToTable("SecurityAttributeMemberEntry", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityExchange", b =>
                {
                    b.Property<int>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExchangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExchangeId"), 1L, 1);

                    b.Property<string>("ExchangeCode")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("ExchangeDescription")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ExchangeId");

                    b.HasIndex(new[] { "ExchangeCode" }, "UNI_SecurityExchange_ExchangeCode")
                        .IsUnique()
                        .HasFilter("[ExchangeCode] IS NOT NULL");

                    b.ToTable("SecurityExchange", "EulerApp");

                    b.HasData(
                        new
                        {
                            ExchangeId = -100,
                            ExchangeCode = "NYSE",
                            ExchangeDescription = "New York Stock Exchange"
                        },
                        new
                        {
                            ExchangeId = -200,
                            ExchangeCode = "NASDAQ",
                            ExchangeDescription = "Nasdaq Stock Market"
                        });
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityPrice", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PriceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"), 1L, 1);

                    b.Property<decimal>("PriceClose")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("PriceHigh")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal?>("PriceLow")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal?>("PriceOpen")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    b.Property<long?>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("PriceId");

                    b.HasIndex("SecurityId");

                    b.HasIndex(new[] { "PriceDate", "SecurityId" }, "UNI_SecurityPrice_RowDef")
                        .IsUnique();

                    b.ToTable("SecurityPrice", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.SecuritySymbol", b =>
                {
                    b.Property<int>("SymbolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SymbolID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymbolId"), 1L, 1);

                    b.Property<string>("Cusip")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<string>("CustomSymbol")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<string>("OptionTicker")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    b.Property<string>("SymbolCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasComputedColumnSql("(case when [SecuritySymbol].[SymbolTypeID]=(-10) then [SecuritySymbol].[Cusip] when [SecuritySymbol].[SymbolTypeID]=(-20) then [SecuritySymbol].[CustomSymbol] when [SecuritySymbol].[SymbolTypeID]=(-30) then [SecuritySymbol].[OptionTicker] when [SecuritySymbol].[SymbolTypeID]=(-40) then [SecuritySymbol].[Ticker]  end)", false);

                    b.Property<int>("SymbolTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SymbolTypeID");

                    b.Property<string>("Ticker")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.HasKey("SymbolId");

                    b.HasIndex("SymbolTypeId");

                    b.HasIndex(new[] { "SecurityId", "EffectiveDate" }, "UNI_SecuritySymbol_Column")
                        .IsUnique();

                    b.ToTable("SecuritySymbol", "EulerApp");

                    b.HasData(
                        new
                        {
                            SymbolId = -100,
                            EffectiveDate = new DateTime(2003, 4, 12, 16, 3, 18, 603, DateTimeKind.Local).AddTicks(88),
                            SecurityId = -100,
                            SymbolTypeId = -40,
                            Ticker = "MSFT"
                        },
                        new
                        {
                            SymbolId = -101,
                            EffectiveDate = new DateTime(2001, 6, 13, 16, 3, 18, 603, DateTimeKind.Local).AddTicks(129),
                            SecurityId = -101,
                            SymbolTypeId = -40,
                            Ticker = "AAPL"
                        },
                        new
                        {
                            SymbolId = -102,
                            EffectiveDate = new DateTime(2001, 11, 27, 16, 3, 18, 603, DateTimeKind.Local).AddTicks(134),
                            SecurityId = -102,
                            SymbolTypeId = -40,
                            Ticker = "JPM"
                        },
                        new
                        {
                            SymbolId = -103,
                            CustomSymbol = "BTC",
                            EffectiveDate = new DateTime(2013, 5, 17, 16, 3, 18, 603, DateTimeKind.Local).AddTicks(140),
                            SecurityId = -103,
                            SymbolTypeId = -20
                        },
                        new
                        {
                            SymbolId = -104,
                            CustomSymbol = "LTC",
                            EffectiveDate = new DateTime(2016, 3, 3, 16, 3, 18, 603, DateTimeKind.Local).AddTicks(148),
                            SecurityId = -104,
                            SymbolTypeId = -20
                        },
                        new
                        {
                            SymbolId = -105,
                            CustomSymbol = "ETH",
                            EffectiveDate = new DateTime(2013, 6, 7, 16, 3, 18, 603, DateTimeKind.Local).AddTicks(180),
                            SecurityId = -105,
                            SymbolTypeId = -20
                        });
                });

            modelBuilder.Entity("NjordFinance.Model.SecuritySymbolMap", b =>
                {
                    b.Property<int>("SymbolMapId")
                        .HasColumnType("int")
                        .HasColumnName("SymbolMapID");

                    b.Property<int>("AccountCustodianId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCustodianID");

                    b.Property<string>("CustodianSymbol")
                        .HasMaxLength(72)
                        .IsUnicode(false)
                        .HasColumnType("varchar(72)");

                    b.Property<int>("SecuritySymbolId")
                        .HasColumnType("int")
                        .HasColumnName("SecuritySymbolID");

                    b.HasKey("SymbolMapId");

                    b.HasIndex("AccountCustodianId");

                    b.HasIndex(new[] { "SecuritySymbolId", "AccountCustodianId" }, "UNI_SecuritySymbolMap_RowDef")
                        .IsUnique();

                    b.ToTable("SecuritySymbolMap", "EulerApp");
                });

            modelBuilder.Entity("NjordFinance.Model.SecuritySymbolType", b =>
                {
                    b.Property<int>("SymbolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SymbolTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymbolTypeId"), 1L, 1);

                    b.Property<string>("SymbolTypeName")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.HasKey("SymbolTypeId");

                    b.HasIndex(new[] { "SymbolTypeName" }, "UNI_SecuritySymbolType_TypeName")
                        .IsUnique()
                        .HasFilter("[SymbolTypeName] IS NOT NULL");

                    b.ToTable("SecuritySymbolType", "EulerApp");

                    b.HasData(
                        new
                        {
                            SymbolTypeId = -10,
                            SymbolTypeName = "CUSIP"
                        },
                        new
                        {
                            SymbolTypeId = -20,
                            SymbolTypeName = "Custom Identifer"
                        },
                        new
                        {
                            SymbolTypeId = -30,
                            SymbolTypeName = "Option Ticker"
                        },
                        new
                        {
                            SymbolTypeId = -40,
                            SymbolTypeName = "Ticker"
                        });
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityType", b =>
                {
                    b.Property<int>("SecurityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityTypeId"), 1L, 1);

                    b.Property<bool>("CanHaveDerivative")
                        .HasColumnType("bit");

                    b.Property<bool>("CanHavePosition")
                        .HasColumnType("bit");

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<int>("SecurityTypeGroupId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeGroupID");

                    b.Property<string>("SecurityTypeName")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<decimal>("ValuationFactor")
                        .HasColumnType("decimal(7,4)");

                    b.HasKey("SecurityTypeId");

                    b.HasIndex("SecurityTypeGroupId");

                    b.HasIndex(new[] { "SecurityTypeName" }, "UNI_SecurityType_SecurityTypeName")
                        .IsUnique()
                        .HasFilter("[SecurityTypeName] IS NOT NULL");

                    b.ToTable("SecurityType", "EulerApp");

                    b.HasData(
                        new
                        {
                            SecurityTypeId = -100,
                            CanHaveDerivative = true,
                            CanHavePosition = true,
                            DisplayOrder = (byte)0,
                            SecurityTypeGroupId = -100,
                            SecurityTypeName = "Common stock",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -200,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            DisplayOrder = (byte)1,
                            SecurityTypeGroupId = -200,
                            SecurityTypeName = "Call option",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -300,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            DisplayOrder = (byte)2,
                            SecurityTypeGroupId = -200,
                            SecurityTypeName = "Put option",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -400,
                            CanHaveDerivative = false,
                            CanHavePosition = false,
                            DisplayOrder = (byte)3,
                            SecurityTypeGroupId = -200,
                            SecurityTypeName = "Cash",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -500,
                            CanHaveDerivative = false,
                            CanHavePosition = false,
                            DisplayOrder = (byte)3,
                            SecurityTypeGroupId = -200,
                            SecurityTypeName = "Cryptocurrency",
                            ValuationFactor = 1m
                        });
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityTypeGroup", b =>
                {
                    b.Property<int>("SecurityTypeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityTypeGroupId"), 1L, 1);

                    b.Property<byte>("DisplayOrder")
                        .HasColumnType("tinyint");

                    b.Property<string>("SecurityTypeGroupName")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.HasKey("SecurityTypeGroupId");

                    b.HasIndex(new[] { "SecurityTypeGroupName" }, "UNI_SecurityTypeGroup_SecurityTypeGroupName")
                        .IsUnique()
                        .HasFilter("[SecurityTypeGroupName] IS NOT NULL");

                    b.ToTable("SecurityTypeGroup", "EulerApp");

                    b.HasData(
                        new
                        {
                            SecurityTypeGroupId = -100,
                            DisplayOrder = (byte)0,
                            SecurityTypeGroupName = "Individual Stock"
                        },
                        new
                        {
                            SecurityTypeGroupId = -200,
                            DisplayOrder = (byte)1,
                            SecurityTypeGroupName = "Option Contracts"
                        },
                        new
                        {
                            SecurityTypeGroupId = -300,
                            DisplayOrder = (byte)2,
                            SecurityTypeGroupName = "Digital Assets"
                        });
                });

            modelBuilder.Entity("NjordFinance.Model.Account", b =>
                {
                    b.HasOne("NjordFinance.Model.AccountCustodian", "AccountCustodian")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountCustodianId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Account_AccountCustodian");

                    b.HasOne("NjordFinance.Model.AccountObject", "AccountNavigation")
                        .WithOne("Account")
                        .HasForeignKey("NjordFinance.Model.Account", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_AccountObject");

                    b.Navigation("AccountCustodian");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("NjordFinance.Model.AccountAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordFinance.Model.AccountObject", "AccountObject")
                        .WithMany("AccountAttributeMemberEntries")
                        .HasForeignKey("AccountObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountAttributeMemberEntry_AccountObjectID");

                    b.HasOne("NjordFinance.Model.ModelAttributeMember", "AttributeMember")
                        .WithMany("AccountAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountAttributeMemberEntry_ModelAttributeMember");

                    b.Navigation("AccountObject");

                    b.Navigation("AttributeMember");
                });

            modelBuilder.Entity("NjordFinance.Model.AccountComposite", b =>
                {
                    b.HasOne("NjordFinance.Model.AccountObject", "AccountCompositeNavigation")
                        .WithOne("AccountComposite")
                        .HasForeignKey("NjordFinance.Model.AccountComposite", "AccountCompositeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountComposite_AccountObject");

                    b.Navigation("AccountCompositeNavigation");
                });

            modelBuilder.Entity("NjordFinance.Model.AccountCompositeMember", b =>
                {
                    b.HasOne("NjordFinance.Model.AccountComposite", "AccountComposite")
                        .WithMany("AccountCompositeMembers")
                        .HasForeignKey("AccountCompositeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountCommpositeMember_AccountComposite");

                    b.HasOne("NjordFinance.Model.Account", "Account")
                        .WithMany("AccountCompositeMembers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountCommpositeMember_Account");

                    b.Navigation("Account");

                    b.Navigation("AccountComposite");
                });

            modelBuilder.Entity("NjordFinance.Model.AccountWallet", b =>
                {
                    b.HasOne("NjordFinance.Model.Account", "Account")
                        .WithMany("AccountWallets")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountWallet_Account");

                    b.HasOne("NjordFinance.Model.Security", "DenominationSecurity")
                        .WithMany("AccountWallets")
                        .HasForeignKey("DenominationSecurityId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountWallet_Security");

                    b.Navigation("Account");

                    b.Navigation("DenominationSecurity");
                });

            modelBuilder.Entity("NjordFinance.Model.BankTransaction", b =>
                {
                    b.HasOne("NjordFinance.Model.Account", "Account")
                        .WithMany("BankTransactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_BankTransaction_Account");

                    b.HasOne("NjordFinance.Model.BankTransactionCode", "TransactionCode")
                        .WithMany("BankTransactions")
                        .HasForeignKey("TransactionCodeId")
                        .IsRequired()
                        .HasConstraintName("FK_BankTransaction_BankTransactionCode");

                    b.Navigation("Account");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordFinance.Model.BankTransactionCodeAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordFinance.Model.ModelAttributeMember", "AttributeMember")
                        .WithMany("BankTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankTransactionCodeAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordFinance.Model.BankTransactionCode", "TransactionCode")
                        .WithMany("BankTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("TransactionCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankTransactionCodeAttributeMemberEntry_BankTransactionCode");

                    b.Navigation("AttributeMember");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordFinance.Model.BrokerTransaction", b =>
                {
                    b.HasOne("NjordFinance.Model.Account", "Account")
                        .WithMany("BrokerTransactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_Account");

                    b.HasOne("NjordFinance.Model.Security", "DepSecurity")
                        .WithMany("BrokerTransactionDepSecurities")
                        .HasForeignKey("DepSecurityId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_DepSecurityID");

                    b.HasOne("NjordFinance.Model.Security", "Security")
                        .WithMany("BrokerTransactionSecurities")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_SecurityID");

                    b.HasOne("NjordFinance.Model.BrokerTransaction", "TaxLot")
                        .WithMany("InverseTaxLot")
                        .HasForeignKey("TaxLotId")
                        .HasConstraintName("FK_BrokerTransaction_BrokerTransaction");

                    b.HasOne("NjordFinance.Model.BrokerTransactionCode", "TransactionCode")
                        .WithMany("BrokerTransactions")
                        .HasForeignKey("TransactionCodeId")
                        .HasConstraintName("FK_BrokerTransaction_BrokerTransactionCode");

                    b.Navigation("Account");

                    b.Navigation("DepSecurity");

                    b.Navigation("Security");

                    b.Navigation("TaxLot");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordFinance.Model.BrokerTransactionCodeAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordFinance.Model.ModelAttributeMember", "AttributeMember")
                        .WithMany("BrokerTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransactionCodeAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordFinance.Model.BrokerTransactionCode", "TransactionCode")
                        .WithMany("BrokerTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("TransactionCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransactionCodeAttributeMemberEntry_BrokerTransactionCode");

                    b.Navigation("AttributeMember");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordFinance.Model.CountryAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordFinance.Model.ModelAttributeMember", "AttributeMember")
                        .WithMany("CountryAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CountryAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordFinance.Model.Country", "Country")
                        .WithMany("CountryAttributeMemberEntries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CountryAttributeMemberEntry_Country");

                    b.Navigation("AttributeMember");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NjordFinance.Model.InvestmentPerformanceAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordFinance.Model.AccountObject", "AccountObject")
                        .WithMany("InvestmentPerformanceAttributeMemberEntries")
                        .HasForeignKey("AccountObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentPerformanceAttributeMemberEntry_AccountObject");

                    b.HasOne("NjordFinance.Model.ModelAttributeMember", "AttributeMember")
                        .WithMany("InvestmentPerformanceAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentPerformanceAttributeMemberEntry_ModelAttributeMember");

                    b.Navigation("AccountObject");

                    b.Navigation("AttributeMember");
                });

            modelBuilder.Entity("NjordFinance.Model.InvestmentPerformanceEntry", b =>
                {
                    b.HasOne("NjordFinance.Model.AccountObject", "AccountObject")
                        .WithMany("InvestmentPerformanceEntries")
                        .HasForeignKey("AccountObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentPerformanceEntry_AccountObject");

                    b.Navigation("AccountObject");
                });

            modelBuilder.Entity("NjordFinance.Model.InvestmentStrategyTarget", b =>
                {
                    b.HasOne("NjordFinance.Model.ModelAttributeMember", "AttributeMember")
                        .WithMany("InvestmentStrategyTargets")
                        .HasForeignKey("AttributeMemberId")
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentStrategyTarget_ModelAttributeMember");

                    b.HasOne("NjordFinance.Model.InvestmentStrategy", "InvestmentStrategy")
                        .WithMany("InvestmentStrategyTargets")
                        .HasForeignKey("InvestmentStrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentStrategyTarget_InvestmentStrategy");

                    b.Navigation("AttributeMember");

                    b.Navigation("InvestmentStrategy");
                });

            modelBuilder.Entity("NjordFinance.Model.MarketHolidaySchedule", b =>
                {
                    b.HasOne("NjordFinance.Model.MarketHoliday", "MarketHoliday")
                        .WithMany("MarketHolidaySchedules")
                        .HasForeignKey("MarketHolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MarketHolidayScheduleMarketHoliday");

                    b.Navigation("MarketHoliday");
                });

            modelBuilder.Entity("NjordFinance.Model.MarketIndexPrice", b =>
                {
                    b.HasOne("NjordFinance.Model.MarketIndex", "MarketIndex")
                        .WithMany("MarketIndexPrices")
                        .HasForeignKey("MarketIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MarketIndexPrice_MarketIndex");

                    b.Navigation("MarketIndex");
                });

            modelBuilder.Entity("NjordFinance.Model.ModelAttributeMember", b =>
                {
                    b.HasOne("NjordFinance.Model.ModelAttribute", "Attribute")
                        .WithMany("ModelAttributeMembers")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModelAttributeMember_ModelAttribute");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("NjordFinance.Model.ModelAttributeScope", b =>
                {
                    b.HasOne("NjordFinance.Model.ModelAttribute", "Attribute")
                        .WithMany("ModelAttributeScopes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModelAttributeScope_ModelAttribute");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("NjordFinance.Model.Security", b =>
                {
                    b.HasOne("NjordFinance.Model.SecurityExchange", "SecurityExchange")
                        .WithMany("Securities")
                        .HasForeignKey("SecurityExchangeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Security_SecurityExchange");

                    b.HasOne("NjordFinance.Model.SecurityType", "SecurityType")
                        .WithMany("Securities")
                        .HasForeignKey("SecurityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Security_SecurityType");

                    b.Navigation("SecurityExchange");

                    b.Navigation("SecurityType");
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordFinance.Model.ModelAttributeMember", "AttributeMember")
                        .WithMany("SecurityAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecurityAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordFinance.Model.Security", "Security")
                        .WithMany("SecurityAttributeMemberEntries")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecurityAttributeMemberEntry_Security");

                    b.Navigation("AttributeMember");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityPrice", b =>
                {
                    b.HasOne("NjordFinance.Model.Security", "Security")
                        .WithMany("SecurityPrices")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecurityPrice_Security");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("NjordFinance.Model.SecuritySymbol", b =>
                {
                    b.HasOne("NjordFinance.Model.Security", "Security")
                        .WithMany("SecuritySymbols")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbol_Security");

                    b.HasOne("NjordFinance.Model.SecuritySymbolType", "SymbolType")
                        .WithMany("SecuritySymbols")
                        .HasForeignKey("SymbolTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbol_SecuritySymbolType");

                    b.Navigation("Security");

                    b.Navigation("SymbolType");
                });

            modelBuilder.Entity("NjordFinance.Model.SecuritySymbolMap", b =>
                {
                    b.HasOne("NjordFinance.Model.AccountCustodian", "AccountCustodian")
                        .WithMany("SecuritySymbolMaps")
                        .HasForeignKey("AccountCustodianId")
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbolMap_AccountCustodian");

                    b.HasOne("NjordFinance.Model.SecuritySymbol", "SecuritySymbol")
                        .WithMany("SecuritySymbolMaps")
                        .HasForeignKey("SecuritySymbolId")
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbolMap_SecuritySymbol");

                    b.Navigation("AccountCustodian");

                    b.Navigation("SecuritySymbol");
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityType", b =>
                {
                    b.HasOne("NjordFinance.Model.SecurityTypeGroup", "SecurityTypeGroup")
                        .WithMany("SecurityTypes")
                        .HasForeignKey("SecurityTypeGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_SecurityType_SecurityTypeGroup");

                    b.Navigation("SecurityTypeGroup");
                });

            modelBuilder.Entity("NjordFinance.Model.Account", b =>
                {
                    b.Navigation("AccountCompositeMembers");

                    b.Navigation("AccountWallets");

                    b.Navigation("BankTransactions");

                    b.Navigation("BrokerTransactions");
                });

            modelBuilder.Entity("NjordFinance.Model.AccountComposite", b =>
                {
                    b.Navigation("AccountCompositeMembers");
                });

            modelBuilder.Entity("NjordFinance.Model.AccountCustodian", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("SecuritySymbolMaps");
                });

            modelBuilder.Entity("NjordFinance.Model.AccountObject", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("AccountAttributeMemberEntries");

                    b.Navigation("AccountComposite");

                    b.Navigation("InvestmentPerformanceAttributeMemberEntries");

                    b.Navigation("InvestmentPerformanceEntries");
                });

            modelBuilder.Entity("NjordFinance.Model.BankTransactionCode", b =>
                {
                    b.Navigation("BankTransactionCodeAttributeMemberEntries");

                    b.Navigation("BankTransactions");
                });

            modelBuilder.Entity("NjordFinance.Model.BrokerTransaction", b =>
                {
                    b.Navigation("InverseTaxLot");
                });

            modelBuilder.Entity("NjordFinance.Model.BrokerTransactionCode", b =>
                {
                    b.Navigation("BrokerTransactionCodeAttributeMemberEntries");

                    b.Navigation("BrokerTransactions");
                });

            modelBuilder.Entity("NjordFinance.Model.Country", b =>
                {
                    b.Navigation("CountryAttributeMemberEntries");
                });

            modelBuilder.Entity("NjordFinance.Model.InvestmentStrategy", b =>
                {
                    b.Navigation("InvestmentStrategyTargets");
                });

            modelBuilder.Entity("NjordFinance.Model.MarketHoliday", b =>
                {
                    b.Navigation("MarketHolidaySchedules");
                });

            modelBuilder.Entity("NjordFinance.Model.MarketIndex", b =>
                {
                    b.Navigation("MarketIndexPrices");
                });

            modelBuilder.Entity("NjordFinance.Model.ModelAttribute", b =>
                {
                    b.Navigation("ModelAttributeMembers");

                    b.Navigation("ModelAttributeScopes");
                });

            modelBuilder.Entity("NjordFinance.Model.ModelAttributeMember", b =>
                {
                    b.Navigation("AccountAttributeMemberEntries");

                    b.Navigation("BankTransactionCodeAttributeMemberEntries");

                    b.Navigation("BrokerTransactionCodeAttributeMemberEntries");

                    b.Navigation("CountryAttributeMemberEntries");

                    b.Navigation("InvestmentPerformanceAttributeMemberEntries");

                    b.Navigation("InvestmentStrategyTargets");

                    b.Navigation("SecurityAttributeMemberEntries");
                });

            modelBuilder.Entity("NjordFinance.Model.Security", b =>
                {
                    b.Navigation("AccountWallets");

                    b.Navigation("BrokerTransactionDepSecurities");

                    b.Navigation("BrokerTransactionSecurities");

                    b.Navigation("SecurityAttributeMemberEntries");

                    b.Navigation("SecurityPrices");

                    b.Navigation("SecuritySymbols");
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityExchange", b =>
                {
                    b.Navigation("Securities");
                });

            modelBuilder.Entity("NjordFinance.Model.SecuritySymbol", b =>
                {
                    b.Navigation("SecuritySymbolMaps");
                });

            modelBuilder.Entity("NjordFinance.Model.SecuritySymbolType", b =>
                {
                    b.Navigation("SecuritySymbols");
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityType", b =>
                {
                    b.Navigation("Securities");
                });

            modelBuilder.Entity("NjordFinance.Model.SecurityTypeGroup", b =>
                {
                    b.Navigation("SecurityTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
