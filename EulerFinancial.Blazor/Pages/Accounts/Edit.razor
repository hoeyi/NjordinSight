@page "/Accounts/Edit/{AccountId:int}"

@inherits ModelCRUD<Account>

@inject IReferenceDataService ReferenceData

<PageTitle>@PageTitle</PageTitle>
<div><h4>@PageTitle</h4></div>
<hr/>

@if (IsLoading)
{
    <p><em>@Resources.UserInterfaceString.Page_Loading_Caption</em></p>
}
else
{
    <div>
        <a class="link-button" href="@($"{PageIndexUri}")"
            @onclick="@(args => NavigateToIndex(args))"
            @onclick:preventDefault>
            @Resources.UserInterfaceString.Index_Button_Caption
        </a>
        <a class="link-button" href=""
            @onclick=@(args => HandleDelete(args))
            @onclick:preventDefault>
            @Resources.UserInterfaceString.Delete_Button_Caption
        </a>
    </div>
    <hr />
    <EditForm Model=@Model>
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div>
            <AccountObjectCRUD Model="@Model.AccountNavigation" IsDisabled=false />
        </div>
        <div>
            <AccountCRUD Model="@Model" AccountCustodians=@custodians IsDisabled=false />
        </div>
        <div>
            <button type="submit" @onclick=@(args => HandleValidSubmit(args))>
                @Resources.UserInterfaceString.Save_Button_Caption
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? AccountId { get; set; }

    /// <inheritdoc/>
    protected override string PageTitle => string.Format(
        Resources.PageMetadata.Account_Edit_Title, 
        Model?.AccountNavigation?.AccountObjectCode.ToUpper());

    private IEnumerable<AccountCustodian> custodians;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {   
        var accountQuery = await Controller.ReadAsync(AccountId);
        Model = accountQuery.Value;

        var custodiansQuery = await ReferenceData.GetAllAsync<AccountCustodian>();
        custodians = custodiansQuery;

        IsLoading = (Model is null || custodians is null);
    }

    private async Task HandleDelete(MouseEventArgs args)
    {
        var result = await Controller.DeleteAsync(Model);

        if (result is NoContentResult)
            NavigateToIndex(args);
    }

    private async Task HandleValidSubmit(MouseEventArgs args)
    {
        var e = args;
        Logger.Information("HandleValidSubmit called");

        var result = await Controller.UpdateAsync(AccountId, Model);

        if (result.Value?.AccountId == AccountId)
            NavigateToDetail($"{Model?.AccountId}");
    }
}
