@page "/Accounts"
@inherits ModelView
@inject IController<Account> Controller

@if (Accounts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4>Accounts</h4>
    <button class="btn btn-primary"
            @onclick="@(args => SearchClicked(args))">
        Search
    </button>
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(AccountObject), nameof(AccountObject.AccountObjectCode))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(AccountObject), nameof(AccountObject.ObjectDipslayName))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(AccountObject), nameof(AccountObject.StartDate))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(AccountObject), nameof(AccountObject.CloseDate))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(Account), nameof(Account.AccountNumber))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(Account), nameof(Account.DisplayOrder))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(Account), nameof(Account.BooksClosedDate))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(Account), nameof(Account.IsComplianceTradable))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(Account), nameof(Account.HasWallet))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(Account), nameof(Account.HasBankTransaction))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(Account), nameof(Account.HasBrokerTransaction))
                    </th>
                    <th>
                        @ResourceHelper.GetDisplayName(typeof(Account), nameof(Account.AccountCustodianId))
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var account in Accounts)
                {
                    int id = account.AccountId;

                    <tr>
                        <td>@account.AccountNavigation.AccountObjectCode</td>
                        <td>@account.AccountNavigation.ObjectDipslayName</td>
                        <td>@account.AccountNavigation.StartDate.ToString(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern)</td>
                        <td>@account.AccountNavigation.CloseDate.ToString(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern)</td>
                        <td>@account.AccountNumber</td>
                        <td>@account.DisplayOrder</td>
                        <td>@account.BooksClosedDate.ToString(CultureInfo.CurrentCulture.DateTimeFormat.ShortDatePattern)</td>
                        <td>@account.IsComplianceTradable</td>
                        <td>@account.HasWallet</td>
                        <td>@account.HasBankTransaction</td>
                        <td>@account.HasBrokerTransaction</td>
                        <td>@account.AccountCustodian?.CustodianCode</td>
                        <td>
                            <button class="btn btn-primary"
                                    @onclick="@(args => NavigateToDetail(args, id))">
                                Details
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code{
    private IEnumerable<Account> Accounts;

    protected override async Task OnInitializedAsync()
    {
        var actionResult = await Controller.SelectWhereAysnc(x => true, maxCount: 0);

        Accounts = actionResult.Value;
    }

    private async Task SearchClicked(MouseEventArgs args)
    {
        var actionResult = await Controller.SelectWhereAysnc(GetSearchExpression(), maxCount: 0);

        Accounts = actionResult.Value;
    }

    private Expression<Func<Account, bool>> GetSearchExpression()
    {
        return x => x.AccountId > 10;
    }

    private void NavigateToDetail(MouseEventArgs args, int id)
    {
        NavigationHelper.NavigateTo($"/Accounts/Details/{id}");
    }
}