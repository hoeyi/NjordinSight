@page "/Accounts"
@inherits ModelIndex

@inject IController<Account> Controller
@inject ILogger Logger

@if (Accounts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4>Accounts</h4>
    <div>
        <label hidden="@SearchIsValid" class="alert-info">@SearchErrorMessage</label>
    </div>
    <div>
        <table class="table parameter-table">
            <tbody>
                <tr>
                    <td><label>@Resources.UserInterfaceString.Search_FieldSelector_Caption</label></td>
                    <td>
                        <select class="form-control selectpicker" @bind="@SearchMemberName" id="SearchFieldSelect">
                            @foreach (var field in SearchFields)
                            {
                                <option value="@field.QualifiedMemberName">@field.Display?.GetName()</option> 
                            }
                        </select>
                    </td>
                    <td>
                        <select class="form-control selectpicker" @bind="@SearchOperator" id="search-operator-select">
                            @foreach (var op in ComparisonOperators)
                            {
                                <option value=@op>@(ModelMetadata.NameFor<ComparisonOperator>($"{op}"))</option>
                            }
                        </select>
                    </td>
                    <td>
                        <input @bind="SearchValue" />
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <button class="btn btn-primary" @onclick="@(args => SearchClicked(args))">
        @Resources.UserInterfaceString.Search_Button_Caption
    </button>
    <div>
        <ModelList Data=@Accounts>
            <table class="table">
                <thead>
                    <tr>
                        <th>@(ModelMetadata.NameFor<AccountObject>(nameof(AccountObject.AccountObjectCode)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<AccountObject>(nameof(AccountObject.ObjectDisplayName)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<AccountObject>(nameof(AccountObject.StartDate)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<AccountObject>(nameof(AccountObject.CloseDate)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<Account>(nameof(Account.AccountNumber)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<Account>(nameof(Account.DisplayOrder)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<Account>(nameof(Account.BooksClosedDate)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<Account>(nameof(Account.IsComplianceTradable)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<Account>(nameof(Account.HasWallet)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<Account>(nameof(Account.HasBankTransaction)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<Account>(nameof(Account.HasBrokerTransaction)))
                        </th>
                        <th>
                            @(ModelMetadata.NameFor<Account>(nameof(Account.AccountCustodianId)))
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@context.AccountNavigation.AccountObjectCode</td>
                        <td>@context.AccountNavigation.ObjectDisplayName</td>
                        <td>@context.AccountNavigation.StartDate.ToShortDateString()</td>
                        <td>@context.AccountNavigation.CloseDate?.ToShortDateString()</td>
                        <td>@context.AccountNumber</td>
                        <td>@context.DisplayOrder</td>
                        <td>@context.BooksClosedDate?.ToShortDateString()</td>
                        <td>@context.IsComplianceTradable</td>
                        <td>@context.HasWallet</td>
                        <td>@context.HasBankTransaction</td>
                        <td>@context.HasBrokerTransaction</td>
                        <td>@context.AccountCustodian?.CustodianCode</td>
                        <td>
                            <button class="btn btn-primary"
                                    @onclick="@(args => NavigateToDetail(args, context))">
                                Details
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </ModelList>
</div>
}

@code{
    private IEnumerable<Account> Accounts;

    protected override async Task OnInitializedAsync()
    {
        var actionResult = await Controller.SelectWhereAysnc(x => true, maxCount: 0);

        Accounts = actionResult.Value;
        SearchFields = ExpressionBuilder.GetSearchableMembers<Account>();
        ComparisonOperators = ExpressionBuilder.GetComparisonOperators();

        if (SearchFields.Count() > 0)
            SearchMemberName = SearchFields.First().QualifiedMemberName;

        if (ComparisonOperators.Count() > 0)
            SearchOperator = ComparisonOperators.First();
    }

    private async Task SearchClicked(MouseEventArgs args)
    {
        if(TryParseSearchExpression(out Expression<Func<Account, bool>> exp, out string msg))
        {
            try
            {
                SearchErrorMessage = msg;
                var actionResult = await Controller.SelectWhereAysnc(exp, maxCount: 0);
                Accounts = actionResult.Value;
            }
            catch(Exception e)
            {
                Logger.Error(e, string.Empty);
            }
        }
        else
        {
            SearchErrorMessage = msg;
        }
    }

    private bool TryParseSearchExpression(out Expression<Func<Account,bool>> expression, out string errorMessage)
    {
        try
        {
            var param = ExpressionBuilder
                .CreateQueryParameter<Account>(
                    SearchFields.FirstOrDefault(s => s.QualifiedMemberName == SearchMemberName),
                    SearchOperator,
                    SearchValue);

            expression = ExpressionBuilder.GetExpression(param);
            errorMessage = null;

            return true;
        }
        catch(Exception e)
        {
            expression = null;
            errorMessage = e.Message;

            return false;
        }
    }
    
    private void NavigateToDetail(MouseEventArgs args, Account account)
    {
        NavigationHelper.NavigateTo($"/Accounts/Details/{account?.AccountId ?? default}");
    }
}