@page "/Accounts/Create/{RequestGuid:guid}"

@inherits ModelCRUD<Account>

@inject IReferenceDataService ReferenceData

<PageTitle>@PageTitle.AsPageTitle()</PageTitle>
<div><h4>@PageTitle</h4></div>
<hr/>

@if (IsLoading)
{
    <p><em>@StringResource.Page_Loading_Caption</em></p>
}
else
{
    <div>
        <a class="link-button" href="@($"{PageIndexUri}")"
            @onclick="@(args => NavigateToIndex(args))"
            @onclick:preventDefault>
            @StringResource.Button_Index_Caption
        </a>
    </div>
    <hr />
    <div>
        <AccountObjectCRUD Model="@Model.AccountNavigation" IsDisabled=false />
    </div>
    <div>
        <AccountCRUD Model="@Model" AccountCustodians=@Custodians IsDisabled=false />
    </div>
    <div>
        <button type="submit" @onclick=@(args => HandleValidSubmit(args))>
            @StringResource.Button_Save_Caption
        </button>
    </div>
}

@code {
    [Parameter]
    public Guid RequestGuid { get; set; }

    /// <inheritdoc/>
    protected override string PageTitle => StringResource.Title_AccountCreate;

    private IEnumerable<AccountCustodian> Custodians { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {

        var modelQuery = Controller.GetDefaultAsync();
        var custodiansQuery = ReferenceData.GetAllAsync<AccountCustodian>();

        await custodiansQuery;
        await modelQuery;

        Custodians = custodiansQuery.Result;
        Model = modelQuery.Result.Value;

        IsLoading = (Model is null || Custodians is null);
    }

    private async Task HandleValidSubmit(MouseEventArgs args)
    {
        int defaultId = Model.AccountId;

        var result = await Controller.CreateAsync(Model);
        var createResult = result.Result as CreatedAtActionResult;

        if (createResult is not null)
            Model = createResult.Value as Account;


        if (Model?.AccountId != defaultId)
            NavigateToDetail($"{Model?.AccountId}");
    }
}
