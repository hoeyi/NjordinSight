@page "/Accounts/Create/{RequestGuid:guid}"

@inherits ModelCRUD<Account>

@inject IReferenceDataService ReferenceData

<div><h3>@ModelMetadata.NounFor(typeof(Account))?.GetSingular()?.ToTitleCase()</h3></div>
<div>
    <button class="btn btn-primary" @onclick=NavigateToIndex>
        @Resources.UserInterfaceString.Index_Button_Caption
    </button>
</div>
<hr />

@if (IsLoading)
{
    <p><em>@Resources.UserInterfaceString.Page_Loading_Caption</em></p>
}
else
{
    <div>
        <AccountObjectCRUD Model="@Model.AccountNavigation" IsDisabled=false />
    </div>
    <div>
        <AccountCRUD Model="@Model" AccountCustodians=@custodians IsDisabled=false />
    </div>
    <div>
        <button type="submit" @onclick=@(args => HandleValidSubmit(args))>
            @Resources.UserInterfaceString.Save_Button_Caption
        </button>
    </div>
}

@code {
    [Parameter]
    public Guid RequestGuid { get; set; }

    private IEnumerable<AccountCustodian> custodians;

    protected override string IndexUri { get; set; } = "/Accounts";

    protected override async Task OnInitializedAsync()
    {
        Model = new Account()
        {
            AccountNavigation = new AccountObject()
            {
                ObjectType = AccountObjectType.Account.ConvertToStringCode()
            }
        };

        var custodiansQuery = await ReferenceData.GetAccountCustodiansAsync();
        custodians = custodiansQuery;

        IsLoading = (Model is null || custodians is null);
    }

    private async Task HandleValidSubmit(MouseEventArgs args)
    {
        var e = args;
        Logger.Information("HandleValidSubmit called");

        int defaultId = Model.AccountId;

        var result = await Controller.CreateAsync(Model);
        Model = result?.Value;

        if (result.Value?.AccountId != defaultId)
            NavigateToDetail($"{Model?.AccountId}");
    }
}
