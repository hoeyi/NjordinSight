@page "/AccountWallets/Edit/{AccountId:int}"
@inherits ModelComponentBase<AccountWallet>

@inject IBatchController<AccountWallet> Controller
@inject IReferenceDataService ReferenceData

<PageTitle>@PageTitle.AsPageTitle()</PageTitle>
<div><h4>@PageTitle</h4></div>
<hr />

@if (IsLoading)
{
    <p><em>@StringResource.Page_Loading_Caption</em></p>
}
else
{   if(!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-text">@errorMessage</div>
    }
    <EditForm Model="@Wallets">
        <a class="link-button" href="" @onclick=@(args => HandleSubmit(context, args)) @onclick:preventDefault>
            @StringResource.Button_Save_Caption
        </a>
        <div>
            <button class="btn btn-primary" @onclick=@(args => AddNewAsync(args))>
                @StringResource.DataGrid_NewLine_Caption.Format(
            ModelMetadata.NounFor(typeof(AccountWallet))?.GetSingular())
            </button>
        </div>
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <span>
            <DataGrid Data="@Wallets" class="datagrid-editable" >
                <DataGridColumn 
                    Property=@nameof(AccountWallet.DenominationSecurityId)
                    Caption=@(ModelMetadata.NameFor<AccountWallet>(nameof(AccountWallet.DenominationSecurityId)))
                    width="20%">
                    <CellEditTemplate Context="model">
                        <InputSelect class="form-control" id="denomination-select" @bind-Value="@model.DenominationSecurityId">
                            @foreach (var security in DenominationSecurities)
                                    {
                                    <option value=@security.SecurityId>@security.SecurityDescription</option>
                                    }
                            </InputSelect>
                            <ValidationMessage For=@(()=> model.DenominationSecurityId) />
                        </CellEditTemplate>
                    </DataGridColumn>
                <DataGridColumn 
                    Property=@nameof(AccountWallet.AddressCode)
                    Caption=@(ModelMetadata.NameFor<AccountWallet>(nameof(AccountWallet.AddressCode)))
                    width="45%">
                        <CellEditTemplate Context="model">
                            <InputText class="form-control" id="addresscode-text" @bind-Value="@model.AddressCode" />
                            <ValidationMessage For=@(()=> model.AddressCode) />
                        </CellEditTemplate>
                    </DataGridColumn>
                <DataGridColumn 
                    Property=@nameof(AccountWallet.AddressTag)
                    Caption=@(ModelMetadata.NameFor<AccountWallet>(nameof(AccountWallet.AddressTag)))
                    width="35%">
                        <CellEditTemplate Context="model">
                            <InputText class="form-control" id="addresscode-text" @bind-Value="@model.AddressTag" />
                            <ValidationMessage For=@(()=> model.AddressTag) />
                        </CellEditTemplate>
                    </DataGridColumn>
                </DataGrid>
        </span>
    </EditForm>
}

@code {

    [Parameter]
    public int AccountId { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="AccountWallet"/> collection for this component.
    /// </summary>
    private IList<AccountWallet> Wallets { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="Security"/> collection for this component.
    /// </summary>
    private IEnumerable<Security> DenominationSecurities { get; set; }

    /// <inheritdoc/>
    protected override string PageTitle => StringResource
        .Title_AccountWalletsEdit.Format(parent?.AccountCode?.ToUpper());

    private Account parent;

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        parent = await ReferenceData.GetSingleAsync<Account>(a =>
                                a.AccountId == (int)AccountId, nameof(Account.AccountNavigation));

        var initResult = Controller.Initialize(parent.AccountId);


        if (initResult is not OkResult)
            return; // TODO: Redirect to error page.

        DenominationSecurities = await ReferenceData.GetAllAsync<Security>();

        Task<ActionResult<IList<AccountWallet>>> actionResult =
            Controller.SelectWhereAysnc(aw => aw.AccountId == parent.AccountId, maxCount: -1);

        await actionResult;

        Wallets = actionResult.Result?.Value;

        if (Wallets.Count() == 0)
        {
            await AddNewAsync(null);
        }

        IsLoading = Wallets is null;
    }

    private async Task AddNewAsync(MouseEventArgs args)
    {
        // TODO: Do something with MouseEventArgs?

        var getDefaultTask = await Controller.GetDefaultAsync();
        await Controller.AddAsync(getDefaultTask.Value);

        Wallets.Add(getDefaultTask.Value);
    }

    private async Task DeleteAsync(AccountWallet wallet, MouseEventArgs args)
    {
        var result = await Controller.DeleteAsync(wallet);

        // TODO: interpret the response.
    }


    private async Task HandleSubmit(EditContext context, MouseEventArgs args)
    {
        bool isValid = context.Validate();
        if (isValid)
        {
            var saveResult = await Controller.SaveChangesAsync();

            if (saveResult is NoContentResult)
                return;

            else if (saveResult is ObjectResult objectResult)
                errorMessage = (objectResult.Value as Exception)?.Message;
        }
    }
}