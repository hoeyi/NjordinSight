@typeparam TModelDto

@inherits ModelPage<TModelDto>

@code {
    [Inject]
    protected IBatchController<TModelDto> Controller { get; init; }

    /// <summary>
    /// Gets or sets the collection of entries worked via this page.
    /// </summary>
    protected IList<TModelDto> Entries { get; set; }

    protected EditContext _context { get; set; }

    /// <summary>
    /// Adds a new entry to the worked collection.
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    /// <exception cref="InvalidOperationException"></exception>
    protected async Task AddNewAsync(MouseEventArgs args)
    {
        // TODO: Do something with MouseEventArgs?

        var getDefaultTask = await Controller.GetDefaultAsync();
        await Controller.AddAsync(getDefaultTask.Value);

        if (getDefaultTask.Value is TModelDto model)
            Entries.Add(model);
        else
            // TODO: Log error here with useful message.
            throw new InvalidOperationException();
    }

    /// <summary>
    /// Removes an existing or pending entry from the worked collection.
    /// </summary>
    /// <param name="args"></param>
    /// <param name="model"></param>
    /// <returns></returns>
    /// <exception cref="InvalidOperationException"></exception>
    protected async Task DeleteAsync(MouseEventArgs args, TModelDto model)
    {
        var result = await Controller.DeleteOrDetachAsync(model);

        if (result is OkResult)
            Entries.Remove(model);
        else
            // TODO: Log error here with useful message.
            throw new InvalidOperationException();
    }

    protected virtual void Cancel_OnClick() => NavigationHelper.NavigateTo(IndexUriRelativePath);

    protected virtual async Task Submit_OnClick(EditContext context, MouseEventArgs args)
    {
        bool isValid = context.Validate();
        if (isValid)
        {
            var saveResult = await Controller.SaveChangesAsync();

            if (saveResult is NoContentResult)
                Cancel_OnClick();

            else if (saveResult is ObjectResult objectResult)
                ErrorMessage = (objectResult.Value as Exception)?.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            Entries = (await Controller.SelectAllAsync()).Value;

            if (!Entries.Any())
            {
                await AddNewAsync(args: null);
            }
        }
        finally
        {
            _context = new(Entries);
            IsLoading = Entries is null;
        }
    }
}
