@inherits ModelCRUD<AccountCompositeDto>

@if(ModelDto is null)
{
    <LoadingSvg />
}
else
{
    @if(ReadOnly)
    {
        <DataGrid TModel="AccountCompositeMemberDto" Data="@ModelDto.AccountMembers">
            <DataGridColumn Property="@nameof(AccountCompositeMemberDto.AccountId)"
                            Caption=@(ModelMetadata.NameFor<AccountCompositeMemberDto>(x => x.AccountId))>
                <CellTemplate Context="model">
                    @MemberDisplay(model.AccountId)
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn Property="@nameof(AccountCompositeMemberDto.EntryDate)"
                    Caption="@(ModelMetadata.NameFor<AccountCompositeMemberDto>(x => x.EntryDate))">
                <CellTemplate Context="model">
                    @model.EntryDate.ToShortDateString()
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn Property="@nameof(AccountCompositeMemberDto.ExitDate)"
                    Caption="@(ModelMetadata.NameFor<AccountCompositeMemberDto>(x => x.ExitDate))">
                <CellTemplate Context="model">
                    @model.ExitDate?.ToShortDateString()
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn Property="@nameof(AccountCompositeMemberDto.Comment)"
                    Caption="@(ModelMetadata.NameFor<AccountCompositeMemberDto>(x => x.Comment))">
                <CellTemplate Context="model">
                    @model.Comment
                </CellTemplate>
            </DataGridColumn>
        </DataGrid>

    }
    else
    {
        <ActionButtonMenu>
            <button class="form-control button" 
                @onclick="args => ModelDto.AccountMembers.Add(
                    new(){ AccountCompositeId = ModelDto.Id })">
                @Strings.Caption_CreateNew.Format(ModelMetadata
                    .GetAttribute<AccountCompositeMemberDto, NounAttribute>()?.GetSingular())
            </button>
        </ActionButtonMenu>
        <DataGrid TModel="AccountCompositeMemberDto" Data="@ModelDto.AccountMembers">
            <DataGridColumn Type="DataGridCellType.Button">
                <CellEditTemplate Context="model">
                    <ToolTip Text="@Strings.Caption_Button_Delete">
                        <button class="form-control button icon" type="button"
                            @onclick="async (args) => RemoveMember(model)">
                            <IonIcon Name="close-circle" />
                        </button>
                    </ToolTip>
                </CellEditTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Control"
                Property="@nameof(AccountCompositeMemberDto.AccountId)"
                    Caption="@(ModelMetadata.NameFor<AccountCompositeMemberDto>(x => x.AccountId))">
                <CellEditTemplate Context="model">
                    <InputSelect class="form-control"
                             @bind-Value="@model.AccountId">
                        @foreach (var account in Accounts)
                        {
                            <option value=@account.Id>@account.ShortCode</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(()=> model.AccountId) />
                </CellEditTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Control"
                Property="@nameof(AccountCompositeMemberDto.EntryDate)"
                Caption="@(ModelMetadata.NameFor<AccountCompositeMemberDto>(x => x.EntryDate))">
                <CellEditTemplate Context="model">
                    <InputDate class="form-control" @bind-Value="@model.EntryDate" />
                    <ValidationMessage For=@(()=> model.EntryDate) />
                </CellEditTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Control"
                Property="@nameof(AccountCompositeMemberDto.ExitDate)"
                Caption="@(ModelMetadata.NameFor<AccountCompositeMemberDto>(x => x.ExitDate))">
                <CellEditTemplate Context="model">
                    <InputDate class="form-control" @bind-Value="@model.ExitDate" />
                    <ValidationMessage For=@(()=> model.ExitDate) />
                </CellEditTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Control"
                Property="@nameof(AccountCompositeMemberDto.Comment)"
                Caption="@(ModelMetadata.NameFor<AccountCompositeMemberDto>(x => x.Comment))">
                <CellEditTemplate Context="model">
                    <InputText class="form-control" @bind-Value="@model.Comment" />
                    <ValidationMessage For=@(()=> model.Comment) />
                </CellEditTemplate>
            </DataGridColumn>
        </DataGrid>
    }
}

@code {
    [Parameter, EditorRequired]
    public IEnumerable<AccountSimpleDto> Accounts { get; set; } = default!;

    private void AddMember() => 
        ModelDto.AccountMembers.Add(new() { AccountCompositeId = ModelDto.Id });

    private void RemoveMember(AccountCompositeMemberDto memberDto)
    {
        if (!ModelDto.AccountMembers.Remove(memberDto))
            throw new InvalidOperationException();
    }

    private string MemberDisplay(int? id) =>
        Accounts.FirstOrDefault(a => a.Id == id)?.ShortCode ?? string.Empty;
}            