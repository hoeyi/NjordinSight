@inherits ModelCRUD<AccountCompositeDto>

@if(ModelDto is null)
{
    <LoadingSvg />
}
else
{
    @if(ReadOnly)
    {
        <DataGrid TModel="AccountCompositeMember" Data="@ModelDto.Members">
            <DataGridColumn 
                Property="@nameof(AccountCompositeMember.AccountId)"
                Caption=@(ModelMetadata.NameFor<AccountCompositeMember>(x => x.AccountId))>
                <CellTemplate Context="model">
                    @MemberDisplay(model.AccountId)
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Property="@nameof(AccountCompositeMember.EntryDate)"
                    Caption="@(ModelMetadata.NameFor<AccountCompositeMember>(x => x.EntryDate))">
                <CellTemplate Context="model">
                    @model.EntryDate.ToShortDateString()
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Property="@nameof(AccountCompositeMember.ExitDate)"
                    Caption="@(ModelMetadata.NameFor<AccountCompositeMember>(x => x.ExitDate))">
                <CellTemplate Context="model">
                    @model.ExitDate?.ToShortDateString()
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Property="@nameof(AccountCompositeMember.Comment)"
                    Caption="@(ModelMetadata.NameFor<AccountCompositeMember>(x => x.Comment))">
                <CellTemplate Context="model">
                    @model.Comment
                </CellTemplate>
            </DataGridColumn>
        </DataGrid>

    }
    else
    {
        <ActionButtonMenu>
            <button class="form-control button" 
                @onclick="args => ModelDto.AddMember()">
                @Strings.Caption_CreateNew.Format(ModelMetadata
                    .GetAttribute<AccountCompositeMember, NounAttribute>()?.GetSingular())
            </button>
        </ActionButtonMenu>
        <DataGrid TModel="AccountCompositeMember" Data="@ModelDto.Members">
            <DataGridColumn Type="DataGridCellType.Button">
                <CellEditTemplate Context="model">
                    <ToolTip Text="@Strings.Caption_Button_Delete">
                        <button class="form-control button icon" type="button"
                            @onclick="async (args) => ModelDto.RemoveMember(model)">
                            <IonIcon Name="close-circle" />
                        </button>
                    </ToolTip>
                </CellEditTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Control"
                Property="@nameof(AccountCompositeMember.AccountId)"
                    Caption="@(ModelMetadata.NameFor<AccountCompositeMember>(x => x.AccountId))">
                <CellEditTemplate Context="model">
                    <InputSelect class="form-control"
                             @bind-Value="@model.AccountId">
                        @foreach (var account in Accounts)
                        {
                            <option value=@account.Key>@account.Display</option>
                        }
                    </InputSelect>
                    <ValidationMessage For=@(()=> model.AccountId) />
                </CellEditTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Control"
                Property="@nameof(AccountCompositeMember.EntryDate)"
                Caption="@(ModelMetadata.NameFor<AccountCompositeMember>(x => x.EntryDate))">
                <CellEditTemplate Context="model">
                    <InputDate class="form-control" @bind-Value="@model.EntryDate" />
                    <ValidationMessage For=@(()=> model.EntryDate) />
                </CellEditTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Control"
                Property="@nameof(AccountCompositeMember.ExitDate)"
                Caption="@(ModelMetadata.NameFor<AccountCompositeMember>(x => x.ExitDate))">
                <CellEditTemplate Context="model">
                    <InputDate class="form-control" @bind-Value="@model.ExitDate" />
                    <ValidationMessage For=@(()=> model.ExitDate) />
                </CellEditTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Control"
                Property="@nameof(AccountCompositeMember.Comment)"
                Caption="@(ModelMetadata.NameFor<AccountCompositeMember>(x => x.Comment))">
                <CellEditTemplate Context="model">
                    <InputText class="form-control" @bind-Value="@model.Comment" />
                    <ValidationMessage For=@(()=> model.Comment) />
                </CellEditTemplate>
            </DataGridColumn>
        </DataGrid>
    }
}

@code {
    [Parameter, EditorRequired]
    public IEnumerable<LookupModel<int, string>> Accounts { get; set; } = default!;

    private string MemberDisplay(int? id) =>
        Accounts.FirstOrDefault(a => a.Key == id)?.Display ?? string.Empty;
}            