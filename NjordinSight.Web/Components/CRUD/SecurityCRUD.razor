@inherits ModelCRUD<SecurityDto>

@if (ModelDto is null
    || SecurityTypes is null
    || SecurityExchanges is null
    || Issuers is null)
{
    <LoadingSvg />
}
else
{
    <ModelForm TModelDto="SecurityDto">
        <ModelFormEntry ForMember="@(() => ModelDto.SecurityDescription)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ModelDto.SecurityDescription
                </div>
            }
            else
            {
                <InputText class="form-control" @bind-Value="ModelDto.SecurityDescription"
                   disable="@Disabled"
                   DisplayName="@NameFor(x => x.SecurityDescription)" />
            }
        </ModelFormEntry>
        <ModelFormEntry ForMember="@(() => ModelDto.SecurityTypeId)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @(SecurityTypes.GetDisplayName(ModelDto.SecurityTypeId))
                </div>
            }
            else
            {
                <InputSelect class="form-control"
                     DisplayName=@(NameFor(x => x.SecurityTypeId))
                     @bind-Value="ModelDto.SecurityTypeId"
                     disabled="@Disabled">
                @foreach (var lookup in SecurityTypes)
                {
                    <option value=@lookup.Key>@lookup.Display</option>
                }
            </InputSelect>
            }
        </ModelFormEntry>
        <ModelFormEntry ForMember="@(() => ModelDto.Issuer)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ModelDto.Issuer
                </div>
            }
            else
            {
                <InputText class="form-control" @bind-Value="ModelDto.Issuer"
                   disable="@Disabled"
                   DisplayName="@NameFor(x => x.Issuer)" />
            }
        </ModelFormEntry>
        <ModelFormEntry ForMember="@(() => ModelDto.HasPerpetualMarket)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ModelDto.HasPerpetualMarket
                </div>
            }
            else
            {
                <InputCheckbox class="checkbox-themed" @bind-Value="ModelDto.HasPerpetualMarket"
                    disable="@Disabled"
                    DisplayName="@NameFor(x => x.HasPerpetualMarket)" />
            }
        </ModelFormEntry>
        <ModelFormEntry ForMember="@(() => ModelDto.HasPerpetualPrice)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ModelDto.HasPerpetualPrice
                </div>
            }
            else
            {
                <InputCheckbox class="checkbox-themed" @bind-Value="ModelDto.HasPerpetualPrice"
                    disable="@Disabled"
                    DisplayName="@NameFor(x => x.HasPerpetualPrice)" />
            }
        </ModelFormEntry>
        <ModelFormEntry ForMember="@(() => ModelDto.SecurityExchangeId)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @(SecurityTypes.GetDisplayName(ModelDto.SecurityExchangeId ?? default))
                </div>
            }
            else
            {
                <InputSelect class="form-control"
                     DisplayName=@(NameFor(x => x.SecurityExchangeId))
                     @bind-Value="ModelDto.SecurityExchangeId"
                     disabled="@Disabled">
                @foreach (var lookup in SecurityExchanges)
                {
                    <option value=@lookup.Key>@lookup.Display</option>
                }
            </InputSelect>
            }
        </ModelFormEntry>
    </ModelForm>
}

@code{
    [Parameter, EditorRequired]
    public IEnumerable<LookupModel<int, string>> SecurityTypes { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<LookupModel<int, string>> SecurityExchanges { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<string> Issuers { get; set; }

    protected override void OnInitialized()
    {
        IsLoading = ModelDto is null
            || SecurityTypes is null
            || SecurityExchanges is null
            || Issuers is null;
    }
}