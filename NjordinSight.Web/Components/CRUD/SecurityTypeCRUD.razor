@inherits ModelCRUD<SecurityTypeDto>

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <ModelForm TModelDto="SecurityTypeDto">
        <ModelFormEntry ForMember="@(() => ModelDto.SecurityTypeName)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ModelDto.SecurityTypeName
                </div>
            }
            else
            {
                <InputText class="form-control" @bind-Value="ModelDto.SecurityTypeName"
                   disable="@Disabled"
                   DisplayName="@NameFor(x => x.SecurityTypeName)" />
            }
        </ModelFormEntry>
        <ModelFormEntry ForMember="@(() => ModelDto.SecurityTypeGroupId)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @(GetItem(
                        SecurityTypeGroups, 
                        x => x.SecurityTypeGroupId == ModelDto.SecurityTypeGroupId)
                        ?.SecurityTypeGroupName)
                </div>
            }
            else
            {
                <InputSelect class="form-control"
                     DisplayName=@(NameFor(x => x.SecurityTypeGroupId))
                     @bind-Value="ModelDto.SecurityTypeGroupId"
                     disabled="@Disabled">
                @foreach (var lookup in SecurityTypeGroups)
                {
                    <option value=@lookup.SecurityTypeGroupId>@lookup.SecurityTypeGroupName</option>
                }
            </InputSelect>
            }
        </ModelFormEntry>
        <ModelFormEntry ForMember="@(() => ModelDto.CanHavePosition)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ModelDto.CanHavePosition
                </div>
            }
            else
            {
                <InputCheckbox class="checkbox-themed" @bind-Value="ModelDto.CanHavePosition"
                       disable="@Disabled"
                       DisplayName="@NameFor(x => x.CanHavePosition)" />
            }
        </ModelFormEntry>
        <ModelFormEntry ForMember="@(() => ModelDto.CanHaveDerivative)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ModelDto.CanHaveDerivative
                </div>
            }
            else
            {
                <InputCheckbox class="checkbox-themed" @bind-Value="ModelDto.CanHaveDerivative"
                       disable="@Disabled"
                       DisplayName="@NameFor(x => x.CanHaveDerivative)" />
            }
        </ModelFormEntry>
        <ModelFormEntry ForMember="@(() => ModelDto.HeldInWallet)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ModelDto.HeldInWallet
                </div>
            }
            else
            {
                <InputCheckbox class="checkbox-themed" @bind-Value="ModelDto.HeldInWallet"
                       disable="@Disabled"
                       DisplayName="@NameFor(x => x.HeldInWallet)" />
            }
        </ModelFormEntry>
        <ModelFormEntry ForMember="@(() => ModelDto.ValuationFactor)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ModelDto.ValuationFactor
                </div>
            }
            else
            {
                <InputNumber class="form-control" @bind-Value="ModelDto.ValuationFactor"
                   disable="@Disabled"
                     DisplayName="@NameFor(x => x.ValuationFactor)" />
            }
        </ModelFormEntry>
    </ModelForm>
}

@code {
    [Parameter, EditorRequired]
    public IEnumerable<SecurityTypeGroupDto> SecurityTypeGroups { get; set; }

    protected override void OnInitialized()
    {
        IsLoading = ModelDto is null | SecurityTypeGroups is null;
    }

    private T GetItem<T>(IEnumerable<T> items, Func<T, bool> predicate)
        => items.FirstOrDefault<T>(predicate);
}
