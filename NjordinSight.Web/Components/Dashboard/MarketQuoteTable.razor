@if(Quotes is null)
{
    <LoadingSvg />
}
else
{
    <DataGrid Data="Quotes">
        <DataGridColumn 
            Type="DataGridCellType.Text"
            Property="@nameof(Quote.Symbol)" Caption="@nameof(Quote.Symbol)">
            <CellTemplate Context="model">
                @model.Symbol
            </CellTemplate>
        </DataGridColumn>
        <DataGridColumn 
            Type="DataGridCellType.Text"
            Property="@nameof(Quote.Description)" Caption="@nameof(Quote.Description)">
            <CellTemplate Context="model">
                @model.Description
            </CellTemplate>
        </DataGridColumn>
        <DataGridColumn 
            Type="DataGridCellType.Text"
            Property="@nameof(Quote.LastPrice)" Caption="@nameof(Quote.LastPrice)">
            <CellTemplate Context="model">
                @model.LastPrice.ToString("C2")
            </CellTemplate>
        </DataGridColumn>
        <DataGridColumn 
            Type="DataGridCellType.Text"
                        Property="@nameof(Quote.Change)" Caption="@nameof(Quote.Change)">
            <CellTemplate Context="model">
                @model.Change.ToString("C2")
            </CellTemplate>
        </DataGridColumn>
        <DataGridColumn 
            Type="DataGridCellType.Text"
            Property="@nameof(Quote.PercentChange)" Caption="@nameof(Quote.PercentChange)">
            <CellTemplate Context="model">
                @model.PercentChange.ToString("P2")
            </CellTemplate>
        </DataGridColumn>
    </DataGrid>
}

@code {
    [Inject]
    public IWatchlist Watchlist { get; init; }

    private IEnumerable<Quote> Quotes { get; set; }

    private Timer _timer;

    protected override void OnInitialized()
    {
        Quotes = Watchlist.GetQuotes();

        _timer = new Timer(
            callback: async _ =>  // async void
                {
                    Quotes = Watchlist.UpdateQuotes(Quotes.ToList());

                    await InvokeAsync(StateHasChanged);
                }, 
            state: null, 
            dueTime: 0,
            period: 5000);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}