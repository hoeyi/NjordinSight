@inherits ModelComponent<Quote>

<div class="market-quote-table">
    @if(Quotes is null)
    {
        <LoadingSvg />
    }
    else
    {
        <DataGrid Data="Quotes">
            <DataGridColumn 
                Type="DataGridCellType.Text"
                Property="@nameof(Quote.Symbol)" Caption="@NameFor(x => x.Symbol)">
                <CellTemplate Context="model">
                        @model.Symbol
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Text"
                Property="@nameof(Quote.Description)" Caption="@NameFor(x => x.Description)">
                <CellTemplate Context="model">
                        @model.Description
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Text"
                Property="@nameof(Quote.LastPrice)" Caption="@NameFor(x => x.LastPrice)">
                <CellTemplate Context="model">
                        @model.LastPrice.ToString("C2")
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Text"
                Property="@nameof(Quote.Change)" Caption="@NameFor(x => x.Change)">
                <CellTemplate Context="model">
                    <div class="@(IsNegativeClass(model.Change))">
                        @model.Change.ToString("C2")
                    </div>
                </CellTemplate>
            </DataGridColumn>
            <DataGridColumn 
                Type="DataGridCellType.Text"
                Property="@nameof(Quote.PercentChange)" Caption="@NameFor(x => x.PercentChange)">
                <CellTemplate Context="model">
                    <div class="@(IsNegativeClass(model.Change))">
                        @model.PercentChange.ToString("P2")
                    </div>
                </CellTemplate>
            </DataGridColumn>
        </DataGrid>
    }
</div>

@code {
    [Inject]
    public IWatchlist Watchlist { get; init; }

    private IEnumerable<Quote> Quotes { get; set; }

    private Timer _timer;

    protected override void OnInitialized()
    {
        Quotes = Watchlist.GetQuotes();

        _timer = new Timer(
            callback: async _ =>  // async void
                {
                    Quotes = Watchlist.UpdateQuotes(Quotes.ToList());

                    await InvokeAsync(StateHasChanged);
                }, 
            state: null, 
            dueTime: 0,
            period: 5000);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private string IsNegativeClass(double delta) => 
        delta > 0 ? "positive" : delta < 0 ? "negative" : string.Empty;
}