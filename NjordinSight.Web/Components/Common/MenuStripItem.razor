<li class="@GetItemClass()">
    @if (string.IsNullOrEmpty(MenuItem.UriRelativePath))
    {
        <div class="grid-container @GetGridContainerClassModifier()">
            @if(DisplayIconLeft)
            {
                <div class="icon left">
                    <IonIcon Name="@MenuItem.IconKey" />
                </div>
            }
            @if(DisplayCaption)
            {
                <div class="caption left">
                    @MenuItem.Caption
                </div>
            }
            @if(DisplayIconRight)
            {
                <div class="icon right">
                    <IonIcon Name="caret-forward" class="caret-forward" />
                </div>
            }
        </div>
    }
    else
    {
        <a class="grid-container custom-nav-link @GetGridContainerClassModifier()" 
            style="cursor: pointer;"
            href="@MenuItem.UriRelativePath"
            @onclick="(async (args) => await HyperlinkClickCallBack.InvokeAsync(
                new(){ UriPath = MenuItem.UriRelativePath } ))">
            @if (DisplayIconLeft)
            {
                <div class="icon left">
                    <IonIcon Name="@MenuItem.IconKey" />
                </div>
            }
            @if (DisplayCaption)
            {
                <div class="caption left">
                    @MenuItem.Caption
                </div>
            }
            @if (DisplayIconRight)
            {
                <div class="icon right">
                    <IonIcon Name="caret-forward" class="caret-forward" />
                </div>
            }
        </a>
@*        <a class="grid-container custom-nav-link @GetGridContainerClassModifier()" href="@MenuItem.UriRelativePath">
            @if(DisplayIconLeft)
            {
                <div class="icon left">
                    <IonIcon Name="@MenuItem.IconKey" />
                </div>
            }
            @if(DisplayCaption)
            {
                <div class="caption left">
                    @MenuItem.Caption
                </div>
            }
            @if(DisplayIconRight)
            {
                <div class="icon right">
                    <IonIcon Name="caret-forward" class="caret-forward" />
                </div>
            }
        </a>*@
    }
    @if (MenuItem.HasChildren)
    {
        <ul class="@GetChildMenuClass()">
            @foreach (var child in MenuItem.Children)
            {
                <MenuStripItem MenuItem="@child" HyperlinkClickCallBack="HyperlinkClickCallBack" />
            }
        </ul>
    }
</li>

@code {
    protected override void OnInitialized()
    {
        return;
    }
    /// <summary>
    /// Gets or sets the object defining the content of this menu item.
    /// </summary>
    [Parameter, EditorRequired]
    public MenuItem MenuItem { get; set; }

    /// <summary>
    /// Gets or sets the delegate handler for the hyperlink click event.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<LinkClickEventArgs> HyperlinkClickCallBack { get; set; }

    private const string MenuLevelRoot = "level-0";
    private const string MenuLevelChild = "level-n";
    private const string MenuItemClass = "menu-item";

    private bool DisplayIconLeft => !MenuItem.IsRoot || !string.IsNullOrEmpty(MenuItem.IconKey);
    private bool DisplayCaption => !MenuItem.IsRoot || !string.IsNullOrEmpty(MenuItem.Caption);
    private bool DisplayIconRight => !MenuItem.IsRoot && MenuItem.HasChildren;

    private string GetChildMenuClass() =>
    $"sub-menu {(MenuItem.IsRoot ? MenuLevelRoot : MenuLevelChild)}";

    private string GetItemClass()
    {
        System.Text.StringBuilder sb = new();
        sb.Append(MenuItemClass);

        if (MenuItem.HasChildren)
            sb.Append(" parent");

        if (MenuItem.IsRoot)
        {
            sb.Append(" root-node");
        }

        if(!string.IsNullOrEmpty(MenuItem?.IconKey))
            sb.Append(" has-icon-key");

        return string.Join(" ", sb);
    }

    private string GetGridContainerClassModifier()
    {
        System.Text.StringBuilder sb = new();

        if(DisplayIconLeft)
        {
            sb.Append(" col-a");
            sb.Append(" with-icon-left");
        }

        if(DisplayCaption)
        {
            sb.Append(" col-b");
            sb.Append(" with-caption");
        }

        if (DisplayIconRight)
        {
            sb.Append(" col-c");
            sb.Append(" with-icon-right");
        }

        if(sb.Length == 0)
            return string.Empty;

        return string.Join(" ", sb);
    }
}