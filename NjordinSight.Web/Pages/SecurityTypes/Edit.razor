@page "/security-types/{ModelId:int}/edit"

@inherits ModelDetail<SecurityType>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateSingle(Model.SecurityTypeName).AsPageTitle())</PageTitle>

        <ModelPageHeader Header="@(PageTitle.UpdateSingle(Model.SecurityTypeName))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic"/>
        </CascadingValue>

        <ContentTile>
            <Body>
                <CascadingValue Value="@Model">
                    <EditForm class="model-editor" Model="@Model"
                        OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ActionButtonMenu>
                            <button type="submit" class="form-control button">
                                @Strings.Caption_Button_Save
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="Delete_OnClick"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Delete
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="Cancel_OnClick"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Cancel
                            </button>
                        </ActionButtonMenu>
                        <SecurityTypeCRUD Disabled="false" ReadOnly="false"
                            SecurityTypeGroups="@SecurityTypeGroups" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
    }
</ThemedComponent>


@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<LookupModel<int, string>> SecurityTypeGroups { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = Controller.ReadAsync(ModelId);
            var typeGroupsQuery = Controller.ReferenceQueries.GetSecurityTypeGroupDTOsAsync();

            var dataTasks = Task.WhenAll(modelQuery, typeGroupsQuery);
            await dataTasks;

            SecurityTypeGroups = (await typeGroupsQuery).Value;

            if ((await modelQuery).Value is SecurityType model)
                Model = model;
        }
        finally
        {
            IsLoading = Model is null || SecurityTypeGroups is null;
        }
    }

    private void Cancel_OnClick() => NavigationHelper.NavigateTo(FormatDetailUri(ModelId));

    private async Task Delete_OnClick()
    {
        var result = await RunCatchingModelUpdateException(Controller.DeleteAsync(Model));

        if (result is NoContentResult _)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    protected override async Task HandleValidSubmit()
    {
        var result = await RunCatchingModelUpdateException(Controller.UpdateAsync(ModelId, Model));

        int? id = result?.Value is null ? null : GetKeyValueOrDefault<int>(result.Value);

        ProcessDetailAtAction(id);
    }
}