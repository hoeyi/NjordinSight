@page "/bank-transaction-codes/create/{RequestGuid:guid}"

@inherits ModelDetail<BankTransactionCodeDto>

<PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <ModelPageHeader Header="@(PageTitle.CreateSingle())" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <AttributeEntryEditor TViewModelParent="BankCodeAttributeDtoCollection"
            TViewModelChild="BankTransactionCodeAttributeGrouping"
            TModel="BankTransactionCodeDto"
            TModelChild="BankTransactionCodeAttributeDto"
            OnCancelEditorClick="FormCancelClickHandler"
            OnValidFormSubmit="HandleValidSubmit"
            ModelDto="@Model.AttributeCollection"
            Mode="EditorMode.Add">
            <ViewModelCRUD>
                <BankTransactionCodeCRUD Disabled="false" ReadOnly="false" />
            </ViewModelCRUD>
            <ViewModelChildCRUD>
            </ViewModelChildCRUD>
        </AttributeEntryEditor>
    }
</ThemedComponent>

@code {
    [Parameter]
    public Guid RequestGuid { get; init; }

    private BankTransactionCodeDto ModelDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            Model = await HttpService.InitDefaultAsync();
        }
        finally
        {
            IsLoading = Model is null;
        }
    }

    private void FormCancelClickHandler() => NavigationHelper.NavigateTo(IndexUriRelativePath);

    protected override async Task HandleValidSubmit()
    {
        var response = await RunCatchingHttpRequestException(HttpService.PostAysnc(Model));

        if (!string.IsNullOrEmpty(response.AbsoluteUri))
            NavigationHelper.NavigateTo(response.AbsoluteUri);
    }
}