@page "/bank-transaction-codes/create/{RequestGuid:guid}"

@inherits ModelDetail<BankTransactionCode>

<PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <ModelPageHeader Header="@(PageTitle.CreateSingle())" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <AttributeEntryEditor TViewModelParent="BankTransactionCodeDto"
                          TViewModelChild="BankTransactionCodeAttributeGrouping"
                          TModel="BankTransactionCode"
                          TModelChild="BankTransactionCodeAttributeMemberEntry"
                          OnCancelEditorClick="CancelFormHandler"
                          OnValidFormSubmit="ValidFormSubmitHandler"
                          ModelDto="@ModelDto"
                          Mode="EditorMode.Add">
            <ViewModelCRUD>
                <BankTransactionCodeCRUD Disabled="false" ReadOnly="false" />
            </ViewModelCRUD>
            <ViewModelChildCRUD>
            </ViewModelChildCRUD>
        </AttributeEntryEditor>
    }
</ThemedComponent>

@code {
    [Parameter]
    public Guid RequestGuid { get; init; }

    private BankTransactionCodeDto ModelDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = await Controller.GetDefaultAsync();

            if (modelQuery.Value is BankTransactionCode model)
            {
                Model = model;
            }

            ModelDto = new(Model);
        }
        finally
        {
            IsLoading = Model is null || ModelDto is null;
        }
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        Model = ModelDto.ToEntity();

        var result = await RunCatchingModelUpdateException(Controller.CreateAsync(Model));

        ProcessCreatedAtAction(result?.Result as CreatedAtActionResult);
    }

    /// <summary>
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void CancelFormHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(IndexUriRelativePath);
}