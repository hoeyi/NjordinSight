@page "/market-indices/rates"

@inherits ModelPagedIndexEditor<MarketIndexPrice>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

<ThemedComponent>
    <ModelPageHeader ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.ReadMany())" />

    @if(SearchFields is null)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                <SearchInputTable TModel="MarketIndexPrice"
                    ComparisonOperators=@ComparisonOperators
                    ExpressionBuilder=@ExpressionBuilder
                    SearchFields=@SearchFields
                    OnSearchClick=@(async (args) => await SearchClicked(args))>
                </SearchInputTable>
            </Body>
        </ContentTile>
    }

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <ContentTile>
        <TitleAlignLeft>
            <Paginator Model="PaginationHelper"
                    IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
        </TitleAlignLeft>
        <Body>
            @if (IsLoading)
            {
                <LoadingSvg />
            }
            else
            {
                <DataGrid Data="@WorkingEntries" FootNote="@PaginationHelper.RecordReport">
                    <DataGridColumn Property=@nameof(MarketIndexPrice.MarketIndexId)
                                Caption=@(NameFor(x => x.MarketIndexId))>
                        <CellTemplate Context="model">
                            @model.MarketIndex?.IndexCode
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(MarketIndexPrice.PriceCode)
                        Caption=@(NameFor(x => x.PriceCode))>
                        <CellTemplate Context="model">
                            @GetPriceCodeDisplayValue(model.PriceCodeMember)
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(MarketIndexPrice.PriceDate)
                        Caption=@(NameFor(x => x.PriceDate))>
                            <CellTemplate Context="model">
                            @model.PriceDate.ToShortDateString()
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(MarketIndexPrice.Price)
                        Caption=@(NameFor(x => x.Price))>
                        <CellTemplate Context="model">
                            @model.Price
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            }
        </Body>
    </ContentTile>
</ThemedComponent>

@code {
    [Inject]
    protected new ICollectionController<MarketIndexPrice> Controller { get; set; }

    protected override MenuRoot CreateSectionNavigationMenu() => new()
    {
        IconKey = "reorder-four",
        Children = new()
        {
            new MenuItem()
            {
                IconKey = "pencil",
                Caption = string.Format(
                    Strings.Caption_EditMany, ModelNoun?.GetPlural()),
                UriRelativePath = $"{IndexUriRelativePath}/rates/edit"
            }
        }
    };

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        // Update the hidden reference to refer the same object to avoid null reference exception.
        base.Controller = Controller;

        await base.OnInitializedAsync();
    }

    private string GetPriceCodeDisplayValue(MarketIndexPriceCode? priceCodeMember)
    {
        if(priceCodeMember is null)
            return null;

        return NameFor<MarketIndexPriceCode>((MarketIndexPriceCode)priceCodeMember);
    }
}
