@page "/market-indices/rates/edit"

@inherits ModelListPage<MarketIndexPrice>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

<ThemedComponent>
    <ModelPageHeader ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.ReadMany())" />

    @if(SearchFields is null)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                <SearchInputTable TModel="MarketIndexPrice"
                    ComparisonOperators=@ComparisonOperators
                    ExpressionBuilder=@ExpressionBuilder
                    SearchFields=@SearchFields
                    OnSearchClick=@(async (args) => await SearchClicked(args))>
                </SearchInputTable>
            </Body>
        </ContentTile>
    }

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    @if(Context is null)
    {
        <LoadingSvg />
    }
    else
    {
        <EditForm width="100%" EditContext="@Context">
            <DataAnnotationsValidator />
            <ActionButtonMenu>
                <button class="form-control button"
                    @onclick="@(async (args) => await Submit_OnClick(context, args))">
                    @Strings.Caption_Button_Save
                </button>
                <button class="form-control button"
                    @onclick="(async (args) => await AddNewAsync(args))">
                    @Strings.Caption_CreateNew.Format(ModelNoun?.GetSingular())
                </button>
                <button class="form-control button" @onclick="Cancel_OnClick"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Cancel
                </button>
            </ActionButtonMenu>
            <ContentTile>
                <TitleAlignLeft>
                    <Paginator Model="PaginationHelper"
                            IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
                </TitleAlignLeft>
                <Body>
                    @if (IsLoading)
                    {
                        <LoadingSvg />
                    }
                    else
                    {
                        <ValidationSummary />
                        <DataGrid Data="@WorkingEntries" FootNote="@PaginationHelper.RecordReport">
                            <DataGridColumn Type="DataGridCellType.Button">
                                <CellEditTemplate Context="model">
                                    <ToolTip Text="@Strings.Caption_Button_Delete">
                                        <button class="form-control button icon" type="button"
                                            @onclick="async (args) => await DeleteAsync(args, model)">
                                            <IonIcon Name="close-circle" />
                                        </button>
                                    </ToolTip>
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(MarketIndexPrice.MarketIndexId)
                                        Type="DataGridCellType.Control"
                                        Caption=@(NameFor(x => x.MarketIndexId))>
                                <CellEditTemplate Context="model">
                                    <InputSelect class="form-control"
                                        @bind-Value="@model.MarketIndexId">
                                        @foreach (var lookup in MarketIndexLookup)
                                        {
                                            <option value=@lookup.Key>@lookup.Display</option>
                                        }
                                    </InputSelect>
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(MarketIndexPrice.PriceCode)
                                        Type="DataGridCellType.Control"
                                        Caption=@(NameFor(x => x.PriceCode))>
                                <CellEditTemplate Context="model">
                                    <InputSelect class="form-control"
                                        @bind-Value="@model.PriceCode">
                                        @foreach (var lookup in PriceCodeLookup)
                                        {
                                            <option value=@lookup.Key>@lookup.Display</option>
                                        }
                                    </InputSelect>
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(MarketIndexPrice.PriceDate)
                                        Type="DataGridCellType.Control"
                                        Caption=@(NameFor(x => x.PriceDate))>
                                <CellEditTemplate Context="model">
                                    <InputDate class="form-control" @bind-Value="@model.PriceDate" />
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Property=@nameof(MarketIndexPrice.Price)
                                        Type="DataGridCellType.Control"
                                        Caption=@(NameFor(x => x.Price))>
                                <CellEditTemplate Context="model">
                                    <InputNumber class="form-control" @bind-Value="@model.Price" />
                                </CellEditTemplate>
                            </DataGridColumn>
                        </DataGrid>
                    }
                </Body>
            </ContentTile>
        </EditForm>
    }
</ThemedComponent>

@code {

    private IEnumerable<LookupModel<string, string>> PriceCodeLookup { get; set; }

    private IEnumerable<LookupModel<int, string>> MarketIndexLookup {get; set;}

    [Inject]
    protected new ICollectionController<MarketIndexPrice> Controller { get; init; }

    /// <inheritdoc />
    protected override bool GetLoadingState() => 
        WorkingEntries is null
        || Context is null
        || MarketIndexLookup is null
        || PriceCodeLookup is null;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        // Update the hidden reference to refer the same object to avoid null reference exception.
        base.Controller = Controller;
        
        CheckNullParameters();

        IsLoading = true;

        try
        {
            var marketPriceTask = Controller.SelectAsync(
                predicate: SearchService.CurrentExpression,
                pageNumber: PaginationHelper.PageIndex,
                pageSize: PaginationHelper.PageSize);

            var indexDtosTask = Controller.ReferenceQueries.GetMarketIndexDTOsAsync();

            var priceCodeDtoTask = Controller.ReferenceQueries
                .SelectDTOsFromEnum<MarketIndexPriceCode, string, string>(
                    predicate: x => true,
                    key: x => x.ConvertToStringCode(),
                    display: x => NameFor<MarketIndexPriceCode>(x),
                    placeHolderDelegate: () => new LookupModel<string, string>()
                    {
                        Key = string.Empty,
                        Display = Resources.Strings.Caption_InputSelect_Placeholder
                    });

            await InitializationTasksAsync(marketPriceTask, indexDtosTask, priceCodeDtoTask);

            var marketPriceResult = await marketPriceTask;
            var indexDtoResult = await indexDtosTask;
            var priceCodeDtoResult = await priceCodeDtoTask;

            WorkingEntries = marketPriceResult.Value.Item1.ToList();
            MarketIndexLookup = indexDtoResult.Value;
            PriceCodeLookup = priceCodeDtoResult.Value;

            Context = new(WorkingEntries);

            PaginationHelper.TotalItemCount = marketPriceResult.Value.Item2.ItemCount;
            PaginationHelper.ItemCount = WorkingEntries.Count;
        }
        finally
        {
            IsLoading = GetLoadingState();
        }
    }

    /// <inheritdoc/>
    protected override void Cancel_OnClick() => 
        NavigationHelper.NavigateTo($"{IndexUriRelativePath}/rates");
}
