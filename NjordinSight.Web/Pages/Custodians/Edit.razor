@page "/custodians/edit"

@inherits ModelListPage<AccountCustodian>

<ThemedComponent>
    <PageTitle>@(PageTitle.UpdateMany(string.Empty).AsPageTitle())</PageTitle>
    
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {   
        <ModelPageHeader Header="@(PageTitle.UpdateMany(string.Empty))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <EditForm width="100%" EditContext="@Context" >
            <DataAnnotationsValidator/>
            <ActionButtonMenu>
                <button class="form-control button"
                    @onclick="@(async (args) => await Submit_OnClick(context, args))">
                    @Strings.Caption_Button_Save
                </button>
                <button class="form-control button" 
                    @onclick="(async (args) => await AddNewAsync(args))">
                    @Strings.Caption_CreateNew.Format(ModelNoun?.GetSingular())
                </button>
                <button class="form-control button" @onclick="Cancel_OnClick"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Cancel
                </button>
            </ActionButtonMenu>
            <ContentTile>
                <Body>
                    <DataGrid Data="@Entries">
                        <DataGridColumn Type="DataGridCellType.Button">
                            <CellEditTemplate Context="model">
                                <ToolTip Text="@Strings.Caption_Button_Delete">
                                    <button class="form-control button icon" type="button"
                                        @onclick="async (args) => await DeleteAsync(args, model)">
                                        <IonIcon Name="close-circle" />
                                    </button>
                                </ToolTip>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property=@nameof(AccountCustodian.CustodianCode)
                            Caption=@(NameFor(x => x.CustodianCode))>
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value=model.CustodianCode />
                                <ValidationMessage For=@(()=> model.CustodianCode) />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control" 
                            Property=@nameof(AccountCustodian.DisplayName)
                            Caption=@(NameFor(x => x.DisplayName))>
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value=model.DisplayName />
                                <ValidationMessage For=@(()=> model.DisplayName) />
                            </CellEditTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </Body>
            </ContentTile>
        </EditForm>
    }
</ThemedComponent>

@code{
    [Inject]
    protected new ICollectionController<AccountCustodian> Controller { get; init; }

    protected override async Task OnInitializedAsync()
    {
        base.Controller = Controller;

        await base.OnInitializedAsync();
    }
}
