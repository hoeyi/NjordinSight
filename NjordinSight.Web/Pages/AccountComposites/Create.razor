@page "/composites/create/{RequestGuid:guid}"

@inherits ModelDetail<AccountComposite>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.CreateSingle())" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic"/>
        </CascadingValue>

        <CascadingValue Value="@ViewModel">
            <EditForm class="model-editor"
                  Model="@ViewModel"
                  OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ContentTile>
                    <Body>
                        <ActionButtonMenu>
                            <button type="submit" class="form-control button">
                                @Strings.Caption_Button_Save
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="Cancel_OnClick"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Cancel
                            </button>
                        </ActionButtonMenu>
                        <AccountCompositeCRUD Disabled="false" ReadOnly="false" />
                    </Body>
                </ContentTile>
            </EditForm>
            <EditForm Model="@ViewModel">
                <ContentTile>
                    <Body>
                        <AccountCompositeMembersCRUD Accounts="@AccountDtos" Disabled="false" ReadOnly="false" />
                    </Body>
                </ContentTile>
            </EditForm>
        </CascadingValue>
    }
</ThemedComponent>

@code {
    [Parameter]
    public Guid RequestGuid { get; init; }

    private IEnumerable<LookupModel<int, string>> AccountDtos { get; set; }

    private AccountCompositeDto ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var compositeQuery = Controller.GetDefaultAsync();
            var accountsQuery = Controller.ReferenceQueries.GetAccountDTOsAsync();

            Task dataTask = Task.WhenAll(compositeQuery, accountsQuery);

            Model = (await compositeQuery).Value;
            AccountDtos = (await accountsQuery).Value;

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Model is null || AccountDtos is null || ViewModel is null;
        }
    }

    private void Cancel_OnClick() => NavigationHelper.NavigateTo(IndexUriRelativePath);

    protected override async Task HandleValidSubmit()
    {
        Model = ViewModel.ToEntity();

        var result = await RunCatchingModelUpdateException(Controller.CreateAsync(Model));

        ProcessCreatedAtAction(result?.Result as CreatedAtActionResult);
    }
}
