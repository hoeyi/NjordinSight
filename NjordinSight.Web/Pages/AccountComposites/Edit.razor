@page "/composites/{ModelId:int}/edit"

@inherits ModelDetail<AccountComposite>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateSingle(Model.AccountCompositeCode).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader 
            ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.UpdateSingle(Model.AccountCompositeCode))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic"/>
        </CascadingValue>

        <CascadingValue Value="@ModelDto">
            <EditForm class="model-editor" 
                Model="@ModelDto" 
                OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ContentTile>
                    <Body>
                        <ActionButtonMenu>
                            <button type="submit" class="form-control button">
                                @Strings.Caption_Button_Save
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="(async (args) => await Delete_OnClick())"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Delete
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="Cancel_OnClick"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Cancel
                            </button>
                        </ActionButtonMenu>
                        <AccountCompositeCRUD Disabled="false" ReadOnly="false" />
                    </Body>
                </ContentTile>
            </EditForm>
            <EditForm Model="@ModelDto">
                <ContentTile>
                    <Body>
                        <AccountCompositeMembersCRUD 
                            Accounts="@Accounts" Disabled="false" ReadOnly="false" />
                    </Body>
                </ContentTile>
            </EditForm>
        </CascadingValue>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<LookupModel<int, string>> Accounts { get; set; }

    private AccountCompositeDto ModelDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var compositeQuery = Controller.ReadAsync(ModelId);
            var accountsQuery = Controller.ReferenceQueries.GetAccountDTOsAsync();

            Task dataTask = Task.WhenAll(compositeQuery, accountsQuery);

            Model = (await compositeQuery).Value;
            Accounts = (await accountsQuery).Value;

            ModelDto = new(Model);
        }
        finally
        {
            IsLoading = Model is null || Accounts is null || ModelDto is null;
        }
    }

    private void Cancel_OnClick() => NavigationHelper.NavigateTo(FormatDetailUri(ModelId));

    private async Task Delete_OnClick()
    {
        var result = await RunCatchingModelUpdateException(Controller.DeleteAsync(Model));

        if (result is NoContentResult _)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    protected override async Task HandleValidSubmit()
    {
        Model = ModelDto.ToEntity();

        var result = await RunCatchingModelUpdateException(Controller.UpdateAsync(ModelId, Model));

        int? id = result?.Value is null ? null : GetKeyValueOrDefault<int>(result.Value);

        ProcessDetailAtAction(id);
    }
}
