@page "/composites/{ModelId:int}/edit"

@inherits ModelDetail<AccountComposite>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateSingle(Model.AccountCompositeCode).AsPageTitle())</PageTitle>

        <ModelPageHeader Header="@(PageTitle.UpdateSingle(Model.AccountCompositeCode))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic"/>
        </CascadingValue>

        <CascadingValue Value="@ModelDto">
            <AttributeEntryEditor TViewModelParent="AccountAttributesDto"
                TViewModelChild="AccountAttributeGrouping"
                TModel="AccountObject"
                TModelChild="AccountAttributeMemberEntry"
                OnCancelEditorClick="FormCancelClickHandler"
                OnDeleteModelClick="FormDeleteClickHandler"
                OnValidFormSubmit="ValidFormSubmitHandler"
                ModelDto="@ModelDto.AttributeViewModel"
                Mode="EditorMode.Edit">
                <ViewModelCRUD>
                    <AccountCompositeCRUD Disabled="false" ReadOnly="false" />
                </ViewModelCRUD>
                <ViewModelChildCRUD>
                    <AccountAttributesCRUD Disabled="false" ReadOnly="false" />
                </ViewModelChildCRUD>
            </AttributeEntryEditor>
            <ContentTile>
                <Body>
                    <EditForm Model="@ModelDto">
                        <AccountCompositeMembersCRUD Accounts="@Accounts" Disabled="false" ReadOnly="false" />
                    </EditForm>
                </Body>
            </ContentTile>
        </CascadingValue>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<LookupModel<int, string>> Accounts { get; set; }

    private AccountCompositeDto ModelDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var compositeQuery = Controller.ReadAsync(ModelId);
            var accountsQuery = Controller.ReferenceQueries.GetAccountDTOsAsync();

            var dataTask = Task.WhenAll(compositeQuery, accountsQuery);

            Model = (await compositeQuery).Value;
            Accounts = (await accountsQuery).Value;

            ModelDto = new(Model);
        }
        finally
        {
            IsLoading = Model is null || Accounts is null || ModelDto is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task FormDeleteClickHandler(MouseEventArgs args)
    {
        var result = await RunCatchingModelUpdateException(Controller.DeleteAsync(Model));

        if (result is NoContentResult _)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var result = await RunCatchingModelUpdateException(Controller.UpdateAsync(ModelId, Model));

        int? id = result?.Value is null ? null : GetKeyValueOrDefault<int>(result.Value);

        ProcessDetailAtAction(id);
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(Model.AccountCompositeId));
}
