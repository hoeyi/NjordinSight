@page "/broker-transaction-codes/{ModelId:int}/detail"

@inherits ModelDetail<BrokerTransactionCode>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle(Model.DisplayName).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu"
                         Header="@(PageTitle.ReadSingle(Model.DisplayName))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <ContentTile>
            <Body>
                <CascadingValue Value="@ModelDto">
                    <EditForm class="model-editor" Model="@ModelDto">
                        <BrokerTransactionCodeCRUD Disabled="false" ReadOnly="true" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
        @foreach (var entry in ModelDto.CurrentEntries.OrderBy(g =>
            g.AttributeMember.Attribute.DisplayName))
        {
            <ContentTile>
                <Body>
                    <EditForm Model="entry">
                        <ModelForm TModelDto="BrokerTransactionCodeAttributeMemberEntry">
                            <ModelFormLineItem LabelOverride="@entry.AttributeMember.Attribute.DisplayName"
                                       ForMember="@(() => entry.AttributeMember.DisplayName)">
                                <div class="form-control">
                                    @entry.AttributeMember.DisplayName
                                </div>
                            </ModelFormLineItem>
                            <ModelFormLineItem ForMember="@(() => entry.EffectiveDate)">
                                <div class="form-control">
                                    @entry.EffectiveDate.ToShortDateString()
                                </div>
                            </ModelFormLineItem>
                        </ModelForm>
                    </EditForm>
                </Body>
            </ContentTile>
        }
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    private BrokerTransactionCodeDto ModelDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;


        try
        {
            var modelQuery = Controller.ReadAsync(ModelId);

            if ((await modelQuery).Value is BrokerTransactionCode model)
                Model = model;

            ActionMenu = new()
                {
                    IconKey = "reorder-four",
                    Children = new()
                    {
                        // Add return to index button.
                        { 0, new MenuItem()
                            {
                                IconKey = "caret-back-circle",
                                Caption = string.Format(
                                    Strings.Caption_NavigateBackTo,
                                    ModelMetadata
                                        .GetAttribute<BrokerTransactionCode, NounAttribute>()
                                        ?.GetPlural()),
                                UriStem = $"{IndexUriRelativePath}"
                            }
                        },
                        // Add edit button.
                        { 1, new MenuItem()
                            {
                                IconKey = "pencil",
                                Caption = string.Format(
                                    Strings.Caption_EditSingle, ModelNoun?.GetSingular()),
                                UriStem = FormatEditUri(GetKeyValueOrDefault<int>(Model))
                            }
                        }
                    }
                };

            ModelDto = new(Model);
        }
        finally
        {
            IsLoading = Model is null || ModelDto is null;
        }
    }
}