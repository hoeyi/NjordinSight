@page "/broker-transaction-codes/create/{RequestGuid:guid}"

@inherits ModelDetail<BrokerTransactionCode>

<PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <ModelPageMenuHeader ActionMenu="@ActionMenu"
                         Header="@(PageTitle.CreateSingle())" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <AttributeEntryEditor TViewModelParent="BrokerTransactionCodeDto"
                          TViewModelChild="BrokerTransactionCodeAttributeGrouping"
                          TModel="BrokerTransactionCode"
                          TModelChild="BrokerTransactionCodeAttributeMemberEntry"
                          OnCancelEditorClick="CancelFormHandler"
                          OnValidFormSubmit="ValidFormSubmitHandler"
                          ViewModel="@ViewModel"
                          Mode="EditorMode.Add">
            <ViewModelCRUD>
                <BrokerTransactionCodeCRUD Disabled="false" ReadOnly="false" />
            </ViewModelCRUD>
            <ViewModelChildCRUD>
            </ViewModelChildCRUD>
        </AttributeEntryEditor>
    }
</ThemedComponent>

@code {
    /// <summary>
    /// Gets or sets the unique identifier for the model creation request.
    /// </summary>
    [Parameter]
    public Guid RequestGuid { get; init; }

    /// <summary>
    /// Gets or sets the <see cref="BrokerTransactionCodeDto" /> worked by this page.
    /// </summary>
    private BrokerTransactionCodeDto ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = await Controller.GetDefaultAsync();

            if (modelQuery.Value is BrokerTransactionCode model)
            {
                Model = model;
            }

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Model is null || ViewModel is null;
        }
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        Model = ViewModel.ToEntity();

        var result = await RunCatchingModelUpdateException(Controller.CreateAsync(Model));

        ProcessCreatedAtAction(result?.Result as CreatedAtActionResult);
    }

    /// <summary>
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void CancelFormHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(IndexUriRelativePath);
}