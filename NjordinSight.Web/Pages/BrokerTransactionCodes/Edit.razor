@page "/broker-transaction-codes/{ModelId:int}/edit"

@inherits ModelDetail<BrokerTransactionCode>

<PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <ModelPageMenuHeader ActionMenu="@SectionNavigationMenu"
                        Header="@(PageTitle.CreateSingle())" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <AttributeEntryEditor TViewModelParent="BrokerTransactionCodeDto"
                        TViewModelChild="BrokerTransactionCodeAttributeGrouping"
                        TModel="BrokerTransactionCode"
                        TModelChild="BrokerTransactionCodeAttributeMemberEntry"
                        OnCancelEditorClick="FormCancelClickHandler"
                        OnDeleteModelClick="FormDeleteClickHandler"
                        OnValidFormSubmit="ValidFormSubmitHandler"
                        ModelDto="@ModelDto"
                        Mode="EditorMode.Edit">
            <ViewModelCRUD>
                <BrokerTransactionCodeCRUD Disabled="false" ReadOnly="false" />
            </ViewModelCRUD>
            <ViewModelChildCRUD>
                <BrokerTransactionCodeAttributesCRUD Disabled="false" ReadOnly="false" />
            </ViewModelChildCRUD>
        </AttributeEntryEditor>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    /// <summary>
    /// Gets or sets the <see cref="BrokerTransactionCodeDto" /> worked by this page.
    /// </summary>
    private BrokerTransactionCodeDto ModelDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = await Controller.ReadAsync(ModelId);

            if (modelQuery.Value is BrokerTransactionCode model)
            {
                Model = model;
            }

            ModelDto = new(Model);
        }
        finally
        {
            IsLoading = Model is null || ModelDto is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task FormDeleteClickHandler(MouseEventArgs args)
    {
        var result = await RunCatchingModelUpdateException(Controller.DeleteAsync(Model));

        if (result is NoContentResult _)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var result = await RunCatchingModelUpdateException(Controller.UpdateAsync(ModelId, Model));

        int? id = result?.Value is null ? null : GetKeyValueOrDefault<int>(result.Value);

        ProcessDetailAtAction(id);
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(Model.TransactionCodeId));
}