@page "/broker-transaction-codes/{ModelId:int}/edit"

@inherits ModelDetail<BrokerTransactionCode>

<PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

        <ThemedComponent>
        @if (IsLoading)
    {
            <LoadingSvg />
    }
    else
    {
            <ModelPageMenuHeader ActionMenu="@ActionMenu"
                         Header="@(PageTitle.CreateSingle())" />

            <AttributeEntryEditor TViewModelParent="BrokerTransactionCodeDto"
                          TViewModelChild="BrokerTransactionCodeAttributeGrouping"
                          TModel="BrokerTransactionCode"
                          TModelChild="BrokerTransactionCodeAttributeMemberEntry"
                          OnCancelEditorClick="CancelEditorHandler"
                          OnDeleteModelClick="DeleteModelHandler"
                          OnValidFormSubmit="ValidFormSubmitHandler"
                          ViewModel="@ViewModel"
                          Mode="EditorMode.Edit">
                <ViewModelCRUD>
                    <BrokerTransactionCodeCRUD Disabled="false" ReadOnly="false" />
                </ViewModelCRUD>
                <ViewModelChildCRUD>
                    <BrokerTransactionCodeAttributesCRUD Disabled="false" ReadOnly="false" />
                </ViewModelChildCRUD>
            </AttributeEntryEditor>
    }
</ThemedComponent>

@code {
    /// <summary>
    /// Gets or sets the identifier for the <see cref="BankTransactionCode" /> worked using this
    /// page.
    /// </summary>
    [Parameter]
    public int ModelId { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="BrokerTransactionCodeDto" /> worked by this page.
    /// </summary>
    private BrokerTransactionCodeDto ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = await Controller.ReadAsync(ModelId);

            if (modelQuery.Value is BrokerTransactionCode model)
            {
                Model = model;
            }

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Model is null || ViewModel is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task DeleteModelHandler(MouseEventArgs args)
    {
        var result = await Controller.DeleteAsync(Model);

        if (result is NoContentResult _)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        Model = ViewModel.ToEntity();

        var result = await Controller.UpdateAsync(Model.TransactionCodeId, Model);

        if (Model is not null)
            NavigationHelper.NavigateTo(FormatDetailUri(Model.TransactionCodeId));
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void CancelEditorHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(Model.TransactionCodeId));
}