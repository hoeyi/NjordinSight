@page "/accounts/{ModelId:int}/edit/wallets"

@inherits ModelListPage<AccountWallet>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {   
        <PageTitle>@(PageTitle.UpdateSingle(ParentAccount.AccountCode).AsPageTitle())</PageTitle>

        <ModelPageHeader Header="@(PageTitle.UpdateMany(ParentAccount.AccountCode))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <EditForm width="100%" Model="@Wallets">
            <DataAnnotationsValidator/>
            <ActionButtonMenu>
                <button class="form-control button" 
                    @onclick="@(async (args) => await Submit_OnClick(context, args))">
                    @Strings.Caption_Button_Save
                </button>
                <button class="form-control button" 
                    @onclick=@(async (args) => await AddNewAsync(args))>
                    @Strings.Caption_CreateNew.Format(ModelNoun?.GetSingular())
                </button>
                <button class="form-control button" @onclick="Cancel_OnClick"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Cancel
                </button>
            </ActionButtonMenu>
            <ContentTile>
                <Body>
                    <ValidationSummary />
                    <DataGrid Data="@Wallets">
                        <DataGridColumn Property=@nameof(AccountWallet.DenominationSecurityId)
                                    Caption=@(ModelMetadata.NameFor<AccountWallet>(x => x.DenominationSecurityId))
                                        width="20%">
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control"
                                         @bind-Value="@model.DenominationSecurityId">
                                    @foreach (var security in DenominationSecurities)
                                    {
                                        <option value=@security.Key>@security.Display</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For=@(()=> model.DenominationSecurityId) />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property=@nameof(AccountWallet.AddressCode)
                                    Caption=@(ModelMetadata.NameFor<AccountWallet>(x => x.AddressCode))
                                        width="45%">
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value="@model.AddressCode" />
                                <ValidationMessage For=@(()=> model.AddressCode) />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property=@nameof(AccountWallet.AddressTag)
                                    Caption=@(ModelMetadata.NameFor<AccountWallet>(x => x.AddressTag))
                                        width="35%">
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value="@model.AddressTag" />
                                <ValidationMessage For=@(()=> model.AddressTag) />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Button">
                            <CellEditTemplate Context="model">
                                <ToolTip Text="@Strings.Caption_Button_Delete">
                                    <button class="form-control button icon"
                                            type="button"
                                        @onclick="async (args) => await DeleteAsync(args, model)">
                                        <IonIcon Name="close-circle" />
                                    </button>
                                </ToolTip>
                            </CellEditTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </Body>
            </ContentTile>
        </EditForm>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    private IList<AccountWallet> Wallets { get; set; }

    private IEnumerable<LookupModel<int, string>> DenominationSecurities { get; set; }

    private Account ParentAccount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            ParentAccount = (
                await Controller.ReferenceQueries
                    .GetSingleAsync<Account>(
                        predicate: a => a.AccountId == ModelId,
                        path: a => a.AccountNavigation)).Value;

            var initResult = await Controller.ForParent(ParentAccount.AccountId);

            if (initResult is not OkResult)
                throw new InvalidOperationException();

            var denominationDtosTask = Controller.ReferenceQueries
                .GetCryptocurrencyDTOsAsync();
            var walletsTask = Controller.SelectAllAsync();

            var dataTasks = Task.WhenAll(denominationDtosTask, walletsTask);
            await dataTasks;

            if (dataTasks.Status == TaskStatus.RanToCompletion)
            {
                Wallets = (await walletsTask).Value;
                DenominationSecurities = (await denominationDtosTask).Value;

                if (!Wallets.Any())
                {
                    await AddNewAsync(args: null);
                }
            }
            else
            {
                throw dataTasks.Exception.Flatten();
            }

        }
        finally
        {
            IsLoading = Wallets is null || ParentAccount is null || DenominationSecurities is null;
        }
    }
    
    /// <inheritdoc/>
    protected override void Cancel_OnClick() => 
        NavigationHelper.NavigateTo($"{IndexUriRelativePath}/{ModelId}/detail");
}