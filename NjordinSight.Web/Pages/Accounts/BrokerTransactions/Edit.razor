@page "/accounts/{ModelId:int}/edit/broker-transactions"

@inherits ModelPagedIndexEditor<BrokerTransaction>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@PageTitle.UpdateMany(ParentAccount.AccountCode).AsPageTitle()</PageTitle>

        <ModelPageHeader Header="@(PageTitle.UpdateMany(ParentAccount.AccountCode))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <EditForm width="100%" Model="@WorkingEntries">
            <DataAnnotationsValidator />
            <ActionButtonMenu>
                <button class="form-control button"
                    @onclick="@(async (args) => await Submit_OnClick(context, args))">
                    @Strings.Caption_Button_Save
                </button>
                <button class="form-control button"
                    @onclick=@(async (args) => await AddNewAsync(args))>
                    @Strings.Caption_CreateNew.Format(ModelNoun?.GetSingular())
                </button>
                <button class="form-control button" @onclick="CancelEditor_OnClick"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Cancel
                </button>
            </ActionButtonMenu>
            <ContentTile>
                <Body>
                    <ValidationSummary />
                    <DataGrid Data="@WorkingEntries">
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransaction.TransactionCodeId)"
                            Caption="@NameFor(x => x.TransactionCodeId)">
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control"
                                    ValueExpression="@(() => model.TransactionCodeId)"
                                    Value="@model.TransactionCodeId"
                                    ValueChanged="@(async (int id) => 
                                        await TransactionCode_OnValueChanged(model, id))">
                                    @foreach (var lookup in TransactionCodes)
                                    {
                                        <option value=@lookup.Key>@lookup.Display</option>
                                    }
                                </InputSelect>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransaction.SecurityId)"
                            Caption="@NameFor(x => x.SecurityId)">
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control"
                                    @bind-Value="@model.SecurityId">
                                    @foreach (var lookup in TransactableSecurities)
                                    {
                                        <option value=@lookup.Key>@lookup.Display</option>
                                    }
                                </InputSelect>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransaction.TradeDate)"
                            Caption="@(NameFor(x => x.TradeDate))">
                            <CellEditTemplate Context="model">
                                <InputDate class="form-control" @bind-Value="@model.TradeDate" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransaction.SettleDate)"
                            Caption="@(NameFor(x => x.SettleDate))">
                            <CellEditTemplate Context="model">
                                <InputDate class="form-control" @bind-Value="@model.SettleDate" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                                    Property="@nameof(BrokerTransaction.AcquisitionDate)"
                                    Caption="@(NameFor(x => x.AcquisitionDate))">
                            <CellEditTemplate Context="model">
                                <InputDate class="form-control" @bind-Value="@model.AcquisitionDate" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransaction.Quantity)"
                            Caption="@(NameFor(x => x.Quantity))">
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="@model.Quantity" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransaction.Amount)"
                                    Caption="@(NameFor(x => x.Amount))">
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="@model.Amount" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                                    Property="@nameof(BrokerTransaction.Fee)"
                                    Caption="@(NameFor(x => x.Fee))">
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="@model.Fee" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                                    Property="@nameof(BrokerTransaction.Withholding)"
                                    Caption="@(NameFor(x => x.Withholding))">
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="@model.Withholding" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransaction.DepSecurityId)"
                            Caption="@NameFor(x => x.DepSecurityId)">
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control"
                                    @bind-Value="@model.DepSecurityId">
                                    @foreach (var security in DepositSecurities)
                                    {
                                        <option value=@security.Key>@security.Display</option>
                                    }
                                </InputSelect>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                                    Property="@nameof(BrokerTransaction.TransactionId)"
                                    Caption="@(NameFor(x => x.TransactionId))">
                            <CellTemplate Context="model">
                                <div class="form-control">@model.TransactionId</div>
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                                    Property="@nameof(BrokerTransaction.TaxLotId)"
                                    Caption="@(NameFor(x => x.TaxLotId))">
                            <CellTemplate Context="model">
                                <div class="form-control">@model.TaxLotId</div>
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Button">
                            <CellEditTemplate Context="model">
                                <ToolTip Text="@Strings.Caption_Button_Delete">
                                    <button class="form-control button icon" type="button"
                                        @onclick="async (args) => await DeleteRecord(args, model)">
                                        <IonIcon Name="close-circle" />
                                    </button>
                                </ToolTip>
                            </CellEditTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </Body>
            </ContentTile>
        </EditForm>
        if (ShowAllocationInstructionTable)
        {
            <CascadingValue Value="@CurrentAllocationInstruction">
                <Modal TModelDto="AllocationInstructionTable"
                    DialogOptions="DialogResult.OK | DialogResult.Cancel"
                    OnClose="@(async (args) => await PostAllocationInstructionAsync(args))" 
                    ReadOnly="false" >
                    <BrokerAllocationInstructionCRUD />
                </Modal>
            </CascadingValue>
        }
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<SecurityDtoBase> DepositSecurities { get; set; }

    private IEnumerable<BrokerTransactionCodeDtoBase> TransactionCodes { get; set; }

    private IEnumerable<SecurityDtoBase> TransactableSecurities { get; set; }

    private Account ParentAccount { get; set; }

    private bool ShowAllocationInstructionTable => CurrentAllocationInstruction is not null;

    private AllocationInstructionTable CurrentAllocationInstruction { get; set; }

    /// <summary>
    /// Gets of sets the <see cref="IBrokerTransactionBLL" /> helper class for this page.
    /// </summary>
    [Inject]
    protected IBrokerTransactionBLL TransactionBLL { get; init; }

    [Inject]
    protected IReferenceDataService ReferenceData { get; init; }

    /// <inheritdoc/>
    protected override bool PageDataIsLoading() =>
        ParentAccount is null
        || DepositSecurities is null
        || TransactionCodes is null
        || TransactableSecurities is null;

    /// <inheritdoc/>
        protected virtual async Task RefreshResultsAsync(
            IQueryParameter<BrokerTransactionDto> parameter, int pageNumber, int pageSize)
        {
            if (WorkingEntries?.HasChanges ?? false)
            {
                var discardConfirmed = await ConfirmDiscardChangesAsync();

                if (!discardConfirmed)
                    return;
            }

            var responseObject = await HttpService.SelectAsync(
                queryParameter: parameter,
                pageNumber: PaginationHelper.PageIndex,
                pageSize: PaginationHelper.PageSize);

            WorkingEntries = new TrackingEnumerable<TModelDto>(responseObject.Item1.ToList());

            Context = new(WorkingEntries);

            PaginationHelper.TotalItemCount = responseObject.Item2.ItemCount;
            PaginationHelper.ItemCount = WorkingEntries.Count;
        }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        // Update the hidden reference to refer the same object to avoid null reference exception.
        base.Controller = TransactionBLL;

        CheckNullParameters();

        IsLoading = true;

        try
        {
            var securityDTOsTask = ReferenceData.GetTransactableSecurities(
                pageNumber: 1, pageSize: int.MaxValue);

            var depositySecurityDTOsTask = ReferenceData.GetDepositSecuritiesAsync(
                pageNumber: 1, pageSize: int.MaxValue);

            var transactionCodeDTOsTask = ReferenceData.GetBrokerCodesAsync(
                pageNumber: 1, pageSize: int.MaxValue);

            var parentAccountTask = HttpService.GetAsync<AccountDto>(id: ModelId);

            var loadRecordsTask = HttpService.SelectAsync(
                queryParameter: new ParameterDto<BrokerTransactionDto>()
                    {
                        MemberName = nameof(BrokerTransactionDto.AccountId),
                        Operator = ComparisonOperator.EqualTo,
                        Value = ModelId.ToString()
                    },
                pageNumber: 1,
                pageSize: int.MaxValue);

            await InitializationTasksAsync(
                securityDTOsTask,
                depositySecurityDTOsTask,
                transactionCodeDTOsTask,
                parentAccountTask,
                loadRecordsTask);

            var securityDtoResult = await securityDTOsTask;
            var depSecurityDtoResult = await depositySecurityDTOsTask;
            var trxCodeDtoResult = await transactionCodeDTOsTask;
            var parentAccountDtoResult = await parentAccountTask;
            var loadRecordsResult = await loadRecordsTask;

            TransactableSecurities = securityDtoResult.Value;
            DepositSecurities = depSecurityDtoResult.Value;
            TransactionCodes = trxCodeDtoResult.Value;
            ParentAccount = parentAccountDtoResult.Value;
            WorkingEntries = loadRecordsResult.ToList();
        }
        finally
        {
            IsLoading = GetLoadingState();
        }
    }

    protected override async Task AddNewAsync(MouseEventArgs args)
    {
        // TODO: Do something with MouseEventArgs?
        var result = await TransactionBLL.AddNewAsync();
        if (result.Value is BrokerTransaction model)
        {
            WorkingEntries.Insert(0, model);
        }
        else
        {
            // TODO: Log error here with useful message.
            throw new InvalidOperationException();
        }
    }

    protected override void CancelEditor_OnClick() => 
        NavigationHelper.NavigateTo(
            $"{IndexUriRelativePath}/{ModelId}/detail/broker-transactions");

    private async Task TransactionCode_OnValueChanged(BrokerTransaction model, int newId)
    {
        ErrorMessage = null;

        void processResponse(ITransactionUpdateResponse response)
        {
            switch (response.UpdateStatus)
            {
                case TransactionUpdateStatus.Completed:
                    break;
                case TransactionUpdateStatus.PendingLotClosure:
                    var contentResponse = response as ITransactionUpdateResponse<AllocationInstructionTable>;
                    CurrentAllocationInstruction = contentResponse.ResponseObject;
                    break;
                case TransactionUpdateStatus.Faulted:
                    var errorResponse = response as ITransactionUpdateResponse<InvalidOperationException>;
                    ErrorMessage = errorResponse.ResponseObject.Message;
                    break;
            }
        };

        var actionResult = await TransactionBLL.UpdateTransactionCodeAsync(model, newId);
        if (actionResult is ObjectResult result &&
            result.Value is ITransactionUpdateResponse response)
            processResponse(response);
    }

    /// <summary>
    /// Handles an event representing successful submission of an allocation instruction object.
    /// </summary>
    /// <param name="modalEventArgs"></param>
    /// <returns></returns>
    private async Task PostAllocationInstructionAsync(
        ModalEventArgs<AllocationInstructionTable> modalEventArgs)
    {
        // Clear the reference to the allocation instruction table now that a valid
        // response is received.
        CurrentAllocationInstruction = null;

        // Handle valid submission event
        if(modalEventArgs.Result == DialogResult.OK)
        {
            var postTask = TransactionBLL.PostAllocationInstructionAsync(modalEventArgs.Model);

            await postTask;

            if (postTask.Result is AcceptedResult)
            {
                StateHasChanged();
                return;
            }
        }
        // TODO: Add handling for the cancel event of posting allocation instructions.
    }
}