@page "/accounts/{ModelId:int}/edit/broker-transactions"

@inherits ModelPagedIndexEditor<BrokerTransactionDto>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@PageTitle.UpdateMany(ParentAccount.ShortCode).AsPageTitle()</PageTitle>

        <ModelPageHeader Header="@(PageTitle.UpdateMany(ParentAccount.ShortCode))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <EditForm width="100%" Model="@WorkingEntries">
            <DataAnnotationsValidator />
            <ActionButtonMenu>
                <button class="form-control button"
                    @onclick="@(async (args) => await Submit_OnClick(context, args))">
                    @Strings.Caption_Button_Save
                </button>
                <button class="form-control button"
                    @onclick=@((args) => AddNew(args))>
                    @Strings.Caption_CreateNew.Format(ModelNoun?.GetSingular())
                </button>
                <button class="form-control button" @onclick="CancelEditor_OnClick"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Cancel
                </button>
            </ActionButtonMenu>
            <ContentTile>
                <Body>
                    <ValidationSummary />
                    <DataGrid Data="@WorkingEntries">
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransactionDto.TransactionCodeId)"
                            Caption="@NameFor(x => x.TransactionCodeId)">
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control"
                                    ValueExpression="@(() => model.TransactionCodeId)"
                                    Value="@model.TransactionCodeId"
                                    ValueChanged="@((int id) => TransactionCode_OnValueChanged(model, id))">
                                    @foreach (var lookup in TransactionCodes)
                                    {
                                        <option value=@lookup.TransactionCodeId>@lookup.TransactionCode</option>
                                    }
                                </InputSelect>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransactionDto.SecurityId)"
                            Caption="@NameFor(x => x.SecurityId)">
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control"
                                    @bind-Value="@model.SecurityId">
                                    @foreach (var lookup in TransactableSecurities)
                                    {
                                        <option value=@lookup.SecurityId>@lookup.SecurityDescription</option>
                                    }
                                </InputSelect>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransactionDto.TradeDate)"
                            Caption="@(NameFor(x => x.TradeDate))">
                            <CellEditTemplate Context="model">
                                <InputDate class="form-control" @bind-Value="@model.TradeDate" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransactionDto.SettleDate)"
                            Caption="@(NameFor(x => x.SettleDate))">
                            <CellEditTemplate Context="model">
                                <InputDate class="form-control" @bind-Value="@model.SettleDate" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                                    Property="@nameof(BrokerTransactionDto.AcquisitionDate)"
                                    Caption="@(NameFor(x => x.AcquisitionDate))">
                            <CellEditTemplate Context="model">
                                <InputDate class="form-control" @bind-Value="@model.AcquisitionDate" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransactionDto.Quantity)"
                            Caption="@(NameFor(x => x.Quantity))">
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="@model.Quantity" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransactionDto.Amount)"
                                    Caption="@(NameFor(x => x.Amount))">
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="@model.Amount" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                                    Property="@nameof(BrokerTransactionDto.Fee)"
                                    Caption="@(NameFor(x => x.Fee))">
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="@model.Fee" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                                    Property="@nameof(BrokerTransactionDto.Withholding)"
                                    Caption="@(NameFor(x => x.Withholding))">
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="@model.Withholding" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BrokerTransactionDto.DepSecurityId)"
                            Caption="@NameFor(x => x.DepSecurityId)">
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control"
                                    @bind-Value="@model.DepSecurityId">
                                    @foreach (var security in DepositSecurities)
                                    {
                                        <option value=@security.SecurityId>@security.SecurityDescription</option>
                                    }
                                </InputSelect>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                                    Property="@nameof(BrokerTransactionDto.TransactionId)"
                                    Caption="@(NameFor(x => x.TransactionId))">
                            <CellTemplate Context="model">
                                <div class="form-control">@model.TransactionId</div>
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Control"
                                    Property="@nameof(BrokerTransactionDto.TaxLotId)"
                                    Caption="@(NameFor(x => x.TaxLotId))">
                            <CellTemplate Context="model">
                                <div class="form-control">@model.TaxLotId</div>
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Button">
                            <CellEditTemplate Context="model">
                                <ToolTip Text="@Strings.Caption_Button_Delete">
                                    <button class="form-control button icon" type="button"
                                        @onclick="(args) => DeleteRecord(args, model)">
                                        <IonIcon Name="close-circle" />
                                    </button>
                                </ToolTip>
                            </CellEditTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </Body>
            </ContentTile>
        </EditForm>
        if (ShowAllocationInstructionTable)
        {
            <CascadingValue Value="@CurrentAllocationInstruction">
                <Modal TModelDto="AllocationInstructionTable"
                    DialogOptions="DialogResult.OK | DialogResult.Cancel"
                       OnClose="@((args) => PostAllocationInstruction(args))"
                       ReadOnly="false" >
                    <BrokerAllocationInstructionCRUD />
                </Modal>
            </CascadingValue>
        }
    }
</ThemedComponent>

@code {
    [Parameter]
    public virtual int ModelId { get; init; }

    [Inject]
    protected new IHttpCollectionService<BrokerTransactionDto, int> HttpService {get; init; }

    private IEnumerable<SecurityDtoBase> DepositSecurities { get; set; }

    private IEnumerable<BrokerTransactionCodeDtoBase> TransactionCodes { get; set; }

    private IEnumerable<SecurityDtoBase> TransactableSecurities { get; set; }

    private AccountDto ParentAccount { get; set; }

    private bool ShowAllocationInstructionTable => CurrentAllocationInstruction is not null;

    private AllocationInstructionTable CurrentAllocationInstruction { get; set; }

    /// <summary>
    /// Gets of sets the <see cref="IBrokerTransactionBLL" /> helper class for this page.
    /// </summary>
    [Inject]
    protected IBrokerTransactionBLL TransactionBLL { get; set; }

    [Inject]
    protected IQueryService QueryService { get; init; }

    /// <inheritdoc/>
    protected override bool PageDataIsLoading() =>
        ParentAccount is null
        || DepositSecurities is null
        || TransactionCodes is null
        || TransactableSecurities is null;

    /// <inheritdoc/>
    protected override async Task RefreshResultsAsync(
        ParameterDto<BrokerTransactionDto> parameter, int pageNumber, int pageSize)
    {
        if (WorkingEntries?.HasChanges ?? false)
        {
            var discardConfirmed = await ConfirmDiscardChangesAsync();

            if (!discardConfirmed)
                return;
        }

        IsLoading = true;

        try
        {
            var recordsTask = HttpService
                .SearchAsync<AccountDto>(parent: ModelId, parameter, pageNumber, pageSize);
            var securityDTOsTask = QueryService.BuiltIn
                .GetTransactableSecurityDTOsAsync(pageSize: int.MaxValue);
            var depositySecurityDTOsTask = QueryService.BuiltIn
                .GetCashOrExternalSecurityDTOsAsync(pageSize: int.MaxValue);

            var transactionCodeDTOsTask = HttpService.GetAllAsync<BrokerTransactionCodeDtoBase>();

            await InitializationTasksAsync(
                recordsTask,
                securityDTOsTask,
                depositySecurityDTOsTask,
                transactionCodeDTOsTask);

            var securityDtoResult = await securityDTOsTask;
            var depSecurityDtoResult = await depositySecurityDTOsTask;
            var transactionCodeDtoResult = await transactionCodeDTOsTask;
            var recordsResult = await recordsTask;

            WorkingEntries = new TrackingEnumerable<BrokerTransactionDto>(recordsResult.Item1.ToList());
            TransactionCodes = transactionCodeDtoResult;

            ParentAccount = recordsResult.Item2;

            TransactionBLL = new BrokerTransactionBLL(WorkingEntries, TransactionCodes, ParentAccount);
            Context = new(WorkingEntries);

            PaginationHelper.TotalItemCount = recordsResult.Item3.ItemCount;
            PaginationHelper.ItemCount = WorkingEntries.Count;

            TransactableSecurities = securityDtoResult.Item1;
            DepositSecurities = depSecurityDtoResult.Item1;
        }
        finally
        {
            IsLoading = PageDataIsLoading();
        }
    }

    protected override void AddNew(MouseEventArgs args)
    {
        // TODO: Do something with MouseEventArgs?
        _ = TransactionBLL.AddTransaction();
    }

    protected override void CancelEditor_OnClick() => 
        NavigationHelper.NavigateTo(
            $"{IndexUriRelativePath}/{ModelId}/detail/broker-transactions");

    private void TransactionCode_OnValueChanged(BrokerTransactionDto model, int newId)
    {
        ErrorMessage = null;

        var response = TransactionBLL.UpdateTransactionCode(model, newId);

        switch (response.UpdateStatus)
        {
            case TransactionUpdateStatus.Completed:
                break;
            case TransactionUpdateStatus.PendingLotClosure:
                var contentResponse = response as ITransactionUpdateResponse<AllocationInstructionTable>;
                CurrentAllocationInstruction = contentResponse.ResponseObject;
                break;
            case TransactionUpdateStatus.Faulted:
                var errorResponse = response as ITransactionUpdateResponse<InvalidOperationException>;
                ErrorMessage = errorResponse.ResponseObject.Message;
                break;
        }
    }

    /// <summary>
    /// Handles an event representing successful submission of an allocation instruction object.
    /// </summary>
    /// <param name="modalEventArgs"></param>
    /// <returns></returns>
    private void PostAllocationInstruction(
        ModalEventArgs<AllocationInstructionTable> modalEventArgs)
    {
        // Clear the reference to the allocation instruction table now that a valid
        // response is received.
        CurrentAllocationInstruction = null;

        // Handle valid submission event
        if(modalEventArgs.Result == DialogResult.OK)
        {
            var postResult = TransactionBLL.PostAllocation(modalEventArgs.Model);

            StateHasChanged();
        }
        // TODO: Add handling for the cancel event of posting allocation instructions.
    }
}