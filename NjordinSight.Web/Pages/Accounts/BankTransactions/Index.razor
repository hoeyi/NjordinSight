@page "/accounts/{ModelId:int}/detail/bank-transactions"

@inherits ModelListPage<BankTransaction>

<ThemedComponent>
    @if (ParentAccount is null)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadMany(ParentAccount.AccountCode).AsPageTitle())</PageTitle>

        <ModelPageHeader Header="@(PageTitle.ReadMany(ParentAccount.AccountCode))" 
            ActionMenu="@SectionNavigationMenu" />
    }

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <ContentTile>
        <TitleAlignLeft>
            <Paginator Model="PaginationHelper"
                    IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
        </TitleAlignLeft>
        <Body>
            @if(IsLoading)
            {
                <LoadingSvg />
            }
            else
            {
                <DataGrid Data="@WorkingEntries" FootNote="@PaginationHelper.RecordReport">
                    <DataGridColumn Property="@nameof(BankTransaction.TransactionCodeId)"
                                Caption="@NameFor(x => x.TransactionCodeId)">
                        <CellTemplate Context="model">
                            @GetLookupDisplayName(TransactionCodes, model.TransactionCodeId)
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(BankTransaction.TransactionDate)"
                                Caption="@(NameFor(x => x.TransactionDate))">
                        <CellTemplate Context="model">
                            @model.TransactionDate.ToShortDateString()
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(BankTransaction.Amount)"
                                Caption="@(NameFor(x => x.Amount))">
                        <CellTemplate Context="model">
                            @model.Amount
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(BankTransaction.Comment)"
                                Caption="@(NameFor(x => x.Comment))">
                        <CellTemplate Context="model">
                            @model.Comment
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            }
        </Body>
    </ContentTile>
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<LookupModel<int, string>> TransactionCodes { get; set; }

    private Account ParentAccount { get; set; }

    [Inject]
    public new ICollectionController<BankTransaction, int> Controller { get; init; }

    protected override MenuRoot CreateSectionNavigationMenu() => new()
    {
        Children = new()
        {
            new MenuItem()
            {
                IconKey = "caret-back-circle",
                Caption = string.Format(
                        Strings.Caption_NavigateBackTo,
                        ModelMetadata.GetAttribute<Account, NounAttribute>()?.GetSingular()),
                UriRelativePath = $"{IndexUriRelativePath}/{ModelId}/detail"
            },
            new MenuItem()
            {
                IconKey = "pencil",
                Caption = string.Format(
                                            Strings.Caption_EditMany, ModelNoun?.GetPlural()),
                UriRelativePath = $"{IndexUriRelativePath}/{ModelId}/edit/bank-transactions"
            }
        }
    };

    /// <inheritdoc />
    protected override bool GetLoadingState() => 
        WorkingEntries is null
        || ParentAccount is null
        || TransactionCodes is null;

    protected override async Task OnInitializedAsync()
    {
        // Update the hidden reference to refer the same dobject to avoid null reference exception.
        base.Controller = Controller;

        CheckNullParameters();

        IsLoading = true;

        try
        {
            var transactionCodeDTOsTask = Controller.ReferenceQueries.GetBankTransactionCodeDTOsAsync();

            ParentAccount = (
                await Controller.ReferenceQueries
                    .GetSingleAsync<Account>(
                        predicate: a => a.AccountId == ModelId,
                        path: a => a.AccountNavigation)).Value;

            var initResult = await Controller.ForParent(ParentAccount.AccountId);

            if (initResult is not OkResult)
                throw new InvalidOperationException();

            var transactionsQueryTask = Controller.SelectAsync(
                predicate: SearchService.CurrentExpression,
                pageNumber: PaginationHelper.PageIndex,
                pageSize: PaginationHelper.PageSize);

            await InitializationTasksAsync(transactionsQueryTask, transactionCodeDTOsTask);

            var transactionResult = await transactionsQueryTask;
            var transactionCodeDtoResult = await transactionCodeDTOsTask;

            WorkingEntries = transactionResult.Value.Item1.ToList();
            TransactionCodes = transactionCodeDtoResult.Value;

            PaginationHelper.TotalItemCount = transactionResult.Value.Item2.ItemCount;
            PaginationHelper.ItemCount = WorkingEntries.Count;
        }
        finally
        {
            IsLoading = GetLoadingState();
        }
    }

    /// <inheritdoc/>
    protected override void Cancel_OnClick() => NavigationHelper
        .NavigateTo($"{IndexUriRelativePath}/{ModelId}/detail");

    private string GetLookupDisplayName(IEnumerable<LookupModel<int, string>> lookupModels, int id) =>
        lookupModels.FirstOrDefault(x => x.Key == id)?.Display ?? string.Empty;

}