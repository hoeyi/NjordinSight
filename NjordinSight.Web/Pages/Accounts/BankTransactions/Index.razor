@page "/accounts/{ModelId:int}/detail/bank-transactions"

@inherits ModelPagedIndexEditor<BankTransactionDto>

<ThemedComponent>
    @if (ParentAccount is null)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadMany(ParentAccount.ShortCode).AsPageTitle())</PageTitle>

        <ModelPageHeader Header="@(PageTitle.ReadMany(ParentAccount.ShortCode))" 
            ActionMenu="@SectionNavigationMenu" />
    }

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <ContentTile>
        <TitleAlignLeft>
            <Paginator Model="PaginationHelper"
                    IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
        </TitleAlignLeft>
        <Body>
            @if(IsLoading)
            {
                <LoadingSvg />
            }
            else
            {
                <DataGrid Data="@WorkingEntries" FootNote="@PaginationHelper.RecordReport">
                    <DataGridColumn Property="@nameof(BankTransaction.TransactionCodeId)"
                                Caption="@NameFor(x => x.TransactionCodeId)">
                        <CellTemplate Context="model">
                            @GetDisplayValue(TransactionCodes, model.TransactionCodeId)
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(BankTransaction.TransactionDate)"
                                Caption="@(NameFor(x => x.TransactionDate))">
                        <CellTemplate Context="model">
                            @model.TransactionDate.ToShortDateString()
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(BankTransaction.Amount)"
                                Caption="@(NameFor(x => x.Amount))">
                        <CellTemplate Context="model">
                            @model.Amount
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property="@nameof(BankTransaction.Comment)"
                                Caption="@(NameFor(x => x.Comment))">
                        <CellTemplate Context="model">
                            @model.Comment
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            }
        </Body>
    </ContentTile>
</ThemedComponent>

@code {
    [Parameter]
    public override int ModelId { get; init; }

    private IEnumerable<BankTransactionCodeDtoBase> TransactionCodes { get; set; }

    [Inject]
    protected IReferenceDataService ReferenceData { get; init; }

    private AccountDto ParentAccount { get; set; }

    protected override MenuRoot CreateSectionNavigationMenu() => new()
    {
        Children = new()
        {
            new MenuItem()
            {
                IconKey = "caret-back-circle",
                Caption = string.Format(
                        Strings.Caption_NavigateBackTo,
                        ModelMetadata.GetAttribute<Account, NounAttribute>()?.GetSingular()),
                UriRelativePath = $"{IndexUriRelativePath}/{ModelId}/detail"
            },
            new MenuItem()
            {
                IconKey = "pencil",
                Caption = string.Format(
                                            Strings.Caption_EditMany, ModelNoun?.GetPlural()),
                UriRelativePath = $"{IndexUriRelativePath}/{ModelId}/edit/bank-transactions"
            }
        }
    };

    /// <inheritdoc />
    protected override bool PageDataIsLoading() =>
        WorkingEntries is null
        || ParentAccount is null
        || TransactionCodes is null;

    /// <inheritdoc/>
    protected override async Task RefreshResultsAsync(
        IQueryParameter<BankTransactionDto> parameter, int pageNumber, int pageSize)
    {
        if (WorkingEntries?.HasChanges ?? false)
        {
            var discardConfirmed = await ConfirmDiscardChangesAsync();

            if (!discardConfirmed)
                return;
        }

        ParentAccount = await HttpService.GetAsync<AccountDto>(id: ModelId);

        var transactionCodeDTOsTask = ReferenceData
                .GetBankCodesAsync(pageNumber: 1, pageSize: int.MaxValue);

        var transactionsQueryTask = HttpService.SearchAsync(
            parameter: LastSearchParameter,
            pageNumber: PaginationHelper.PageIndex,
            pageSize: PaginationHelper.PageSize);

        await InitializationTasksAsync(transactionsQueryTask, transactionCodeDTOsTask);

        var transactionResult = await transactionsQueryTask;
        var transactionCodeDtoResult = await transactionCodeDTOsTask;

        WorkingEntries = new TrackingEnumerable<BankTransactionDto>(transactionResult.Item1.ToList());
        TransactionCodes = transactionCodeDtoResult.Item1;

        Context = new(WorkingEntries);

        PaginationHelper.TotalItemCount = transactionResult.Item2.ItemCount;
        PaginationHelper.ItemCount = WorkingEntries.Count;
    }

    /// <inheritdoc/>
    protected override void CancelEditor_OnClick() => NavigationHelper
        .NavigateTo($"{IndexUriRelativePath}/{ModelId}/detail");

    private string GetDisplayValue(IEnumerable<BankTransactionCodeDtoBase> lookupModels, int id) =>
        lookupModels.FirstOrDefault(x => x.TransactionCodeId == id).TransactionCode ?? string.Empty;

}