@page "/accounts/{ModelId:int}/edit/bank-transactions"

@inherits ModelListPage<BankTransaction>

<ThemedComponent>
    @if (IsLoading)
    {
            <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateMany(ParentAccount.AccountCode).AsPageTitle())</PageTitle>

        <ModelPageHeader Header="@(PageTitle.UpdateMany(ParentAccount.AccountCode))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <EditForm width="100%" Model="@Entries">
            <DataAnnotationsValidator />
            <ActionButtonMenu>
                <button class="form-control button" width="20%"
                    @onclick="@(async (args) => await Submit_OnClick(context, args))">
                    @Strings.Caption_Button_Save
                </button>
            <button class="form-control button" width="20%"
                    @onclick=@(async (args) => await AddNewAsync(args))>
                    @Strings.Caption_CreateNew.Format(ModelNoun?.GetSingular())
                </button>
                <button class="form-control button" width="20%"
                    @onclick="Cancel_OnClick"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Cancel
                </button>
            </ActionButtonMenu>
            <ContentTile>
                <Body>
                    <ValidationSummary />
                    <DataGrid Data="@Entries">
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BankTransaction.TransactionCodeId)"
                            Caption="@NameFor(x => x.TransactionCodeId)">
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control"
                                            @bind-Value="@model.TransactionCodeId">
                                    @foreach (var lookup in TransactionCodes)
                                    {
                                        <option value=@lookup.Key>@lookup.Display</option>
                                    }
                                </InputSelect>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(BankTransaction.TransactionDate)"
                            Caption="@(NameFor(x => x.TransactionDate))">
                            <CellEditTemplate Context="model">
                                <InputDate class="form-control" @bind-Value="@model.TransactionDate" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control" 
                            Property="@nameof(BankTransaction.Amount)"
                            Caption="@(NameFor(x => x.Amount))">
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="@model.Amount" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property="@nameof(BankTransaction.Comment)"
                                    Caption="@(NameFor(x => x.Comment))">
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value="@model.Comment" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Button">
                            <CellEditTemplate Context="model">
                                <ToolTip Text="@Strings.Caption_Button_Delete">
                                <button class="form-control button icon" type="button"
                                    @onclick="async (args) => await DeleteAsync(args, model)">
                                    <IonIcon Name="close-circle" />
                                </button>
                                </ToolTip>
                            </CellEditTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </Body>
            </ContentTile>
        </EditForm>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<LookupModel<int, string>> TransactionCodes { get; set; }

    private Account ParentAccount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var transactionCodeDTOsTask = Controller.ReferenceQueries.GetBankTransactionCodeDTOsAsync();

            ParentAccount = (
                await Controller.ReferenceQueries
                    .GetSingleAsync<Account>(
                        predicate: a => a.AccountId == ModelId,
                        path: a => a.AccountNavigation)).Value;

            var initResult = await Controller.ForParent(ParentAccount.AccountId);

            if (initResult is not OkResult)
                throw new InvalidOperationException();

            var transactionsQueryTask = Controller.SelectWhereAsync(predicate: x => true, maxCount: 50);

            var dataTasks = Task.WhenAll(transactionsQueryTask, transactionCodeDTOsTask);
            await dataTasks;

            if (dataTasks.Status == TaskStatus.RanToCompletion)
            {
                Entries = (await transactionsQueryTask).Value?.ToList();
                TransactionCodes = (await transactionCodeDTOsTask).Value;
            }
            else
            {
                throw dataTasks.Exception.Flatten();
            }
        }
        finally
        {
            IsLoading = Entries is null
                || ParentAccount is null
                || TransactionCodes is null;
        }
    }

    protected override void Cancel_OnClick() => 
        NavigationHelper.NavigateTo($"{IndexUriRelativePath}/{ModelId}/detail/bank-transactions");
}
