@page "/accounts/{ModelId:int}/detail"

@inherits ModelDetail<AccountDto>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle(Model.ShortCode).AsPageTitle())</PageTitle>

        <ModelPageHeader ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.ReadSingle(Model.ShortCode))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <ContentTile>
            <Body>
                <CascadingValue Value="@Model">
                    <EditForm class="model-editor" Model="@Model">
                        <AccountCRUD AccountCustodians="@CustodianDtos" 
                            Disabled="false" ReadOnly="true" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
        @foreach (var entry in Model.AttributeCollection.CurrentEntries
            .OrderBy(g => g.AttributeMember.Attribute.DisplayName))
        {
            <ContentTile>
                <Body>
                    <EditForm class="model-editor" Model="@entry">
                        <ModelForm TModelDto="AccountBaseAttributeDto">
                            <ModelFormEntry LabelOverride="@entry.AttributeMember.Attribute.DisplayName"
                                        ForMember="@(() => entry.AttributeMember.DisplayName)">
                                <div class="form-control">
                                    @entry.AttributeMember.DisplayName
                                </div>
                            </ModelFormEntry>
                            <ModelFormEntry ForMember="@(() => entry.EffectiveDate)">
                                <div class="form-control">
                                    @entry.EffectiveDate.ToShortDateString()
                                </div>
                            </ModelFormEntry>
                        </ModelForm>
                    </EditForm>
                </Body>
            </ContentTile>
        }
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<AccountCustodianDto> CustodianDtos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var accountQuery = HttpService.GetAsync(ModelId);
            var custodiansQuery = HttpService.GetAllAsync<AccountCustodianDto>();

            await Task.WhenAll(accountQuery, custodiansQuery);

            Model = await accountQuery;
            CustodianDtos = await custodiansQuery;

            // Add view bank transactions menu item.
            if (Model.HasBankTransaction)
                SectionNavigationMenu.Children.Add(new MenuItem()
                    {
                        IconKey = "journal",
                        Caption = string.Format(
                                    Strings.Caption_ViewMany,
                                    ModelMetadata.GetAttribute<BankTransactionDto, NounAttribute>()?.GetPlural()),
                        UriRelativePath = $"{FormatDetailUri(ModelId)}/bank-transactions"
                    });

            // Add view broker transactions menu item.
            if (Model.HasBrokerTransaction)
                SectionNavigationMenu.Children.Add(new MenuItem()
                    {
                        IconKey = "journal",
                        Caption = string.Format(
                                Strings.Caption_ViewMany,
                                ModelMetadata.GetAttribute<BrokerTransactionDto, NounAttribute>()?.GetPlural()),
                        UriRelativePath = $"{FormatDetailUri(Model.Id)}/broker-transactions"
                    });

            // Add view wallets menu item.
            if (Model.HasWallet)
                SectionNavigationMenu.Children.Add(new MenuItem()
                    {
                        IconKey = "wallet",
                        Caption = string.Format(
                                Strings.Caption_EditMany,
                                    ModelMetadata.GetAttribute<AccountWalletDto, NounAttribute>()?.GetPlural()),
                        UriRelativePath = $"{FormatEditUri(Model.Id)}/wallets"
                    });
        }
        finally
        {
            IsLoading = Model is null || CustodianDtos is null;
        }
    }
}
