@page "/accounts/{ModelId:int}/detail"

@inherits ModelDetail<Account>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle(Model.AccountCode).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.ReadSingle(Model.AccountCode))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <ContentTile>
            <Body>
                <CascadingValue 
                    Value="@ModelDto" >
                    <EditForm class="model-editor" Model="@ModelDto">
                        <AccountCRUD AccountCustodians="@Custodians" 
                            Disabled="false" ReadOnly="true" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
        @foreach (var entry in ModelDto.AttributeViewModel.CurrentEntries.OrderBy(g =>
            g.AttributeMember.Attribute.DisplayName))
        {
            <ContentTile>
                <Body>
                    <EditForm Model="@entry">
                        <ModelForm TModelDto="AccountAttributeMemberEntry">
                            <ModelFormLineItem LabelOverride="@entry.AttributeMember.Attribute.DisplayName"
                                       ForMember="@(() => entry.AttributeMember.DisplayName)">
                                <div class="form-control">
                                    @entry.AttributeMember.DisplayName
                                </div>
                            </ModelFormLineItem>
                            <ModelFormLineItem ForMember="@(() => entry.EffectiveDate)">
                                <div class="form-control">
                                    @entry.EffectiveDate.ToShortDateString()
                                </div>
                            </ModelFormLineItem>
                        </ModelForm>
                    </EditForm>
                </Body>
            </ContentTile>
        }
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    private IEnumerable<LookupModel<int, string>> Custodians { get; set; }

    private AccountDto ModelDto { get; set; }

    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var accountQuery = await Controller.ReadAsync(ModelId);
            Model = accountQuery.Value;

            // Add view bank transactions menu item.
            if (Model.HasBankTransaction)
                SectionNavigationMenu.Children.Add(new MenuItem()
                    {
                        IconKey = "journal",
                        Caption = string.Format(
                                Strings.Caption_ViewMany,
                                ModelMetadata.GetAttribute<BankTransaction, NounAttribute>()?.GetPlural()),
                        UriRelativePath = $"{FormatDetailUri(ModelId)}/bank-transactions"
                    });

            // Add view broker transactions menu item.
            if(Model.HasBrokerTransaction)
                SectionNavigationMenu.Children.Add(new MenuItem()
                    {
                        IconKey = "journal",
                        Caption = string.Format(
                            Strings.Caption_ViewMany,
                            ModelMetadata.GetAttribute<BrokerTransaction, NounAttribute>()?.GetPlural()),
                        UriRelativePath = $"{FormatDetailUri(Model.AccountId)}/broker-transactions"
                    });

            // Add view wallets menu item.
            if (Model.HasWallet)
                SectionNavigationMenu.Children.Add(new MenuItem()
                    {
                        IconKey = "wallet",
                        Caption = string.Format(
                            Strings.Caption_EditMany, 
                                ModelMetadata.GetAttribute<AccountWallet, NounAttribute>()?.GetPlural()),
                        UriRelativePath = $"{FormatEditUri(Model.AccountId)}/wallets"
                    });

            Custodians = (await Controller.ReferenceQueries.GetAccountCustodianDTOsAsync()).Value;

            ModelDto = new(Model);
        }
        finally
        {
            IsLoading = Custodians is null || Model is null || ModelDto is null;
        }

        // TODO: Take corrective action here, accountQuery.Value should be Account
    }
}
