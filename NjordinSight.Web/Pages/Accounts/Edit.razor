@page "/accounts/{AccountId:int}/edit"

@inherits ModelDetail<Account>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateSingle(Model.AccountCode).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.UpdateSingle(Model.AccountCode))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <CascadingValue Value="@ViewModel">
            <AttributeEntryEditor TViewModelParent="AccountAttributesDto"
                TViewModelChild="AccountAttributeGrouping"
                TModel="AccountObject"
                TModelChild="AccountAttributeMemberEntry"
                OnCancelEditorClick="CancelEditorHandler"
                OnDeleteModelClick="DeleteModelHandler"
                OnValidFormSubmit="ValidFormSubmitHandler"
                ViewModel="@ViewModel.AttributeViewModel"
                Mode="EditorMode.Edit">
                <ViewModelCRUD>
                    <AccountCRUD AccountCustodians="@Custodians" Disabled="false" ReadOnly="false" />
                </ViewModelCRUD>
                <ViewModelChildCRUD>
                    <AccountAttributesCRUD Disabled="false" ReadOnly="false" />
                </ViewModelChildCRUD>
            </AttributeEntryEditor>
        </CascadingValue>
    }
</ThemedComponent>

@code {
    /// <summary>
    /// Gets or sets the identifier for the <see cref="Account" /> worked using this page.
    /// </summary>
    [Parameter]
    public int AccountId { get; set; }

    private IEnumerable<LookupModel<int, string>> Custodians { get; set; }

    private AccountDto ViewModel { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var accountQuery = Controller.ReadAsync(AccountId);
            var custodiansQuery = Controller.ReferenceQueries.GetAccountCustodianDTOsAsync();

            var dataTasks = Task.WhenAll(accountQuery, custodiansQuery);
            await dataTasks;

            if(dataTasks.Status == TaskStatus.RanToCompletion)
            {
                Model = (await accountQuery).Value;
                Custodians = (await custodiansQuery).Value;
                ViewModel = new(Model);
            }
            else
            {
                throw dataTasks.Exception.Flatten();
            }
        }
        finally
        {
            IsLoading = Model is null || Custodians is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task DeleteModelHandler(MouseEventArgs args)
    {
        var result = await Controller.DeleteAsync(Model);

        if (result is NoContentResult _)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        Model = ViewModel.ToEntity();

        var result = await Controller.UpdateAsync(Model.AccountId, Model);

        if (Model is not null)
            NavigationHelper.NavigateTo(FormatDetailUri(Model.AccountId));
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void CancelEditorHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(Model.AccountId));
}
