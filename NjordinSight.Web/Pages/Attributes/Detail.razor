@page "/attributes/{ModelId:int}/detail"

@inherits ModelDetail<ModelAttribute>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle(Model.DisplayName).AsPageTitle())</PageTitle>

        <ModelPageHeader ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.ReadSingle(Model.DisplayName))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <ContentTile>
            <Body>
                <CascadingValue Value="@ModelDto">
                    <EditForm class="model-editor" Model="@ModelDto">
                        <ModelAttributeCRUD Disabled="false" ReadOnly="true" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
        <EditForm Model="@ModelDto">
            <ContentTile>
                <Body>
                    <DataGrid Data="@ModelDto.AttributeScopes">
                        <DataGridColumn Type="DataGridCellType.Text"
                                    Property="@nameof(ModelAttributeScope.ScopeCode)"
                                    Caption="@(ModelMetadata.NameFor<ModelAttributeScope>(x => x.ScopeCode))">
                            <CellTemplate Context="model">
                                @(model.ScopeCode
                                    .ConvertFromStringCode<ModelAttributeScopeCode>()
                                    ?.GetDisplayName())
                            </CellTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </Body>
            </ContentTile>
            <ContentTile>
                <Body>
                    <DataGrid Data="@ModelDto.AttributeMembers">
                        <DataGridColumn Type="DataGridCellType.Text"
                                    Property="@nameof(ModelAttributeMember.DisplayName)"
                                    Caption="@(ModelMetadata.NameFor<ModelAttributeMember>(x => x.DisplayName))">
                            <CellTemplate Context="model">
                                @model.DisplayName
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Text"
                                    Property="@nameof(ModelAttributeMember.DisplayOrder)"
                                    Caption="@(ModelMetadata.NameFor<ModelAttributeMember>(x => x.DisplayOrder))">
                            <CellTemplate Context="model">
                                @model.DisplayOrder
                            </CellTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </Body>
            </ContentTile>
        </EditForm>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; init; }

    private ModelAttributeDto ModelDto { get; set; }

    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var modelQuery = await Controller.ReadAsync(ModelId);
            Model = modelQuery.Value;

            ModelDto = new(Model);
        }
        finally
        {
            IsLoading = Model is null || ModelDto is null;
        }

        // TODO: Take corrective action here, accountQuery.Value should be Account
    }

    private string GetDisplayName(ModelAttributeScope attributeScope) =>
        attributeScope.ScopeCode.ConvertFromStringCode<ModelAttributeScopeCode>()?.GetDisplayName() ??
        string.Empty;
}
