@page "/attributes/{ModelId:int}/edit"

@inherits ModelDetail<ModelAttribute>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateSingle(Model.DisplayName).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.UpdateSingle(Model.DisplayName))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <CascadingValue Value="@ViewModel">
            <EditForm class="model-editor" 
                Model="@ViewModel" 
                OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ContentTile>
                    <Body>
                        <ActionButtonMenu>
                            <button type="submit" class="form-control button">
                                @Strings.Caption_Button_Save
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="(async (args) => await Delete_OnClick())"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Delete
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="Cancel_OnClick"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Cancel
                            </button>
                        </ActionButtonMenu>
                        <ModelAttributeCRUD Disabled="false" ReadOnly="false" />
                    </Body>
                </ContentTile>
            </EditForm>
            <EditForm Model="@ViewModel">
                <ContentTile>
                    <Body>
                        <ActionButtonMenu>
                            <button class="form-control button"
                                @onclick="args => ViewModel.AddNewAttributeScope()">
                                @Strings.Caption_CreateNew.Format(ModelMetadata
                                    .GetAttribute<ModelAttributeScope, NounAttribute>()?.GetSingular())
                            </button>
                        </ActionButtonMenu>
                        <DataGrid Data="@ViewModel.AttributeScopes">
                            <DataGridColumn Type="DataGridCellType.Control"
                                        Property="@nameof(ModelAttributeScope.ScopeCode)"
                                        Caption="@(ModelMetadata.NameFor<ModelAttributeScope>(x => x.ScopeCode))">
                                <CellEditTemplate Context="model">
                                    <InputSelect class="form-control" @bind-Value="@model.ScopeCode">
                                        @foreach (var scopeLookup in AttributeScopeDtos)
                                        {
                                            <option value=@scopeLookup.Key>@scopeLookup.Display</option>
                                        }
                                    </InputSelect>
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Type="DataGridCellType.Button">
                                <CellEditTemplate Context="model">
                                    <ToolTip Text="@Strings.Caption_Button_Delete">
                                        <button class="form-control button icon"
                                            type="button"
                                            @onclick="async (args) => ViewModel.RemoveScope(model)">
                                            <IonIcon Name="close-circle" />
                                        </button>
                                    </ToolTip>
                                </CellEditTemplate>
                            </DataGridColumn>
                        </DataGrid>
                    </Body>
                </ContentTile>
            </EditForm>
            <EditForm Model="@ViewModel">
                <ContentTile>
                    <Body>
                        <ActionButtonMenu>
                            <button class="form-control button"
                                @onclick="args => ViewModel.AddAttributeMember()">
                                @Strings.Caption_CreateNew.Format(ModelMetadata
                                    .GetAttribute<ModelAttributeMember, NounAttribute>()?.GetSingular())
                            </button>
                        </ActionButtonMenu>
                        <DataGrid Data="@ViewModel.AttributeMembers">
                            <DataGridColumn Type="DataGridCellType.Control"
                                        Property="@nameof(ModelAttributeMember.DisplayName)"
                                        Caption="@(ModelMetadata.NameFor<ModelAttributeMember>(x => x.DisplayName))">
                                <CellEditTemplate Context="model">
                                    <InputText class="form-control" @bind-Value="model.DisplayName" />                            
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Type="DataGridCellType.Control"
                                        Property="@nameof(ModelAttributeMember.DisplayOrder)"
                                        Caption="@(ModelMetadata.NameFor<ModelAttributeMember>(x => x.DisplayOrder))">
                                <CellEditTemplate Context="model">
                                    <InputNumber class="form-control" @bind-Value="@model.DisplayOrder" />
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Type="DataGridCellType.Button">
                                <CellEditTemplate Context="model">
                                    <ToolTip Text="@Strings.Caption_Button_Delete">
                                        <button class="form-control button icon"
                                            type="button"
                                            @onclick="async (args) => ViewModel.RemoveAttributeMember(model)">
                                            <IonIcon Name="close-circle" />
                                        </button>
                                    </ToolTip>
                                </CellEditTemplate>
                            </DataGridColumn>
                        </DataGrid>
                    </Body>
                </ContentTile>
            </EditForm>
        </CascadingValue>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; set; }

    private ModelAttributeDto ViewModel { get; set; }

    private IEnumerable<LookupModel<string, string>> AttributeScopeDtos { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = Controller.ReadAsync(ModelId);
            var scopesQuery = Controller.ReferenceQueries
                .SelectDTOsFromEnum<ModelAttributeScopeCode, string, string>(
                    predicate: x => true,
                    key: x => x.ConvertToStringCode(),
                    display: x => NameFor<ModelAttributeScopeCode>(x),
                    placeHolderDelegate: () => new LookupModel<string, string>()
                        {
                            Key = string.Empty,
                            Display = Resources.Strings.Caption_InputSelect_Placeholder
                        });
            var dataTasks = Task.WhenAll(modelQuery, scopesQuery);
            await dataTasks;

            if (dataTasks.Status == TaskStatus.RanToCompletion)
            {
                Model = (await modelQuery).Value;
                ViewModel = new(Model);
                AttributeScopeDtos = (await scopesQuery).Value;
            }
        }
        finally
        {
            IsLoading = Model is null || ViewModel is null || !(AttributeScopeDtos?.Any() ?? false);
        }

        // TODO: Take corrective action here, accountQuery.Value should be Account
    }

    private void Cancel_OnClick() => NavigationHelper.NavigateTo(FormatDetailUri(ModelId));

    private async Task Delete_OnClick()
    {
        var result = await RunCatchingModelUpdateException(Controller.DeleteAsync(Model));

        if (result is NoContentResult _)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    private void DeleteScope(ModelAttributeScope attributeScope) => ViewModel.RemoveScope(attributeScope);

    protected override async Task HandleValidSubmit()
    {
        var result = await RunCatchingModelUpdateException(Controller.UpdateAsync(ModelId, Model));

        int? id = result?.Value is null ? null : GetKeyValueOrDefault<int>(result.Value);

        ProcessDetailAtAction(id);
    }
}
