@page "/countries/{ModelId:int}/edit"

@inherits ModelDetail<Country>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateSingle(Model.DisplayName).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu"
                         Header="@(PageTitle.UpdateSingle(Model.DisplayName))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <AttributeEntryCollectionEditor 
            TViewModelParent="CountryDto"
            TViewModelChild="CountryAttributeGrouping"
            TModel="Country"
            TModelChild="CountryAttributeMemberEntry"
            OnCancelEditorClick="FormCancelClickHandler"
            OnDeleteModelClick="FormDeleteClickHandler"
            OnValidFormSubmit="ValidFormSubmitHandler"
            EffectiveDatePath="@(x => x.EffectiveDate)"
            ViewModel="@ViewModel"
            Mode="EditorMode.Edit">
            <ViewModelCRUD>
                <CountryViewModelCRUD Disabled="false" ReadOnly="false" />
            </ViewModelCRUD>
            <ViewModelChildCRUD>
                <CountryAttributesCRUD Disabled="false" ReadOnly="false" />
            </ViewModelChildCRUD>
        </AttributeEntryCollectionEditor>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int ModelId { get; set; }

    private CountryDto ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = Controller.ReadAsync(ModelId);

            if ((await modelQuery).Value is Country model)
                Model = model;

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Model is null || ViewModel is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task FormDeleteClickHandler(MouseEventArgs args)
    {
        var result = await RunCatchingModelUpdateException(Controller.DeleteAsync(Model));

        if (result is NoContentResult _)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        var result = await RunCatchingModelUpdateException(Controller.UpdateAsync(ModelId, Model));

        int? id = result?.Value is null ? null : GetKeyValueOrDefault<int>(result.Value);

        ProcessDetailAtAction(id);
    }

    /// <summary>
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void FormCancelClickHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(Model.CountryId));
}