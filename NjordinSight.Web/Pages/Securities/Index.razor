@page "/securities"

@inherits ModelIndex<Security>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

    <ThemedComponent>
        <ModelPageHeader ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.ReadMany())" />

    @if(SearchFields is null)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                <SearchInputTable TModel="Security"
                    ComparisonOperators=@ComparisonOperators
                    ExpressionBuilder=@ExpressionBuilder
                    SearchFields=@SearchFields
                    OnSearchClick=@(async (args) => await SearchClicked(args))>
                </SearchInputTable>
            </Body>
        </ContentTile>
    }

    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <ContentTile>
            <Body>
                <DataGrid Data="@Entries">
                    <DataGridColumn Property=@nameof(Security.SecurityDescription)
                                Caption=@(ModelMetadata.NameFor<Security>(x => x.SecurityDescription))
                                Type=@DataGridCellType.Link>
                        <CellTemplate Context="model">
                            <a class="custom-nav-link" href=@(FormatDetailUri(model.SecurityId)) @onclick:preventDefault
                                @onclick="@(args => Detail_OnClick(model, args))">
                                @model.SecurityDescription
                            </a>
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Security.SecuritySymbol)
                                Caption=@(ModelMetadata.NameFor<Security>(x => x.SecuritySymbol))
                                Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                                @model.SecuritySymbol
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Security.SecurityTypeId)
                                Caption=@(ModelMetadata.NameFor<Security>(x => x.SecurityTypeId))
                                Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @GetLookupDisplayName(SecurityTypes, model.SecurityTypeId)
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Security.Issuer)
                            Caption=@(ModelMetadata.NameFor<Security>(x => x.Issuer))
                            Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @model.Issuer
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Security.SecurityExchangeId)
                            Caption=@(ModelMetadata.NameFor<Security>(x => x.SecurityExchangeId))
                            Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @GetLookupDisplayName(Exchanges, model.SecurityExchangeId ?? default)
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Security.HasPerpetualMarket)
                            Caption=@(ModelMetadata.NameFor<Security>(x => x.HasPerpetualMarket))
                            Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @model.HasPerpetualMarket
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Security.HasPerpetualPrice)
                                Caption=@(ModelMetadata.NameFor<Security>(x => x.HasPerpetualPrice))
                            Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @model.HasPerpetualPrice
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            </Body>
        </ContentTile>
    }
</ThemedComponent>


@code {
    private IEnumerable<LookupModel<int, string>> Exchanges { get; set; }

    private IEnumerable<LookupModel<int, string>> SecurityTypes { get; set; }

    /// <inheritdoc/>
    protected override bool GetLoadingState() => 
        Entries is null || Exchanges is null || SecurityTypes is null;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var securitiesTask = Controller.SelectAsync(
                predicate: SearchService.CurrentExpression,
                pageNumber: PaginationHelper.PageIndex,
                pageSize: PaginationHelper.PageSize);

            var exchangesTask = Controller.ReferenceQueries
                .GetDtosAsync<SecurityExchange, int, string>(
                    key: x => x.ExchangeId,
                    display: x => x.ExchangeCode);

            var secTypesTask = Controller.ReferenceQueries
                .GetDtosAsync<SecurityType, int, string>(
                    key: x => x.SecurityTypeId,
                    display: x => x.SecurityTypeName);

            await InitializationTasksAsync(securitiesTask, exchangesTask, secTypesTask);

            var securityTaskResult = await securitiesTask;
            var exchangeTaskResult = await exchangesTask;
            var secTypeTaskResult = await secTypesTask;

            Entries = securityTaskResult.Value.Item1;
            Exchanges = exchangeTaskResult.Value;
            SecurityTypes = secTypeTaskResult.Value;
        }
        finally
        {
            IsLoading = GetLoadingState();
        }
    }

    private void Detail_OnClick(Security model, MouseEventArgs args)
    {
        NavigationHelper.NavigateTo(FormatDetailUri(model.SecurityId));
    }

    private string GetLookupDisplayName(IEnumerable<LookupModel<int, string>> lookupModels, int id) =>
        lookupModels.FirstOrDefault(x => x.Key == id)?.Display ?? string.Empty;
}