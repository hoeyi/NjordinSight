@page "/securities"

@inherits ModelIndex<SecurityDto>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

    <ThemedComponent>
        <ModelPageHeader ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.ReadMany())" />

    @if(SearchFields is null)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                <SearchInputTable TModel="SecurityDto"
                    ComparisonOperators=@ComparisonOperators
                    ExpressionBuilder=@ExpressionBuilder
                    SearchFields=@SearchFields
                    OnSearchClick=@(async (args) => await SearchClicked(args))>
                </SearchInputTable>
            </Body>
        </ContentTile>
    }

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <ContentTile>
        <TitleAlignLeft>
            <Paginator Model="PaginationHelper"
                    IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
        </TitleAlignLeft>
        <Body>
            @if (IsLoading)
            {
                <LoadingSvg />
            }
            else
            {
                <DataGrid Data="@Entries" FootNote="@PaginationHelper.RecordReport">
                    <DataGridColumn Property=@nameof(SecurityDto.SecurityDescription)
                                Caption=@(ModelMetadata.NameFor<SecurityDto>(x => x.SecurityDescription))
                                Type=@DataGridCellType.Link>
                        <CellTemplate Context="model">
                            <a class="custom-nav-link" href=@(FormatDetailUri(model.SecurityId)) 
                                @onclick:preventDefault
                                @onclick="@(args => Detail_OnClick(model, args))">
                                @model.SecurityDescription
                            </a>
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityDto.CurrentSymbol)
                                    Caption=@(ModelMetadata.NameFor<SecurityDto>(x => x.CurrentSymbol))
                                Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @model.CurrentSymbol
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityDto.SecurityTypeId)
                                Caption=@(ModelMetadata.NameFor<SecurityDto>(x => x.SecurityTypeId))
                                Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @(TypeLookup
                                .TryGetDisplayString<int, SecurityTypeDto>(
                                model.SecurityTypeId, x => x.SecurityTypeName))
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityDto.Issuer)
                            Caption=@(ModelMetadata.NameFor<SecurityDto>(x => x.Issuer))
                            Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @model.Issuer
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityDto.SecurityExchangeId)
                            Caption=@(ModelMetadata.NameFor<SecurityDto>(x => x.SecurityExchangeId))
                            Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @(ExchangeLookup
                                .TryGetDisplayString<int, SecurityExchangeDto>(
                                model.SecurityExchangeId ?? default, x => x.ExchangeCode))
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityDto.HasPerpetualMarket)
                            Caption=@(ModelMetadata.NameFor<SecurityDto>(x => x.HasPerpetualMarket))
                            Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @model.HasPerpetualMarket
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityDto.HasPerpetualPrice)
                                Caption=@(ModelMetadata.NameFor<SecurityDto>(x => x.HasPerpetualPrice))
                            Type=@DataGridCellType.Text>
                        <CellTemplate Context="model">
                            @model.HasPerpetualPrice
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            }
        </Body>
    </ContentTile>
</ThemedComponent>


@code {
    private IEnumerable<SecurityExchangeDto> Exchanges => ExchangeLookup.Values;

    private IEnumerable<SecurityTypeDto> SecurityTypes => TypeLookup.Values;

    private IDictionary<int, SecurityExchangeDto> ExchangeLookup { get; set; }
    private IDictionary<int, SecurityTypeDto> TypeLookup { get; set; }

    /// <inheritdoc/>
    protected override bool PageDataIsLoading() => 
        Entries is null || Exchanges is null || SecurityTypes is null;

    /// <inheritdoc/>
    protected override async Task RefreshResultsAsync(
        ParameterDto<SecurityDto> parameter, int pageNumber, int pageSize)
    {
        var securityQuery = HttpService.SearchAsync(
                parameter: parameter,
                pageNumber: PaginationHelper.PageIndex,
                pageSize: PaginationHelper.PageSize);

        var exchangeQuery = HttpService.GetAllAsync<SecurityExchangeDto>();
        var securityTypeQuery = HttpService.GetAllAsync<SecurityTypeDto>();

        await InitializationTasksAsync(securityQuery, exchangeQuery, securityTypeQuery);

        var securityTaskResult = await securityQuery;
        var exchangeTaskResult = await exchangeQuery;
        var secTypeTaskResult = await securityTypeQuery;

        Entries = securityTaskResult.Item1;
        ExchangeLookup = exchangeTaskResult.ToDictionary(x => x.ExchangeId, x => x);
        TypeLookup = secTypeTaskResult.ToDictionary(x => x.SecurityTypeId, x => x);

        PaginationHelper.TotalItemCount = securityTaskResult.Item2.ItemCount;
        PaginationHelper.ItemCount = Entries.Count();
    }

    private void Detail_OnClick(SecurityDto model, MouseEventArgs args)
    {
        NavigationHelper.NavigateTo(FormatDetailUri(model.SecurityId));
    }

    private string GetLookupDisplayName(IEnumerable<LookupModel<int, string>> lookupModels, int id) =>
        lookupModels.FirstOrDefault(x => x.Key == id)?.Display ?? string.Empty;
}