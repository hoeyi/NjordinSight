@page "/securities/prices"

@inherits ModelListPage<SecurityPrice>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

    <ThemedComponent>
        <ModelPageHeader ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.ReadMany())" />

    @if(SearchFields is null)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                <SearchInputTable TModel="SecurityPrice"
                    ComparisonOperators=@ComparisonOperators
                    ExpressionBuilder=@ExpressionBuilder
                    SearchFields=@SearchFields
                    OnSearchClick=@(async (args) => await SearchClicked(args))>
                </SearchInputTable>
            </Body>
        </ContentTile>
    }

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <ContentTile>
        <TitleAlignLeft>
            <Paginator Model="PaginationHelper" 
                IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
        </TitleAlignLeft>
        <Body>
            @if (IsLoading)
            {
                <LoadingSvg />
            }
            else
            {
                <DataGrid Data="@WorkingEntries">
                    <DataGridColumn Property="@nameof(SecurityPrice.SecurityId)"
                        Caption="@(NameFor(x => x.SecurityId))">
                        <CellTemplate Context="model">
                            @GetSecurityDisplay(model.SecurityId)
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.PriceDate)
                        Caption=@(NameFor(x => x.PriceDate))>
                        <CellTemplate Context="model">
                            @model.PriceDate.ToShortDateString()
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.PriceClose)
                        Caption=@(NameFor(x => x.PriceClose))>
                        <CellTemplate Context="model">
                            @model.PriceClose
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.PriceOpen)
                        Caption=@(NameFor(x => x.PriceOpen))>
                        <CellTemplate Context="model">
                            @model.PriceOpen
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.PriceHigh)
                        Caption=@(NameFor(x => x.PriceHigh))>
                        <CellTemplate Context="model">
                            @model.PriceHigh
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.PriceLow)
                        Caption=@(NameFor(x => x.PriceLow))>
                        <CellTemplate Context="model">
                            @model.PriceLow
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.Volume)
                                Caption=@(NameFor(x => x.Volume))>
                        <CellTemplate Context="model">
                            @model.Volume
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            }
        </Body>
    </ContentTile>
</ThemedComponent>

@code {
    private IDictionary<int, string> SecurityDtos { get; set; }

    [Inject]
    protected new ICollectionController<SecurityPrice> Controller {get; init; }

    /// <inheritdoc/>
    protected override MenuRoot CreateSectionNavigationMenu() => new()
    {
        IconKey = "reorder-four",
        Children = new()
        {
            new MenuItem()
            {
                IconKey = "pencil",
                Caption = string.Format(
                    Strings.Caption_EditMany, ModelNoun?.GetPlural()),
                UriRelativePath = $"{IndexUriRelativePath}/prices/edit"
            }
        }
    };

    /// <inheritdoc />
    protected override bool GetLoadingState() => 
        WorkingEntries is null 
        || SecurityDtos is null
        || Context  is null;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        // Update the hidden reference to refer the same object to avoid null reference exception.
        base.Controller = Controller;

        CheckNullParameters();

        IsLoading = true;

        try
        {
            var pricesTask = Controller.SelectAsync(
                predicate: SearchService.CurrentExpression,
                pageNumber: PaginationHelper.PageIndex,
                pageSize: PaginationHelper.PageSize);

            var securityDtosTask = Controller.ReferenceQueries.GetDtosAsync<Security, int, string>(
                key: x => x.SecurityId,
                display: x => x.SecurityDescription);

            await InitializationTasksAsync(pricesTask, securityDtosTask);

            var dtosTaskResult = await securityDtosTask;
            var priceTaskResult = await pricesTask;

            SecurityDtos = dtosTaskResult.Value.ToDictionary(k => k.Key, v => v.Display);
            WorkingEntries = priceTaskResult.Value.Item1.ToList();

            PaginationHelper.TotalItemCount = priceTaskResult.Value.Item2.ItemCount;
            PaginationHelper.ItemCount = WorkingEntries.Count;

            Context = new(WorkingEntries);
        }
        finally
        {
            IsLoading = GetLoadingState();
        }
    }

    private string GetSecurityDisplay(int securityId)
    {
        if (SecurityDtos.TryGetValue(securityId, out string display))
            return display;
        else
            return string.Empty;
    }
}
