@page "/securities/prices"

@inherits ModelListPage<SecurityPrice>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

    <ThemedComponent>
        <ModelPageHeader ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.ReadMany())" />

    @if(SearchFields is null)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                <SearchInputTable TModel="SecurityPrice"
                    ComparisonOperators=@ComparisonOperators
                    ExpressionBuilder=@ExpressionBuilder
                    SearchFields=@SearchFields
                    OnSearchClick=@(async (args) => await SearchClicked(args))>
                </SearchInputTable>
            </Body>
        </ContentTile>
    }

    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <ContentTile>
            <TitleAlignLeft>
                <Paginator Model="PaginationHelper" 
                    IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
            </TitleAlignLeft>
            <Body>
                <DataGrid Data="@Entries">
                    <DataGridColumn Property="@nameof(SecurityPrice.SecurityId)"
                        Caption="@(NameFor(x => x.SecurityId))">
                        <CellTemplate Context="model">
                            @GetSecurityDisplay(model.SecurityId)
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.PriceDate)
                        Caption=@(NameFor(x => x.PriceDate))>
                        <CellTemplate Context="model">
                            @model.PriceDate.ToShortDateString()
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.PriceClose)
                        Caption=@(NameFor(x => x.PriceClose))>
                        <CellTemplate Context="model">
                            @model.PriceClose
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.PriceOpen)
                        Caption=@(NameFor(x => x.PriceOpen))>
                        <CellTemplate Context="model">
                            @model.PriceOpen
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.PriceHigh)
                        Caption=@(NameFor(x => x.PriceHigh))>
                        <CellTemplate Context="model">
                            @model.PriceHigh
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.PriceLow)
                        Caption=@(NameFor(x => x.PriceLow))>
                        <CellTemplate Context="model">
                            @model.PriceLow
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPrice.Volume)
                                Caption=@(NameFor(x => x.Volume))>
                        <CellTemplate Context="model">
                            @model.Volume
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    private IDictionary<int, string> SecurityDtos { get; set; }

    private Expression<Func<SecurityPrice, bool>> InitialSearchExpression { get; set; }

    [Inject]
    protected new ICollectionController<SecurityPrice> Controller {get; init; }

    #region Search componenents
    /// <summary>
    /// Gets or sets the <see cref="IExpressionBuilder"/> for this component.
    /// </summary>
    [Inject]
    protected IExpressionBuilder ExpressionBuilder { get; set; } = default!;

    /// <summary>
    /// Gets or sets the collection of searchables fields for the type: <typeparamref name="TModel"/>.
    /// </summary>
    private IEnumerable<ISearchableMemberMetadata> SearchFields { get; set; }
        = Array.Empty<ISearchableMemberMetadata>();

    /// <summary>
    /// Gets or sets the collection of allowable <see cref="ComparisonOperator"/> for
    /// the type: <typeparamref name="TModel"/>.
    /// </summary>
    private IEnumerable<ComparisonOperator> ComparisonOperators { get; set; }
        = Array.Empty<ComparisonOperator>();

    #endregion

    protected override MenuRoot CreateSectionNavigationMenu() => new()
    {
        IconKey = "reorder-four",
        Children = new()
        {
            new MenuItem()
            {
                IconKey = "pencil",
                Caption = string.Format(
                    Strings.Caption_EditMany, ModelNoun?.GetPlural()),
                UriRelativePath = $"{IndexUriRelativePath}/prices/edit"
            }
        }
    };
    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        // Update the hidden reference to refer the same object to avoid null reference exception.
        base.Controller = Controller;

        try
        {
            if (ExpressionBuilder is null)
                throw new ArgumentNullException(paramName: nameof(ExpressionBuilder));

            if (Controller is null)
                throw new ArgumentNullException(paramName: nameof(Controller));

            InitialSearchExpression = x => true;

            SearchFields = ExpressionBuilder!.GetSearchableMembers<SecurityPrice>();
            ComparisonOperators = ExpressionBuilder!.GetComparisonOperators();

            var pricesTask = Controller.SelectAsync(
                                predicate: LastSearchExpression,
                                pageNumber: PaginationHelper.PageIndex,
                                pageSize: PaginationHelper.PageSize);

            var securityDtosTask = Controller.ReferenceQueries.GetDtosAsync<Security, int, string>(
                key: x => x.SecurityId,
                display: x => x.SecurityDescription);

            var dataTasks = Task.WhenAll(pricesTask, securityDtosTask);
            await dataTasks;

            if(dataTasks.Status == TaskStatus.RanToCompletion)
            {
                var pricesResult = await pricesTask;
                var securityDtoResult = await securityDtosTask;

                SecurityDtos = securityDtoResult.Value.ToDictionary(k => k.Key, v => v.Display);
                var actionResult = await pricesTask;

                Entries = actionResult.Value.Item1?.ToList() ?? new List<SecurityPrice>();

                PaginationHelper.TotalItemCount = actionResult.Value.Item2.ItemCount;
                PaginationHelper.ItemCount = Entries.Count;
            }
        }
        finally
        {
            IsLoading = Entries is null || SecurityDtos is null;
        }
    }

    private string GetSecurityDisplay(int securityId)
    {
        if (SecurityDtos.TryGetValue(securityId, out string display))
            return display;
        else
            return string.Empty;
    }
}
