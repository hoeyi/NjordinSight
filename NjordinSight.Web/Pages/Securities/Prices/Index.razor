@page "/securities/prices"

@inherits ModelPagedIndexEditor<SecurityPriceDto>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

    <ThemedComponent>
        <ModelPageHeader ActionMenu="@SectionNavigationMenu" Header="@(PageTitle.ReadMany())" />

    @if(SearchService.SearchFields is null)
    {
        <LoadingSvg />
    }
    else
    {
        @if (SearchService.SearchFields.Any())
        {
            <ContentTile>
                <Body>
                    <SearchInputTable TModel="SecurityPriceDto"
                        ComparisonOperators=@SearchService.ComparisonOperators
                        ExpressionBuilder=@SearchService.ExpressionBuilder
                        SearchFields=@SearchService.SearchFields
                        OnSearchClick=@(async (args) => await SearchClicked(args))>
                    </SearchInputTable>
                </Body>
            </ContentTile>
        }
    }

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    <ContentTile>
        <TitleAlignLeft>
            <Paginator Model="PaginationHelper" 
                IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
        </TitleAlignLeft>
        <Body>
            @if (IsLoading)
            {
                <LoadingSvg />
            }
            else
            {
                <DataGrid Data="@WorkingEntries" FootNote="@PaginationHelper.RecordReport">
                    <DataGridColumn Property="@nameof(SecurityPriceDto.SecurityId)"
                        Caption="@(NameFor(x => x.SecurityId))">
                        <CellTemplate Context="model">
                            @GetSecurityDisplay(model.SecurityId)
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPriceDto.PriceDate)
                        Caption=@(NameFor(x => x.PriceDate))>
                        <CellTemplate Context="model">
                            @model.PriceDate.ToShortDateString()
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPriceDto.PriceClose)
                        Caption=@(NameFor(x => x.PriceClose))>
                        <CellTemplate Context="model">
                            @model.PriceClose
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPriceDto.PriceOpen)
                        Caption=@(NameFor(x => x.PriceOpen))>
                        <CellTemplate Context="model">
                            @model.PriceOpen
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPriceDto.PriceHigh)
                        Caption=@(NameFor(x => x.PriceHigh))>
                        <CellTemplate Context="model">
                            @model.PriceHigh
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPriceDto.PriceLow)
                        Caption=@(NameFor(x => x.PriceLow))>
                        <CellTemplate Context="model">
                            @model.PriceLow
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(SecurityPriceDto.Volume)
                                Caption=@(NameFor(x => x.Volume))>
                        <CellTemplate Context="model">
                            @model.Volume
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            }
        </Body>
    </ContentTile>
</ThemedComponent>

@code {
    private IDictionary<int, string> SecurityDtos { get; set; }

    [Inject]
    protected IQueryService QueryService { get; init;  }

    /// <inheritdoc/>
    protected override MenuRoot CreateSectionNavigationMenu() => new()
    {
        IconKey = "reorder-four",
        Children = new()
        {
            new MenuItem()
            {
                IconKey = "pencil",
                Caption = string.Format(
                    Strings.Caption_EditMany, ModelNoun?.GetPlural()),
                UriRelativePath = $"{IndexUriRelativePath}/prices/edit"
            }
        }
    };

    /// <inheritdoc />
    protected override bool PageDataIsLoading() =>
        WorkingEntries is null 
        || SecurityDtos is null
        || Context  is null;

    /// <inheritdoc/>
    protected override async Task RefreshResultsAsync(
        ParameterDto<SecurityPriceDto> parameter, int pageNumber, int pageSize)
    {
        if (WorkingEntries?.HasChanges ?? false)
        {
            var discardConfirmed = await ConfirmDiscardChangesAsync();

            if (!discardConfirmed)
                return;
        }

        var securityDtosTask = HttpService.GetAllAsync<SecurityDtoBase>();

        var priceQueryTask = parameter is null ?
            HttpService.IndexAsync(
                    pageNumber: PaginationHelper.PageIndex,
                    pageSize: PaginationHelper.PageSize) :
            HttpService.SearchAsync(
                parameter: parameter,
                pageNumber: PaginationHelper.PageIndex,
                pageSize: PaginationHelper.PageSize);

        await InitializationTasksAsync(priceQueryTask, securityDtosTask);

        var priceResult = await priceQueryTask;
        var securityDtoResult = await securityDtosTask;

        WorkingEntries = new TrackingEnumerable<SecurityPriceDto>(priceResult.Item1.ToList());
        SecurityDtos = securityDtoResult.ToDictionary(k => k.SecurityId, v => v.SecurityDescription);


        Context = new(WorkingEntries);

        PaginationHelper.TotalItemCount = priceResult.Item2.ItemCount;
        PaginationHelper.ItemCount = WorkingEntries.Count;
    }

    private string GetSecurityDisplay(int securityId) =>
        SecurityDtos.TryGetValue(securityId, out string display) ? display : string.Empty;
}
