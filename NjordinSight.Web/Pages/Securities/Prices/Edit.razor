@page "/securities/prices/edit"

@inherits ModelListPage<SecurityPrice>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

<ThemedComponent>
    <ModelPageHeader Header="@(PageTitle.ReadMany())" />

    @if(SearchFields is null)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                <SearchInputTable TModel="SecurityPrice"
                    ComparisonOperators=@ComparisonOperators
                    ExpressionBuilder=@ExpressionBuilder
                    SearchFields=@SearchFields
                    OnSearchClick=@(async (args) => await SearchClicked(args))>
                </SearchInputTable>
            </Body>
        </ContentTile>
    }

    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <EditForm width="100%" EditContext="@_context">
            <DataAnnotationsValidator />
            <ActionButtonMenu>
                <button class="form-control button"
                    @onclick="@(async (args) => await Submit_OnClick(context, args))">
                    @Strings.Caption_Button_Save
                </button>
                <button class="form-control button"
                    @onclick="(async (args) => await AddNewAsync(args))">
                    @Strings.Caption_CreateNew.Format(ModelNoun?.GetSingular())
                </button>
                <button class="form-control button" @onclick="Cancel_OnClick"
                    @onclick:preventDefault>
                    @Strings.Caption_Button_Cancel
                </button>
            </ActionButtonMenu>
            <ContentTile>
                <Body>
                    <ValidationSummary />
                    <DataGrid Data="@Entries">
                        <DataGridColumn Property=@nameof(SecurityPrice.SecurityId)
                            Type="DataGridCellType.Control"
                            Caption=@(NameFor(x => x.SecurityId))>
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control" @bind-Value="@model.SecurityId">
                                    @foreach (var lookup in SecurityLookup)
                                    {
                                        <option value=@lookup.Key>@lookup.Display</option>
                                    }
                                </InputSelect>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property=@nameof(SecurityPrice.PriceDate)
                            Type="DataGridCellType.Control"
                            Caption=@(NameFor(x => x.PriceDate))>
                            <CellEditTemplate Context="model">
                                <InputDate class="form-control" @bind-Value="model.PriceDate" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property=@nameof(SecurityPrice.PriceClose)
                            Type="DataGridCellType.Control"
                            Caption=@(NameFor(x => x.PriceClose))>
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="model.PriceClose" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property=@nameof(SecurityPrice.PriceOpen)
                            Type="DataGridCellType.Control"
                            Caption=@(NameFor(x => x.PriceOpen))>
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="model.PriceOpen" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property=@nameof(SecurityPrice.PriceHigh)
                            Type="DataGridCellType.Control"
                            Caption=@(NameFor(x => x.PriceHigh))>
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="model.PriceHigh" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property=@nameof(SecurityPrice.PriceLow)
                            Type="DataGridCellType.Control"
                            Caption=@(NameFor(x => x.PriceLow))>
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="model.PriceClose" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property=@nameof(SecurityPrice.Volume)
                            Type="DataGridCellType.Control"
                            Caption=@(NameFor(x => x.Volume))>
                            <CellEditTemplate Context="model">
                                <InputNumber class="form-control" @bind-Value="model.Volume" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Button">
                            <CellEditTemplate Context="model">
                                <ToolTip Text="@Strings.Caption_Button_Delete">
                                    <button class="form-control button icon"
                                        type="button"
                                        @onclick="async (args) => await DeleteAsync(args, model)">
                                        <IonIcon Name="close-circle" />
                                    </button>
                                </ToolTip>
                            </CellEditTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </Body>
            </ContentTile>
        </EditForm>
    }
</ThemedComponent>
@code {
    private IEnumerable<LookupModel<int, string>> SecurityLookup { get; set; }

    private int MaxRecordCount { get; set; } = 100;

    private DateTime GetLastBusinessDay()
    {
        var currentDateTime = DateTime.UtcNow;

        DateTime lastBusinessDate = currentDateTime.DayOfWeek switch
        {
            DayOfWeek.Saturday => currentDateTime.Date.AddDays(-1),
            DayOfWeek.Sunday => currentDateTime.Date.AddDays(-2),
            _ => currentDateTime.Date
        };

        return lastBusinessDate;
    }
    private Expression<Func<SecurityPrice, bool>> InitialSearchExpression { get; set; }

    #region Search componenents
    /// <summary>
    /// Gets or sets the <see cref="IExpressionBuilder"/> for this component.
    /// </summary>
    [Inject]
    protected IExpressionBuilder ExpressionBuilder { get; set; } = default!;

    /// <summary>
    /// Gets or sets the collection of searchables fields for the type: <typeparamref name="TModel"/>.
    /// </summary>
    private IEnumerable<ISearchableMemberMetadata> SearchFields { get; set; }
        = Array.Empty<ISearchableMemberMetadata>();

    /// <summary>
    /// Gets or sets the collection of allowable <see cref="ComparisonOperator"/> for
    /// the type: <typeparamref name="TModel"/>.
    /// </summary>
    private IEnumerable<ComparisonOperator> ComparisonOperators { get; set; }
        = Array.Empty<ComparisonOperator>();

    #endregion

    private bool UpodateLoading() => SecurityLookup is null || Entries is null;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            if (ExpressionBuilder is null)
                throw new ArgumentNullException(paramName: nameof(ExpressionBuilder));

            if (Controller is null)
                throw new ArgumentNullException(paramName: nameof(Controller));

            DateTime lastBusinessDay = GetLastBusinessDay();

            // TODO: Update this to a more useful initial expression.
            InitialSearchExpression = x => true;

            SearchFields = ExpressionBuilder!.GetSearchableMembers<SecurityPrice>();
            ComparisonOperators = ExpressionBuilder!.GetComparisonOperators();

            var pricesTask = Controller.SelectWhereAsync(InitialSearchExpression, MaxRecordCount);
            var securityDtosTask = Controller.ReferenceQueries.GetDtosAsync<Security, int, string>(
                key: x => x.SecurityId,
                display: x => x.SecurityDescription,
                defaultKey: default,
                defaultDisplay: Strings.Caption_InputSelect_Prompt);

            var dataTasks = Task.WhenAll(pricesTask, securityDtosTask);
            await dataTasks;

            if (dataTasks.Status == TaskStatus.RanToCompletion)
            {
                var pricesResult = await pricesTask;
                var securityDtoResult = await securityDtosTask;

                SecurityLookup = securityDtoResult.Value;
                Entries = pricesResult.Value?.ToList();
            }
        }
        finally
        {
            Entries ??= new List<SecurityPrice>();

            _context = new(Entries);
            IsLoading = UpodateLoading();
        }
    }

    /// <inheritdoc/>
    protected override void Cancel_OnClick() => 
        NavigationHelper.NavigateTo($"{IndexUriRelativePath}/prices");

    private async Task SearchClicked(SearchSubmittedEventArgs<SecurityPrice> args)
    {
        try
        {
            IsLoading = true;
            if (args is not null)
            {
                var actionResult = await Controller!.SelectWhereAsync(
                        predicate: args.SearchExpression, maxCount: MaxRecordCount);

                Entries = actionResult.Value?.ToList() ?? new List<SecurityPrice>();
            }
        }
        finally
        {
            IsLoading = UpodateLoading();
        }
    }
}
