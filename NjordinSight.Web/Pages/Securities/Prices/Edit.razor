@page "/securities/prices/edit"

@inherits ModelListPage<SecurityPrice>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

<ThemedComponent>
    <ModelPageHeader Header="@(PageTitle.ReadMany())" />

    @if(SearchFields is null)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                <SearchInputTable TModel="SecurityPrice"
                    ComparisonOperators=@ComparisonOperators
                    ExpressionBuilder=@ExpressionBuilder
                    SearchFields=@SearchFields
                    OnSearchClick=@(async (args) => await SearchClicked(args))>
                </SearchInputTable>
            </Body>
        </ContentTile>
    }

    <CascadingValue Value="@ErrorMessage">
        <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
    </CascadingValue>

    @if(Context is null)
    {
        <LoadingSvg />
    }
    else
    {
        <EditForm width="100%" EditContext="@Context">
                <DataAnnotationsValidator />
                <ActionButtonMenu>
                    <button class="form-control button"
                        @onclick="@(async (args) => await Submit_OnClick(context, args))">
                        @Strings.Caption_Button_Save
                    </button>
                    <button class="form-control button"
                        @onclick="(async (args) => await AddNewAsync(args))">
                        @Strings.Caption_CreateNew.Format(ModelNoun?.GetSingular())
                    </button>
                    <button class="form-control button" @onclick="Cancel_OnClick"
                        @onclick:preventDefault>
                        @Strings.Caption_Button_Cancel
                    </button>
                </ActionButtonMenu>
                <ContentTile>
                    <TitleAlignLeft>
                        <Paginator Model="PaginationHelper"
                               IndexChanged="OnIndexChangedAsync" PageSizeChanged="OnPageSizeChangedAsync" />
                    </TitleAlignLeft>
                    <Body>
                        @if (IsLoading)
                        {
                            <LoadingSvg />
                        }
                        else
                        {
                            <ValidationSummary />
                            <DataGrid Data="@WorkingEntries">
                                <DataGridColumn Type="DataGridCellType.Button">
                                    <CellEditTemplate Context="model">
                                        <ToolTip Text="@Strings.Caption_Button_Delete">
                                            <button class="form-control button icon" type="button"
                                                @onclick="async (args) => await DeleteAsync(args, model)">
                                                <IonIcon Name="close-circle" />
                                            </button>
                                        </ToolTip>
                                    </CellEditTemplate>
                                </DataGridColumn>
                                <DataGridColumn Property=@nameof(SecurityPrice.SecurityId)
                                    Type="DataGridCellType.Control"
                                    Caption=@(NameFor(x => x.SecurityId))>
                                    <CellEditTemplate Context="model">
                                        <InputSelect class="form-control" @bind-Value="@model.SecurityId">
                                            @foreach (var lookup in SecurityLookup)
                                            {
                                                <option value=@lookup.Key>@lookup.Display</option>
                                            }
                                        </InputSelect>
                                    </CellEditTemplate>
                                </DataGridColumn>
                                <DataGridColumn Property=@nameof(SecurityPrice.PriceDate)
                                    Type="DataGridCellType.Control"
                                    Caption=@(NameFor(x => x.PriceDate))>
                                    <CellEditTemplate Context="model">
                                        <InputDate class="form-control" @bind-Value="model.PriceDate" />
                                    </CellEditTemplate>
                                </DataGridColumn>
                                <DataGridColumn Property=@nameof(SecurityPrice.PriceClose)
                                    Type="DataGridCellType.Control"
                                    Caption=@(NameFor(x => x.PriceClose))>
                                    <CellEditTemplate Context="model">
                                        <InputNumber class="form-control" @bind-Value="model.PriceClose" />
                                    </CellEditTemplate>
                                </DataGridColumn>
                                <DataGridColumn Property=@nameof(SecurityPrice.PriceOpen)
                                    Type="DataGridCellType.Control"
                                    Caption=@(NameFor(x => x.PriceOpen))>
                                    <CellEditTemplate Context="model">
                                        <InputNumber class="form-control" @bind-Value="model.PriceOpen" />
                                    </CellEditTemplate>
                                </DataGridColumn>
                                <DataGridColumn Property=@nameof(SecurityPrice.PriceHigh)
                                    Type="DataGridCellType.Control"
                                    Caption=@(NameFor(x => x.PriceHigh))>
                                    <CellEditTemplate Context="model">
                                        <InputNumber class="form-control" @bind-Value="model.PriceHigh" />
                                    </CellEditTemplate>
                                </DataGridColumn>
                                <DataGridColumn Property=@nameof(SecurityPrice.PriceLow)
                                    Type="DataGridCellType.Control"
                                    Caption=@(NameFor(x => x.PriceLow))>
                                    <CellEditTemplate Context="model">
                                        <InputNumber class="form-control" @bind-Value="model.PriceLow" />
                                    </CellEditTemplate>
                                </DataGridColumn>
                                <DataGridColumn Property=@nameof(SecurityPrice.Volume)
                                    Type="DataGridCellType.Control"
                                    Caption=@(NameFor(x => x.Volume))>
                                    <CellEditTemplate Context="model">
                                        <InputNumber class="form-control" @bind-Value="model.Volume" />
                                    </CellEditTemplate>
                                </DataGridColumn>
                            </DataGrid>
                        }
                    </Body>
                </ContentTile>
            </EditForm>
    }
</ThemedComponent>

@code {
    private IEnumerable<LookupModel<int, string>> SecurityLookup { get; set; }

    [Inject]    
    protected new ICollectionController<SecurityPrice> Controller { get; init; }

    /// <inheritdoc />
    protected override bool GetLoadingState() => SecurityLookup is null || WorkingEntries is null;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        // Update the hidden reference to refer the same object to avoid null reference exception.
        base.Controller = Controller;

        CheckNullParameters();

        IsLoading = true;

        try
        {
            if (SearchService is null)
                throw new ArgumentNullException(paramName: nameof(ExpressionBuilder));

            if (Controller is null)
                throw new ArgumentNullException(paramName: nameof(Controller));

            var pricesTask = Controller.SelectAsync(
                predicate: SearchService.CurrentExpression,
                pageNumber: PaginationHelper.PageIndex,
                pageSize: PaginationHelper.PageSize);

            var securityDtosTask = Controller.ReferenceQueries.GetDtosAsync<Security, int, string>(
                key: x => x.SecurityId,
                display: x => x.SecurityDescription,
                defaultKey: default,
                defaultDisplay: Strings.Caption_InputSelect_Prompt);

            await InitializationTasksAsync(pricesTask, securityDtosTask);

            var pricesResult = await pricesTask;
            var securityDtosResult = await securityDtosTask;

            SecurityLookup = securityDtosResult.Value;
            WorkingEntries = pricesResult.Value.Item1.ToList();

            Context = new(WorkingEntries);

            PaginationHelper.TotalItemCount = pricesResult.Value.Item2.ItemCount;
            PaginationHelper.ItemCount = WorkingEntries.Count;
        }
        finally
        {
            IsLoading = GetLoadingState();
        }
    }

    /// <inheritdoc/>
    protected override void Cancel_OnClick() => 
        NavigationHelper.NavigateTo($"{IndexUriRelativePath}/prices");
}
