@page "/securities/create/{RequestGuid:guid}"

@inherits ModelDetail<Security>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>
            @(PageTitle.CreateSingle().AsPageTitle())
        </PageTitle>

        <ModelPageHeader ActionMenu="@SectionNavigationMenu"
                         Header="@(PageTitle.CreateSingle())" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <CascadingValue Value="@ModelDto">
            <AttributeEntryCollectionEditor 
                TViewModelParent="SecurityAttributeDto"
                TViewModelChild="SecurityAttributeGrouping"
                TModel="Security"
                TModelChild="SecurityAttributeMemberEntry"
                OnCancelEditorClick="CancelFormHandler"
                OnValidFormSubmit="ValidFormSubmitHandler"
                EffectiveDatePath="@(x => x.EffectiveDate)"
                ModelDto="@ModelDto.AttributeViewModel"
                Mode="EditorMode.Add">
                <ViewModelCRUD>
                    <SecurityCRUD SecurityTypes="SecurityTypes"
                              SecurityExchanges="Exchanges"
                              Issuers="Issuers"
                              Disabled="false" ReadOnly="false" />
                </ViewModelCRUD>
                <ViewModelChildCRUD>
                    <SecurityAttributesCRUD Disabled="false" ReadOnly="false" />
                </ViewModelChildCRUD>
            </AttributeEntryCollectionEditor>
        </CascadingValue>
    }
</ThemedComponent>

@code {
    [Parameter]
    public Guid RequestGuid { get; init; }

    private IEnumerable<LookupModel<int, string>> Exchanges { get; set; }

    private IEnumerable<LookupModel<int, string>> SecurityTypes { get; set; }

    private IEnumerable<string> Issuers { get; set; }

    private SecurityDto ModelDto { get; set; }

    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var exchangesDtoQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecurityExchange, int, string>(
                    key: x => x.ExchangeId,
                    display: x => x.ExchangeCode);

            var securityTypesQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecurityType, int, string>(
                    key: x => x.SecurityTypeId,
                    display: x => x.SecurityTypeName);

            var issuersQuery = Controller.ReferenceQueries
                .GetManyAsync<Security>(x => (x.Issuer ?? string.Empty) != string.Empty);

            var securityQuery = Controller.GetDefaultAsync();


            var dataTasks = Task.WhenAll(
                exchangesDtoQuery,
                securityTypesQuery,
                issuersQuery,
                securityQuery);

            await dataTasks;

            if (dataTasks.Status == TaskStatus.RanToCompletion)
            {
                Model = (await securityQuery).Value;
                Exchanges = (await exchangesDtoQuery).Value;
                SecurityTypes = (await securityTypesQuery).Value;
                Issuers = (await issuersQuery).Value.Select(x => x.Issuer).Distinct();
                
                ModelDto = new(Model);
            }
            else
            {
                throw dataTasks.Exception.Flatten();
            }
        }
        finally
        {
            IsLoading = Exchanges is null ||
                SecurityTypes is null ||
                Issuers is null || Model is null || ModelDto is null;
        }
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        Model = ModelDto.ToEntity();

        var result = await RunCatchingModelUpdateException(Controller.CreateAsync(Model));

        ProcessCreatedAtAction(result?.Result as CreatedAtActionResult);
    }

    /// <summary>
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void CancelFormHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(IndexUriRelativePath);
}
