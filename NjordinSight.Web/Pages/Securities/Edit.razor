@page "/securities/{SecurityId:int}/edit"

@inherits ModelDetail<Security>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>
            @(PageTitle.UpdateSingle($"{Model.SecuritySymbol} {Model.SecurityDescription}").AsPageTitle())
        </PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu"
                         Header="@(PageTitle.UpdateSingle(Model.SecurityDescription))" />

        <CascadingValue Value="@ViewModel">
            <AttributeEntryCollectionEditor 
                TViewModelParent="SecurityAttributeDto"
                TViewModelChild="SecurityAttributeGrouping"
                TModel="Security"
                TModelChild="SecurityAttributeMemberEntry"
                OnCancelEditorClick="CancelEditorHandler"
                OnDeleteModelClick="DeleteModelHandler"
                OnValidFormSubmit="ValidFormSubmitHandler"
                EffectiveDatePath="@(x => x.EffectiveDate)"
                ViewModel="@ViewModel.AttributeViewModel"
                Mode="EditorMode.Edit">
                <ViewModelCRUD>
                    <SecurityCRUD 
                        SecurityTypes="SecurityTypes"
                        SecurityExchanges="Exchanges"
                        Issuers="Issuers"
                        Disabled="false" ReadOnly="false" />
                </ViewModelCRUD>
                <ViewModelChildCRUD>
                    <SecurityAttributesCRUD Disabled="false" ReadOnly="false" />
                </ViewModelChildCRUD>
            </AttributeEntryCollectionEditor>
        </CascadingValue>
        <ContentTile>
            <TitleAlignLeft>
                @(ModelMetadata
                    .GetAttribute<SecuritySymbol, NounAttribute>()
                    .GetPlural().ToTitleCase())
            </TitleAlignLeft>
            <TitleAlignRight>
                <button id="add-new-entry-button"
                    class="form-control button icon"
                    type="button"
                    @onclick="() => ViewModel.AddNewSecuritySymbol()">
                    <IonIcon Name="add" />
                </button>
            </TitleAlignRight>
            <Body>
                <EditForm width="100%" Model="@ViewModel.SecuritySymbols">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <DataGrid Data="@ViewModel.SecuritySymbols">
                        <DataGridColumn 
                            Property="@nameof(SecuritySymbol.SymbolTypeId)"
                            Type="DataGridCellType.Control"
                            Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.SymbolTypeId))">
                            <CellEditTemplate Context="model" >
                                  <InputSelect class="form-control" @bind-Value="model.SymbolTypeId">
                                    @foreach(var lookup in SymbolTypes)
                                    {
                                        <option value="@lookup.Key">@lookup.Display</option>
                                    }
                                </InputSelect>
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(SecuritySymbol.SymbolCode)"
                            Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.SymbolCode))">
                            <CellTemplate Context="model">
                                <div class="form-control">@model.SymbolCode</div>
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(SecuritySymbol.EffectiveDate)"
                            Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.EffectiveDate))">
                            <CellEditTemplate Context="model">
                                <InputDate class="form-control" @bind-Value="model.EffectiveDate" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(SecuritySymbol.Ticker)"
                            Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.Ticker))">
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value="model.Ticker" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(SecuritySymbol.Cusip)"
                            Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.Cusip))">
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value="model.Cusip" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control" 
                            Property="@nameof(SecuritySymbol.CustomSymbol)"
                            Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.CustomSymbol))">
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value="model.CustomSymbol" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn 
                            Type="DataGridCellType.Control"
                            Property="@nameof(SecuritySymbol.OptionTicker)"
                            Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.OptionTicker))">
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value="model.OptionTicker" />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Button">
                            <CellEditTemplate Context="model">
                                <ToolTip Text="@Strings.Caption_Button_Delete">
                                    <button class="form-control button icon" type="button"
                                        @onclick="() => ViewModel.RemoveSecuritySymbol(model)">
                                        <IonIcon Name="close-circle" />
                                    </button>
                                </ToolTip>
                            </CellEditTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </EditForm>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int SecurityId { get; set; }

    private IEnumerable<LookupModel<int, string>> Exchanges { get; set; }

    private IEnumerable<LookupModel<int, string>> SecurityTypes { get; set; }

    private IEnumerable<LookupModel<int, string>> SymbolTypes { get; set; }

    private IEnumerable<LookupModel<string, string>> SymbolCodes { get; set; }

    private IEnumerable<string> Issuers { get; set; }

    private SecurityDto ViewModel { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var exchangesDtoQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecurityExchange, int, string>(
                    key: x => x.ExchangeId,
                    display: x => x.ExchangeCode);

            var securityTypesQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecurityType, int, string>(
                    key: x => x.SecurityTypeId,
                    display: x => x.SecurityTypeName);

            var issuersQuery = Controller.ReferenceQueries
                .GetManyAsync<Security>(x => (x.Issuer ?? string.Empty) != string.Empty);

            var securityQuery = Controller.ReadAsync(SecurityId);

            var symbolTypesQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecuritySymbolType, int, string>(
                    key: x => x.SymbolTypeId,
                    display: x => x.SymbolTypeName);
            
            var dataTasks = Task.WhenAll(
                exchangesDtoQuery,
                securityTypesQuery,
                issuersQuery,
                securityQuery,
                symbolTypesQuery);

            await dataTasks;

            if (dataTasks.Status == TaskStatus.RanToCompletion)
            {
                Model = (await securityQuery).Value;
                Exchanges = (await exchangesDtoQuery).Value;
                SecurityTypes = (await securityTypesQuery).Value;
                Issuers = (await issuersQuery).Value.Select(x => x.Issuer).Distinct();
                SymbolTypes = (await symbolTypesQuery).Value;
            }
            else
            {
                throw dataTasks.Exception.Flatten();
            }

            ActionMenu = new()
                {
                    IconKey = "reorder-four",
                    Children = new()
                    {
                        // Add return to index button.
                        { 0, new MenuItem()
                            {
                                IconKey = "caret-back-circle",
                                Caption = string.Format(
                                    Strings.Caption_NavigateBackTo,
                                    ModelMetadata
                                        .GetAttribute<Security, NounAttribute>()
                                        ?.GetPlural()),
                                UriStem = $"{IndexUriRelativePath}"
                            }
                        },
                        // Add edit button.
                        { 1, new MenuItem()
                            {
                                IconKey = "pencil",
                                Caption = string.Format(
                                    Strings.Caption_EditSingle, ModelNoun?.GetSingular()),
                                UriStem = FormatEditUri(GetKeyValueOrDefault<int>(Model))
                            }
                        }
                    }
                };

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Exchanges is null ||
                SecurityTypes is null ||
                Issuers is null ||
                Model is null ||
                ViewModel is null ||
                SymbolTypes is null;
        }
    }

    /// <summary>
    /// Handles the delete click event of this page.
    /// </summary>
    private async Task DeleteModelHandler(MouseEventArgs args)
    {
        var result = await Controller.DeleteAsync(Model);

        if (result is NoContentResult _)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    /// <summary>
    /// Handles the valid form submission event of this page.
    /// </summary>
    private async Task ValidFormSubmitHandler(EditContext args)
    {
        Model = ViewModel.ToEntity();

        var result = await Controller.UpdateAsync(Model.SecurityId, Model);

        if (Model is not null)
            NavigationHelper.NavigateTo(FormatDetailUri(Model.SecurityId));
    }

    /// <summary>edit
    /// Handles the cancel editor event of this page.
    /// </summary>
    private void CancelEditorHandler(MouseEventArgs args) =>
        NavigationHelper.NavigateTo(FormatDetailUri(Model.SecurityId));
}
