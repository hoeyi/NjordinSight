@page "/report-configurations/create/{RequestGuid:guid}"

@inherits ModelDetail<ReportConfiguration>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateSingle(Model.ConfigurationCode).AsPageTitle())</PageTitle>

        <ModelPageHeader ActionMenu="@SectionNavigationMenu"
                         Header="@(PageTitle.UpdateSingle(Model.ConfigurationCode))" />

        <CascadingValue Value="@ErrorMessage">
            <ErrorMessageBox Header="@Resources.Strings.Exception_Message_Generic" />
        </CascadingValue>

        <ContentTile>
            <Body>
                <CascadingValue Value="@Model">
                    <EditForm class="model-editor" Model="@Model"
                          OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ActionButtonMenu>
                            <button type="submit" class="form-control button">
                                @Strings.Caption_Button_Save
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="Cancel_OnClick"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Cancel
                            </button>
                        </ActionButtonMenu>
                        <ReportConfigurationCRUD Disabled="false" ReadOnly="false" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
    }
</ThemedComponent>


@code {
    [Parameter]
    public Guid RequestGuid { get; init; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var modelQuery = Controller.GetDefaultAsync();

            if ((await modelQuery).Value is ReportConfiguration model)
                Model = model;
        }
        finally
        {
            IsLoading = Model is null;
        }
    }

    private void Cancel_OnClick() => NavigationHelper.NavigateTo(IndexUriRelativePath);

    protected override async Task HandleValidSubmit()
    {
        var result = await RunCatchingModelUpdateException(Controller.CreateAsync(Model));

        ProcessCreatedAtAction(result?.Result as CreatedAtActionResult);
    }
}