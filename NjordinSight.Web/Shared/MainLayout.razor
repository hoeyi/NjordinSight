@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

@using System.Text.Json
@using NjordinSight.Web.Components.Shared

<div class="page" theme_elevation="00">
    <main>
        <div class="top-row px-4 auth">
            @if(MainMenu is not null)
            {
                <div class="left">
                    <MenuBar Menu="@MainMenu" OnHyperlinkClickOverride="OnHomeLinkClick" />
                </div>
            }
            <div class="right">
                <LoginDisplay />
            </div>
        </div>

        <article class="content px-4">
            <ErrorBoundary @ref="errorBoundary">
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent Context="exception">
                    @{
                        LogUnhandledException(exception);
                    }
                    <CascadingValue Value="@GetUnhandledExcpetionMessage()">
                        <ErrorMessageBox />
                    </CascadingValue>
                </ErrorContent>
            </ErrorBoundary>
        </article>
    </main>
</div>

@code {
    [Inject]
    protected ILogger Logger { get; set; }

    private Menu MainMenu { get; set; }

    #nullable enable
    private ErrorBoundary? errorBoundary;

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }
    #nullable disable

    protected override async Task OnInitializedAsync()
    {
        MainMenu = await Resources.ResourceHelper.GetDefaultMenu() ?? new();
    }

    private readonly IReadOnlySet<MenuItem> menuItems = new HashSet<MenuItem>()
    {
        new(){ IconKey = "calendar", Caption = "Calendar" , UriStem = "/PageUnderConstruction" },
        new(){ IconKey = "newspaper", Caption = "News" , UriStem = "/PageUnderConstruction" },
        new(){ IconKey = "stats-chart", Caption = "Reports" , UriStem = "/PageUnderConstruction" },
        new(){ IconKey = "planet", Caption = "Geography" , UriStem = "/PageUnderConstruction" }
    };

    private void OnHomeLinkClick(MouseEventArgs args)
    {
        if (NavigationManager.Uri == NavigationManager.BaseUri)
            return;
        else
            NavigationManager.NavigateTo(NavigationManager.BaseUri);
    }

    private string GetUnhandledExcpetionMessage() =>
        string.Format(Resources.Strings.Exception_Unhandled_Critical, DateTime.Now);

    private void LogUnhandledException(Exception exception) =>
        Logger?.UnhandledExceptionEncountered(exception);
}
