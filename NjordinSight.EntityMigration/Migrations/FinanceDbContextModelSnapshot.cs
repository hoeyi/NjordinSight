// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NjordinSight.EntityModel.Context;

#nullable disable

namespace NjordinSight.EntityMigration.Migrations
{
    [DbContext(typeof(FinanceDbContext))]
    partial class FinanceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("seqAuditEventID", "FinanceApp")
                .HasMin(1L);

            modelBuilder.HasSequence<int>("seqModelAttributeMember", "FinanceApp");

            modelBuilder.Entity("NjordinSight.EntityModel.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int?>("AccountCustodianId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCustodianID");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<DateTime?>("BooksClosedDate")
                        .HasColumnType("date");

                    b.Property<bool>("HasBankTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBrokerTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWallet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplianceTradable")
                        .HasColumnType("bit");

                    b.HasKey("AccountId");

                    b.HasIndex(new[] { "AccountCustodianId" }, "IX_Account_AccountCustodianID");

                    b.ToTable("Account", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountAttributeMemberEntry", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(0);

                    b.Property<int>("AccountObjectId")
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("AttributeMemberId", "AccountObjectId", "EffectiveDate");

                    b.HasIndex(new[] { "AccountObjectId" }, "IX_AccountAttributeMemberEntry_AccountObjectID");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_AccountAttributeMemberEntry_AttributeMemberID");

                    b.ToTable("AccountAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountComposite", b =>
                {
                    b.Property<int>("AccountCompositeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCompositeID");

                    b.HasKey("AccountCompositeId");

                    b.ToTable("AccountComposite", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountCompositeMember", b =>
                {
                    b.Property<int>("AccountCompositeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCompositeID")
                        .HasColumnOrder(0);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<string>("Comment")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("date");

                    b.HasKey("AccountCompositeId", "AccountId", "EntryDate");

                    b.HasIndex(new[] { "AccountCompositeId" }, "IX_AccountCompositeMember_AccountCompositeID");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountCompositeMember_AccountID");

                    b.ToTable("AccountCompositeMember", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountCustodian", b =>
                {
                    b.Property<int>("AccountCustodianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountCustodianID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountCustodianId"), 1L, 1);

                    b.Property<string>("CustodianCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.HasKey("AccountCustodianId");

                    b.HasIndex(new[] { "CustodianCode" }, "UNI_AccountCustodian_CustodianCode")
                        .IsUnique()
                        .HasFilter("([CustodianCode] IS NOT NULL)");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_AccountCustodian_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.ToTable("AccountCustodian", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountObject", b =>
                {
                    b.Property<int>("AccountObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountObjectId"), 1L, 1);

                    b.Property<string>("AccountObjectCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("date");

                    b.Property<string>("ObjectDescription")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ObjectDisplayName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<string>("PrefixedObjectCode")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComputedColumnSql("(case when [ObjectType]='c' then concat('+',[AccountObjectCode]) else [AccountObjectCode] end)", true);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("AccountObjectId");

                    b.HasIndex(new[] { "AccountObjectCode" }, "UNI_AccountObject_AccountObjectCode")
                        .IsUnique()
                        .HasFilter("([AccountObjectCode] IS NOT NULL)");

                    b.ToTable("AccountObject", "FinanceApp");

                    b.HasCheckConstraint("CK_AccountObject_ObjectType", "[ObjectType] IN ('c','a')");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountWallet", b =>
                {
                    b.Property<int>("AccountWalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountWalletID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountWalletId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("AddressCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("AddressTag")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<int>("DenominationSecurityId")
                        .HasColumnType("int")
                        .HasColumnName("DenominationSecurityID");

                    b.HasKey("AccountWalletId");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountWallet_AccountID");

                    b.HasIndex(new[] { "DenominationSecurityId", "AccountId" }, "UNI_AccountWallet_RowDef")
                        .IsUnique();

                    b.ToTable("AccountWallet", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AuditEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    b.Property<int>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUserID");

                    b.Property<DateTime>("EventTimeUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("EventTimeUTC");

                    b.HasKey("EventId");

                    b.ToTable("AuditEvent", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("Comment")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("TransactionVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TransactionId");

                    b.HasIndex(new[] { "AccountId" }, "IX_BankTransaction_AccountID");

                    b.HasIndex(new[] { "TransactionCodeId" }, "IX_BankTransaction_TransactionCodeID");

                    b.ToTable("BankTransaction", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransactionCode", b =>
                {
                    b.Property<int>("TransactionCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionCodeId"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("TransactionCodeId")
                        .HasName("PK_BankTransactionSymbol");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_BankTransactionCode_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.HasIndex(new[] { "TransactionCode" }, "UNI_BankTransactionCode_TransactionCode")
                        .IsUnique()
                        .HasFilter("([TransactionCode] IS NOT NULL)");

                    b.ToTable("BankTransactionCode", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransactionCodeAttributeMemberEntry", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(0);

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("AttributeMemberId", "TransactionCodeId", "EffectiveDate");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_BankTransactionCodeAttributeMemberEntry_AttributeMemberID");

                    b.HasIndex(new[] { "TransactionCodeId" }, "IX_BankTransactionCodeAttributeMemberEntry_TransactionCodeID");

                    b.ToTable("BankTransactionCodeAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<DateTime?>("AcquisitionDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("DepSecurityId")
                        .HasColumnType("int")
                        .HasColumnName("DepSecurityID");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(9,4)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(19,6)");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    b.Property<DateTime?>("SettleDate")
                        .HasColumnType("date");

                    b.Property<int?>("TaxLotId")
                        .HasColumnType("int")
                        .HasColumnName("TaxLotID");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("date");

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    b.Property<decimal?>("Withholding")
                        .HasColumnType("decimal(9,4)");

                    b.HasKey("TransactionId");

                    b.HasIndex(new[] { "AccountId" }, "IX_BrokerTransaction_AccountID");

                    b.HasIndex(new[] { "DepSecurityId" }, "IX_BrokerTransaction_DepSecurityID");

                    b.HasIndex(new[] { "SecurityId" }, "IX_BrokerTransaction_SecurityID");

                    b.HasIndex(new[] { "TaxLotId" }, "IX_BrokerTransaction_TaxLotID");

                    b.HasIndex(new[] { "TransactionCodeId" }, "IX_BrokerTransaction_TransactionCodeID");

                    b.ToTable("BrokerTransaction", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransactionCode", b =>
                {
                    b.Property<int>("TransactionCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionCodeId"), 1L, 1);

                    b.Property<short>("CashEffect")
                        .HasColumnType("smallint");

                    b.Property<short>("ContributionWithdrawalEffect")
                        .HasColumnType("smallint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<short>("QuantityEffect")
                        .HasColumnType("smallint");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength();

                    b.HasKey("TransactionCodeId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_BrokerTransactionCode_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.HasIndex(new[] { "TransactionCode" }, "UNI_BrokerTransactionCode_TransactionCode")
                        .IsUnique()
                        .HasFilter("([TransactionCode] IS NOT NULL)");

                    b.ToTable("BrokerTransactionCode", "FinanceApp");

                    b.HasData(
                        new
                        {
                            TransactionCodeId = -10,
                            CashEffect = (short)-1,
                            ContributionWithdrawalEffect = (short)0,
                            DisplayName = "Buy to cover",
                            QuantityEffect = (short)1,
                            TransactionCode = "btc"
                        },
                        new
                        {
                            TransactionCodeId = -11,
                            CashEffect = (short)-1,
                            ContributionWithdrawalEffect = (short)0,
                            DisplayName = "Buy",
                            QuantityEffect = (short)1,
                            TransactionCode = "buy"
                        },
                        new
                        {
                            TransactionCodeId = -12,
                            CashEffect = (short)1,
                            ContributionWithdrawalEffect = (short)1,
                            DisplayName = "Deposit",
                            QuantityEffect = (short)0,
                            TransactionCode = "dep"
                        },
                        new
                        {
                            TransactionCodeId = -13,
                            CashEffect = (short)1,
                            ContributionWithdrawalEffect = (short)0,
                            DisplayName = "Dividend",
                            QuantityEffect = (short)0,
                            TransactionCode = "div"
                        },
                        new
                        {
                            TransactionCodeId = -14,
                            CashEffect = (short)-1,
                            ContributionWithdrawalEffect = (short)-1,
                            DisplayName = "Expense",
                            QuantityEffect = (short)0,
                            TransactionCode = "exp"
                        },
                        new
                        {
                            TransactionCodeId = -15,
                            CashEffect = (short)0,
                            ContributionWithdrawalEffect = (short)-1,
                            DisplayName = "Forfeit shares",
                            QuantityEffect = (short)-1,
                            TransactionCode = "frt"
                        },
                        new
                        {
                            TransactionCodeId = -16,
                            CashEffect = (short)1,
                            ContributionWithdrawalEffect = (short)0,
                            DisplayName = "Interest",
                            QuantityEffect = (short)0,
                            TransactionCode = "int"
                        },
                        new
                        {
                            TransactionCodeId = -17,
                            CashEffect = (short)0,
                            ContributionWithdrawalEffect = (short)1,
                            DisplayName = "Deliver-in",
                            QuantityEffect = (short)1,
                            TransactionCode = "dli"
                        },
                        new
                        {
                            TransactionCodeId = -18,
                            CashEffect = (short)0,
                            ContributionWithdrawalEffect = (short)-1,
                            DisplayName = "Deliver-out",
                            QuantityEffect = (short)-1,
                            TransactionCode = "dlo"
                        },
                        new
                        {
                            TransactionCodeId = -19,
                            CashEffect = (short)-1,
                            ContributionWithdrawalEffect = (short)0,
                            DisplayName = "Pay-down",
                            QuantityEffect = (short)-1,
                            TransactionCode = "pdn"
                        },
                        new
                        {
                            TransactionCodeId = -20,
                            CashEffect = (short)1,
                            ContributionWithdrawalEffect = (short)0,
                            DisplayName = "Sale",
                            QuantityEffect = (short)-1,
                            TransactionCode = "sll"
                        },
                        new
                        {
                            TransactionCodeId = -21,
                            CashEffect = (short)1,
                            ContributionWithdrawalEffect = (short)0,
                            DisplayName = "Short sale",
                            QuantityEffect = (short)-1,
                            TransactionCode = "ssl"
                        },
                        new
                        {
                            TransactionCodeId = -22,
                            CashEffect = (short)-1,
                            ContributionWithdrawalEffect = (short)-1,
                            DisplayName = "Withdrawal",
                            QuantityEffect = (short)0,
                            TransactionCode = "wth"
                        },
                        new
                        {
                            TransactionCodeId = -23,
                            CashEffect = (short)1,
                            ContributionWithdrawalEffect = (short)1,
                            DisplayName = "Change in value",
                            QuantityEffect = (short)1,
                            TransactionCode = "chn"
                        },
                        new
                        {
                            TransactionCodeId = -24,
                            CashEffect = (short)1,
                            ContributionWithdrawalEffect = (short)1,
                            DisplayName = "Plan contribution",
                            QuantityEffect = (short)0,
                            TransactionCode = "plc"
                        },
                        new
                        {
                            TransactionCodeId = -25,
                            CashEffect = (short)-1,
                            ContributionWithdrawalEffect = (short)-1,
                            DisplayName = "Accrued interest",
                            QuantityEffect = (short)0,
                            TransactionCode = "ain"
                        },
                        new
                        {
                            TransactionCodeId = -26,
                            CashEffect = (short)1,
                            ContributionWithdrawalEffect = (short)0,
                            DisplayName = "Capital return",
                            QuantityEffect = (short)0,
                            TransactionCode = "cap"
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransactionCodeAttributeMemberEntry", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(0);

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("AttributeMemberId", "TransactionCodeId", "EffectiveDate");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_BrokerTransactionCodeAttributeMemberEntry_AttributeMemberID");

                    b.HasIndex(new[] { "TransactionCodeId" }, "IX_BrokerTransactionCodeAttributeMemberEntry_TransactionCodeID");

                    b.ToTable("BrokerTransactionCodeAttributeMemberEntry", "FinanceApp");

                    b.HasData(
                        new
                        {
                            AttributeMemberId = -401,
                            TransactionCodeId = -25,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -402,
                            TransactionCodeId = -11,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -403,
                            TransactionCodeId = -10,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -404,
                            TransactionCodeId = -26,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -405,
                            TransactionCodeId = -23,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -406,
                            TransactionCodeId = -17,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -407,
                            TransactionCodeId = -18,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -406,
                            TransactionCodeId = -12,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -408,
                            TransactionCodeId = -13,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -409,
                            TransactionCodeId = -14,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -410,
                            TransactionCodeId = -15,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -411,
                            TransactionCodeId = -16,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -412,
                            TransactionCodeId = -19,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -406,
                            TransactionCodeId = -24,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -414,
                            TransactionCodeId = -20,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -407,
                            TransactionCodeId = -21,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -407,
                            TransactionCodeId = -22,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -501,
                            TransactionCodeId = -25,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -502,
                            TransactionCodeId = -11,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -502,
                            TransactionCodeId = -10,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -503,
                            TransactionCodeId = -26,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -504,
                            TransactionCodeId = -23,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -505,
                            TransactionCodeId = -17,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -505,
                            TransactionCodeId = -18,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -505,
                            TransactionCodeId = -12,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -503,
                            TransactionCodeId = -13,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -501,
                            TransactionCodeId = -14,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -506,
                            TransactionCodeId = -15,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -503,
                            TransactionCodeId = -16,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -503,
                            TransactionCodeId = -19,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -505,
                            TransactionCodeId = -24,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -502,
                            TransactionCodeId = -20,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -502,
                            TransactionCodeId = -21,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        },
                        new
                        {
                            AttributeMemberId = -505,
                            TransactionCodeId = -22,
                            EffectiveDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Weight = 1m
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<string>("IsoCode3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength();

                    b.HasKey("CountryId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_Country_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.HasIndex(new[] { "IsoCode3" }, "UNI_Country_IsoCode3")
                        .IsUnique()
                        .HasFilter("([IsoCode3] IS NOT NULL)");

                    b.ToTable("Country", "FinanceApp");

                    b.HasData(
                        new
                        {
                            CountryId = -600,
                            DisplayName = "Afghanistan",
                            IsoCode3 = "AFG"
                        },
                        new
                        {
                            CountryId = -601,
                            DisplayName = "Albania",
                            IsoCode3 = "ALB"
                        },
                        new
                        {
                            CountryId = -602,
                            DisplayName = "Algeria",
                            IsoCode3 = "DZA"
                        },
                        new
                        {
                            CountryId = -603,
                            DisplayName = "American Samoa",
                            IsoCode3 = "ASM"
                        },
                        new
                        {
                            CountryId = -604,
                            DisplayName = "Andorra",
                            IsoCode3 = "AND"
                        },
                        new
                        {
                            CountryId = -605,
                            DisplayName = "Angola",
                            IsoCode3 = "AGO"
                        },
                        new
                        {
                            CountryId = -606,
                            DisplayName = "Anguilla",
                            IsoCode3 = "AIA"
                        },
                        new
                        {
                            CountryId = -607,
                            DisplayName = "Antarctica",
                            IsoCode3 = "ATA"
                        },
                        new
                        {
                            CountryId = -608,
                            DisplayName = "Antigua and Barbuda",
                            IsoCode3 = "ATG"
                        },
                        new
                        {
                            CountryId = -609,
                            DisplayName = "Argentina",
                            IsoCode3 = "ARG"
                        },
                        new
                        {
                            CountryId = -610,
                            DisplayName = "Armenia",
                            IsoCode3 = "ARM"
                        },
                        new
                        {
                            CountryId = -611,
                            DisplayName = "Aruba",
                            IsoCode3 = "ABW"
                        },
                        new
                        {
                            CountryId = -612,
                            DisplayName = "Australia",
                            IsoCode3 = "AUS"
                        },
                        new
                        {
                            CountryId = -613,
                            DisplayName = "Austria",
                            IsoCode3 = "AUT"
                        },
                        new
                        {
                            CountryId = -614,
                            DisplayName = "Azerbaijan",
                            IsoCode3 = "AZE"
                        },
                        new
                        {
                            CountryId = -615,
                            DisplayName = "Bahamas (the)",
                            IsoCode3 = "BHS"
                        },
                        new
                        {
                            CountryId = -616,
                            DisplayName = "Bahrain",
                            IsoCode3 = "BHR"
                        },
                        new
                        {
                            CountryId = -617,
                            DisplayName = "Bangladesh",
                            IsoCode3 = "BGD"
                        },
                        new
                        {
                            CountryId = -618,
                            DisplayName = "Barbados",
                            IsoCode3 = "BRB"
                        },
                        new
                        {
                            CountryId = -619,
                            DisplayName = "Belarus",
                            IsoCode3 = "BLR"
                        },
                        new
                        {
                            CountryId = -620,
                            DisplayName = "Belgium",
                            IsoCode3 = "BEL"
                        },
                        new
                        {
                            CountryId = -621,
                            DisplayName = "Belize",
                            IsoCode3 = "BLZ"
                        },
                        new
                        {
                            CountryId = -622,
                            DisplayName = "Benin",
                            IsoCode3 = "BEN"
                        },
                        new
                        {
                            CountryId = -623,
                            DisplayName = "Bermuda",
                            IsoCode3 = "BMU"
                        },
                        new
                        {
                            CountryId = -624,
                            DisplayName = "Bhutan",
                            IsoCode3 = "BTN"
                        },
                        new
                        {
                            CountryId = -625,
                            DisplayName = "Bolivia (Plurinational State of)",
                            IsoCode3 = "BOL"
                        },
                        new
                        {
                            CountryId = -626,
                            DisplayName = "Bonaire, Sint Eustatius and Saba",
                            IsoCode3 = "BES"
                        },
                        new
                        {
                            CountryId = -627,
                            DisplayName = "Bosnia and Herzegovina",
                            IsoCode3 = "BIH"
                        },
                        new
                        {
                            CountryId = -628,
                            DisplayName = "Botswana",
                            IsoCode3 = "BWA"
                        },
                        new
                        {
                            CountryId = -629,
                            DisplayName = "Bouvet Island",
                            IsoCode3 = "BVT"
                        },
                        new
                        {
                            CountryId = -630,
                            DisplayName = "Brazil",
                            IsoCode3 = "BRA"
                        },
                        new
                        {
                            CountryId = -631,
                            DisplayName = "British Indian Ocean Territory (the)",
                            IsoCode3 = "IOT"
                        },
                        new
                        {
                            CountryId = -632,
                            DisplayName = "Brunei Darussalam",
                            IsoCode3 = "BRN"
                        },
                        new
                        {
                            CountryId = -633,
                            DisplayName = "Bulgaria",
                            IsoCode3 = "BGR"
                        },
                        new
                        {
                            CountryId = -634,
                            DisplayName = "Burkina Faso",
                            IsoCode3 = "BFA"
                        },
                        new
                        {
                            CountryId = -635,
                            DisplayName = "Burundi",
                            IsoCode3 = "BDI"
                        },
                        new
                        {
                            CountryId = -636,
                            DisplayName = "Cabo Verde",
                            IsoCode3 = "CPV"
                        },
                        new
                        {
                            CountryId = -637,
                            DisplayName = "Cambodia",
                            IsoCode3 = "KHM"
                        },
                        new
                        {
                            CountryId = -638,
                            DisplayName = "Cameroon",
                            IsoCode3 = "CMR"
                        },
                        new
                        {
                            CountryId = -639,
                            DisplayName = "Canada",
                            IsoCode3 = "CAN"
                        },
                        new
                        {
                            CountryId = -640,
                            DisplayName = "Cayman Islands (the)",
                            IsoCode3 = "CYM"
                        },
                        new
                        {
                            CountryId = -641,
                            DisplayName = "Central African Republic (the)",
                            IsoCode3 = "CAF"
                        },
                        new
                        {
                            CountryId = -642,
                            DisplayName = "Chad",
                            IsoCode3 = "TCD"
                        },
                        new
                        {
                            CountryId = -643,
                            DisplayName = "Chile",
                            IsoCode3 = "CHL"
                        },
                        new
                        {
                            CountryId = -644,
                            DisplayName = "China",
                            IsoCode3 = "CHN"
                        },
                        new
                        {
                            CountryId = -645,
                            DisplayName = "Christmas Island",
                            IsoCode3 = "CXR"
                        },
                        new
                        {
                            CountryId = -646,
                            DisplayName = "Cocos (Keeling) Islands (the)",
                            IsoCode3 = "CCK"
                        },
                        new
                        {
                            CountryId = -647,
                            DisplayName = "Colombia",
                            IsoCode3 = "COL"
                        },
                        new
                        {
                            CountryId = -648,
                            DisplayName = "Comoros (the)",
                            IsoCode3 = "COM"
                        },
                        new
                        {
                            CountryId = -649,
                            DisplayName = "Congo (the Democratic Republic of the)",
                            IsoCode3 = "COD"
                        },
                        new
                        {
                            CountryId = -650,
                            DisplayName = "Congo (the)",
                            IsoCode3 = "COG"
                        },
                        new
                        {
                            CountryId = -651,
                            DisplayName = "Cook Islands (the)",
                            IsoCode3 = "COK"
                        },
                        new
                        {
                            CountryId = -652,
                            DisplayName = "Costa Rica",
                            IsoCode3 = "CRI"
                        },
                        new
                        {
                            CountryId = -653,
                            DisplayName = "Croatia",
                            IsoCode3 = "HRV"
                        },
                        new
                        {
                            CountryId = -654,
                            DisplayName = "Cuba",
                            IsoCode3 = "CUB"
                        },
                        new
                        {
                            CountryId = -655,
                            DisplayName = "Curaçao",
                            IsoCode3 = "CUW"
                        },
                        new
                        {
                            CountryId = -656,
                            DisplayName = "Cyprus",
                            IsoCode3 = "CYP"
                        },
                        new
                        {
                            CountryId = -657,
                            DisplayName = "Czechia",
                            IsoCode3 = "CZE"
                        },
                        new
                        {
                            CountryId = -658,
                            DisplayName = "Côte d'Ivoire",
                            IsoCode3 = "CIV"
                        },
                        new
                        {
                            CountryId = -659,
                            DisplayName = "Denmark",
                            IsoCode3 = "DNK"
                        },
                        new
                        {
                            CountryId = -660,
                            DisplayName = "Djibouti",
                            IsoCode3 = "DJI"
                        },
                        new
                        {
                            CountryId = -661,
                            DisplayName = "Dominica",
                            IsoCode3 = "DMA"
                        },
                        new
                        {
                            CountryId = -662,
                            DisplayName = "Dominican Republic (the)",
                            IsoCode3 = "DOM"
                        },
                        new
                        {
                            CountryId = -663,
                            DisplayName = "Ecuador",
                            IsoCode3 = "ECU"
                        },
                        new
                        {
                            CountryId = -664,
                            DisplayName = "Egypt",
                            IsoCode3 = "EGY"
                        },
                        new
                        {
                            CountryId = -665,
                            DisplayName = "El Salvador",
                            IsoCode3 = "SLV"
                        },
                        new
                        {
                            CountryId = -666,
                            DisplayName = "Equatorial Guinea",
                            IsoCode3 = "GNQ"
                        },
                        new
                        {
                            CountryId = -667,
                            DisplayName = "Eritrea",
                            IsoCode3 = "ERI"
                        },
                        new
                        {
                            CountryId = -668,
                            DisplayName = "Estonia",
                            IsoCode3 = "EST"
                        },
                        new
                        {
                            CountryId = -669,
                            DisplayName = "Eswatini",
                            IsoCode3 = "SWZ"
                        },
                        new
                        {
                            CountryId = -670,
                            DisplayName = "Ethiopia",
                            IsoCode3 = "ETH"
                        },
                        new
                        {
                            CountryId = -671,
                            DisplayName = "Falkland Islands (the) [Malvinas]",
                            IsoCode3 = "FLK"
                        },
                        new
                        {
                            CountryId = -672,
                            DisplayName = "Faroe Islands (the)",
                            IsoCode3 = "FRO"
                        },
                        new
                        {
                            CountryId = -673,
                            DisplayName = "Fiji",
                            IsoCode3 = "FJI"
                        },
                        new
                        {
                            CountryId = -674,
                            DisplayName = "Finland",
                            IsoCode3 = "FIN"
                        },
                        new
                        {
                            CountryId = -675,
                            DisplayName = "France",
                            IsoCode3 = "FRA"
                        },
                        new
                        {
                            CountryId = -676,
                            DisplayName = "French Guiana",
                            IsoCode3 = "GUF"
                        },
                        new
                        {
                            CountryId = -677,
                            DisplayName = "French Polynesia",
                            IsoCode3 = "PYF"
                        },
                        new
                        {
                            CountryId = -678,
                            DisplayName = "French Southern Territories (the)",
                            IsoCode3 = "ATF"
                        },
                        new
                        {
                            CountryId = -679,
                            DisplayName = "Gabon",
                            IsoCode3 = "GAB"
                        },
                        new
                        {
                            CountryId = -680,
                            DisplayName = "Gambia (the)",
                            IsoCode3 = "GMB"
                        },
                        new
                        {
                            CountryId = -681,
                            DisplayName = "Georgia",
                            IsoCode3 = "GEO"
                        },
                        new
                        {
                            CountryId = -682,
                            DisplayName = "Germany",
                            IsoCode3 = "DEU"
                        },
                        new
                        {
                            CountryId = -683,
                            DisplayName = "Ghana",
                            IsoCode3 = "GHA"
                        },
                        new
                        {
                            CountryId = -684,
                            DisplayName = "Gibraltar",
                            IsoCode3 = "GIB"
                        },
                        new
                        {
                            CountryId = -685,
                            DisplayName = "Greece",
                            IsoCode3 = "GRC"
                        },
                        new
                        {
                            CountryId = -686,
                            DisplayName = "Greenland",
                            IsoCode3 = "GRL"
                        },
                        new
                        {
                            CountryId = -687,
                            DisplayName = "Grenada",
                            IsoCode3 = "GRD"
                        },
                        new
                        {
                            CountryId = -688,
                            DisplayName = "Guadeloupe",
                            IsoCode3 = "GLP"
                        },
                        new
                        {
                            CountryId = -689,
                            DisplayName = "Guam",
                            IsoCode3 = "GUM"
                        },
                        new
                        {
                            CountryId = -690,
                            DisplayName = "Guatemala",
                            IsoCode3 = "GTM"
                        },
                        new
                        {
                            CountryId = -691,
                            DisplayName = "Guernsey",
                            IsoCode3 = "GGY"
                        },
                        new
                        {
                            CountryId = -692,
                            DisplayName = "Guinea",
                            IsoCode3 = "GIN"
                        },
                        new
                        {
                            CountryId = -693,
                            DisplayName = "Guinea-Bissau",
                            IsoCode3 = "GNB"
                        },
                        new
                        {
                            CountryId = -694,
                            DisplayName = "Guyana",
                            IsoCode3 = "GUY"
                        },
                        new
                        {
                            CountryId = -695,
                            DisplayName = "Haiti",
                            IsoCode3 = "HTI"
                        },
                        new
                        {
                            CountryId = -696,
                            DisplayName = "Heard Island and McDonald Islands",
                            IsoCode3 = "HMD"
                        },
                        new
                        {
                            CountryId = -697,
                            DisplayName = "Holy See (the)",
                            IsoCode3 = "VAT"
                        },
                        new
                        {
                            CountryId = -698,
                            DisplayName = "Honduras",
                            IsoCode3 = "HND"
                        },
                        new
                        {
                            CountryId = -699,
                            DisplayName = "Hong Kong",
                            IsoCode3 = "HKG"
                        },
                        new
                        {
                            CountryId = -700,
                            DisplayName = "Hungary",
                            IsoCode3 = "HUN"
                        },
                        new
                        {
                            CountryId = -701,
                            DisplayName = "Iceland",
                            IsoCode3 = "ISL"
                        },
                        new
                        {
                            CountryId = -702,
                            DisplayName = "India",
                            IsoCode3 = "IND"
                        },
                        new
                        {
                            CountryId = -703,
                            DisplayName = "Indonesia",
                            IsoCode3 = "IDN"
                        },
                        new
                        {
                            CountryId = -704,
                            DisplayName = "Iran (Islamic Republic of)",
                            IsoCode3 = "IRN"
                        },
                        new
                        {
                            CountryId = -705,
                            DisplayName = "Iraq",
                            IsoCode3 = "IRQ"
                        },
                        new
                        {
                            CountryId = -706,
                            DisplayName = "Ireland",
                            IsoCode3 = "IRL"
                        },
                        new
                        {
                            CountryId = -707,
                            DisplayName = "Isle of Man",
                            IsoCode3 = "IMN"
                        },
                        new
                        {
                            CountryId = -708,
                            DisplayName = "Israel",
                            IsoCode3 = "ISR"
                        },
                        new
                        {
                            CountryId = -709,
                            DisplayName = "Italy",
                            IsoCode3 = "ITA"
                        },
                        new
                        {
                            CountryId = -710,
                            DisplayName = "Jamaica",
                            IsoCode3 = "JAM"
                        },
                        new
                        {
                            CountryId = -711,
                            DisplayName = "Japan",
                            IsoCode3 = "JPN"
                        },
                        new
                        {
                            CountryId = -712,
                            DisplayName = "Jersey",
                            IsoCode3 = "JEY"
                        },
                        new
                        {
                            CountryId = -713,
                            DisplayName = "Jordan",
                            IsoCode3 = "JOR"
                        },
                        new
                        {
                            CountryId = -714,
                            DisplayName = "Kazakhstan",
                            IsoCode3 = "KAZ"
                        },
                        new
                        {
                            CountryId = -715,
                            DisplayName = "Kenya",
                            IsoCode3 = "KEN"
                        },
                        new
                        {
                            CountryId = -716,
                            DisplayName = "Kiribati",
                            IsoCode3 = "KIR"
                        },
                        new
                        {
                            CountryId = -717,
                            DisplayName = "Korea (the Democratic People's Republic of)",
                            IsoCode3 = "PRK"
                        },
                        new
                        {
                            CountryId = -718,
                            DisplayName = "Korea (the Republic of)",
                            IsoCode3 = "KOR"
                        },
                        new
                        {
                            CountryId = -719,
                            DisplayName = "Kuwait",
                            IsoCode3 = "KWT"
                        },
                        new
                        {
                            CountryId = -720,
                            DisplayName = "Kyrgyzstan",
                            IsoCode3 = "KGZ"
                        },
                        new
                        {
                            CountryId = -721,
                            DisplayName = "Lao People's Democratic Republic (the)",
                            IsoCode3 = "LAO"
                        },
                        new
                        {
                            CountryId = -722,
                            DisplayName = "Latvia",
                            IsoCode3 = "LVA"
                        },
                        new
                        {
                            CountryId = -723,
                            DisplayName = "Lebanon",
                            IsoCode3 = "LBN"
                        },
                        new
                        {
                            CountryId = -724,
                            DisplayName = "Lesotho",
                            IsoCode3 = "LSO"
                        },
                        new
                        {
                            CountryId = -725,
                            DisplayName = "Liberia",
                            IsoCode3 = "LBR"
                        },
                        new
                        {
                            CountryId = -726,
                            DisplayName = "Libya",
                            IsoCode3 = "LBY"
                        },
                        new
                        {
                            CountryId = -727,
                            DisplayName = "Liechtenstein",
                            IsoCode3 = "LIE"
                        },
                        new
                        {
                            CountryId = -728,
                            DisplayName = "Lithuania",
                            IsoCode3 = "LTU"
                        },
                        new
                        {
                            CountryId = -729,
                            DisplayName = "Luxembourg",
                            IsoCode3 = "LUX"
                        },
                        new
                        {
                            CountryId = -730,
                            DisplayName = "Macao",
                            IsoCode3 = "MAC"
                        },
                        new
                        {
                            CountryId = -731,
                            DisplayName = "Macedonia (the former Yugoslav Republic of)",
                            IsoCode3 = "MKD"
                        },
                        new
                        {
                            CountryId = -732,
                            DisplayName = "Madagascar",
                            IsoCode3 = "MDG"
                        },
                        new
                        {
                            CountryId = -733,
                            DisplayName = "Malawi",
                            IsoCode3 = "MWI"
                        },
                        new
                        {
                            CountryId = -734,
                            DisplayName = "Malaysia",
                            IsoCode3 = "MYS"
                        },
                        new
                        {
                            CountryId = -735,
                            DisplayName = "Maldives",
                            IsoCode3 = "MDV"
                        },
                        new
                        {
                            CountryId = -736,
                            DisplayName = "Mali",
                            IsoCode3 = "MLI"
                        },
                        new
                        {
                            CountryId = -737,
                            DisplayName = "Malta",
                            IsoCode3 = "MLT"
                        },
                        new
                        {
                            CountryId = -738,
                            DisplayName = "Marshall Islands (the)",
                            IsoCode3 = "MHL"
                        },
                        new
                        {
                            CountryId = -739,
                            DisplayName = "Martinique",
                            IsoCode3 = "MTQ"
                        },
                        new
                        {
                            CountryId = -740,
                            DisplayName = "Mauritania",
                            IsoCode3 = "MRT"
                        },
                        new
                        {
                            CountryId = -741,
                            DisplayName = "Mauritius",
                            IsoCode3 = "MUS"
                        },
                        new
                        {
                            CountryId = -742,
                            DisplayName = "Mayotte",
                            IsoCode3 = "MYT"
                        },
                        new
                        {
                            CountryId = -743,
                            DisplayName = "Mexico",
                            IsoCode3 = "MEX"
                        },
                        new
                        {
                            CountryId = -744,
                            DisplayName = "Micronesia (Federated States of)",
                            IsoCode3 = "FSM"
                        },
                        new
                        {
                            CountryId = -745,
                            DisplayName = "Moldova (the Republic of)",
                            IsoCode3 = "MDA"
                        },
                        new
                        {
                            CountryId = -746,
                            DisplayName = "Monaco",
                            IsoCode3 = "MCO"
                        },
                        new
                        {
                            CountryId = -747,
                            DisplayName = "Mongolia",
                            IsoCode3 = "MNG"
                        },
                        new
                        {
                            CountryId = -748,
                            DisplayName = "Montenegro",
                            IsoCode3 = "MNE"
                        },
                        new
                        {
                            CountryId = -749,
                            DisplayName = "Montserrat",
                            IsoCode3 = "MSR"
                        },
                        new
                        {
                            CountryId = -750,
                            DisplayName = "Morocco",
                            IsoCode3 = "MAR"
                        },
                        new
                        {
                            CountryId = -751,
                            DisplayName = "Mozambique",
                            IsoCode3 = "MOZ"
                        },
                        new
                        {
                            CountryId = -752,
                            DisplayName = "Myanmar",
                            IsoCode3 = "MMR"
                        },
                        new
                        {
                            CountryId = -753,
                            DisplayName = "Namibia",
                            IsoCode3 = "NAM"
                        },
                        new
                        {
                            CountryId = -754,
                            DisplayName = "Nauru",
                            IsoCode3 = "NRU"
                        },
                        new
                        {
                            CountryId = -755,
                            DisplayName = "Nepal",
                            IsoCode3 = "NPL"
                        },
                        new
                        {
                            CountryId = -756,
                            DisplayName = "Netherlands (the)",
                            IsoCode3 = "NLD"
                        },
                        new
                        {
                            CountryId = -757,
                            DisplayName = "New Caledonia",
                            IsoCode3 = "NCL"
                        },
                        new
                        {
                            CountryId = -758,
                            DisplayName = "New Zealand",
                            IsoCode3 = "NZL"
                        },
                        new
                        {
                            CountryId = -759,
                            DisplayName = "Nicaragua",
                            IsoCode3 = "NIC"
                        },
                        new
                        {
                            CountryId = -760,
                            DisplayName = "Niger (the)",
                            IsoCode3 = "NER"
                        },
                        new
                        {
                            CountryId = -761,
                            DisplayName = "Nigeria",
                            IsoCode3 = "NGA"
                        },
                        new
                        {
                            CountryId = -762,
                            DisplayName = "Niue",
                            IsoCode3 = "NIU"
                        },
                        new
                        {
                            CountryId = -763,
                            DisplayName = "Norfolk Island",
                            IsoCode3 = "NFK"
                        },
                        new
                        {
                            CountryId = -764,
                            DisplayName = "Northern Mariana Islands (the)",
                            IsoCode3 = "MNP"
                        },
                        new
                        {
                            CountryId = -765,
                            DisplayName = "Norway",
                            IsoCode3 = "NOR"
                        },
                        new
                        {
                            CountryId = -766,
                            DisplayName = "Oman",
                            IsoCode3 = "OMN"
                        },
                        new
                        {
                            CountryId = -767,
                            DisplayName = "Pakistan",
                            IsoCode3 = "PAK"
                        },
                        new
                        {
                            CountryId = -768,
                            DisplayName = "Palau",
                            IsoCode3 = "PLW"
                        },
                        new
                        {
                            CountryId = -769,
                            DisplayName = "Palestine, State of",
                            IsoCode3 = "PSE"
                        },
                        new
                        {
                            CountryId = -770,
                            DisplayName = "Panama",
                            IsoCode3 = "PAN"
                        },
                        new
                        {
                            CountryId = -771,
                            DisplayName = "Papua New Guinea",
                            IsoCode3 = "PNG"
                        },
                        new
                        {
                            CountryId = -772,
                            DisplayName = "Paraguay",
                            IsoCode3 = "PRY"
                        },
                        new
                        {
                            CountryId = -773,
                            DisplayName = "Peru",
                            IsoCode3 = "PER"
                        },
                        new
                        {
                            CountryId = -774,
                            DisplayName = "Philippines (the)",
                            IsoCode3 = "PHL"
                        },
                        new
                        {
                            CountryId = -775,
                            DisplayName = "Pitcairn",
                            IsoCode3 = "PCN"
                        },
                        new
                        {
                            CountryId = -776,
                            DisplayName = "Poland",
                            IsoCode3 = "POL"
                        },
                        new
                        {
                            CountryId = -777,
                            DisplayName = "Portugal",
                            IsoCode3 = "PRT"
                        },
                        new
                        {
                            CountryId = -778,
                            DisplayName = "Puerto Rico",
                            IsoCode3 = "PRI"
                        },
                        new
                        {
                            CountryId = -779,
                            DisplayName = "Qatar",
                            IsoCode3 = "QAT"
                        },
                        new
                        {
                            CountryId = -780,
                            DisplayName = "Romania",
                            IsoCode3 = "ROU"
                        },
                        new
                        {
                            CountryId = -781,
                            DisplayName = "Russian Federation (the)",
                            IsoCode3 = "RUS"
                        },
                        new
                        {
                            CountryId = -782,
                            DisplayName = "Rwanda",
                            IsoCode3 = "RWA"
                        },
                        new
                        {
                            CountryId = -783,
                            DisplayName = "Réunion",
                            IsoCode3 = "REU"
                        },
                        new
                        {
                            CountryId = -784,
                            DisplayName = "Saint Barthélemy",
                            IsoCode3 = "BLM"
                        },
                        new
                        {
                            CountryId = -785,
                            DisplayName = "Saint Helena, Ascension and Tristan da Cunha",
                            IsoCode3 = "SHN"
                        },
                        new
                        {
                            CountryId = -786,
                            DisplayName = "Saint Kitts and Nevis",
                            IsoCode3 = "KNA"
                        },
                        new
                        {
                            CountryId = -787,
                            DisplayName = "Saint Lucia",
                            IsoCode3 = "LCA"
                        },
                        new
                        {
                            CountryId = -788,
                            DisplayName = "Saint Martin (French part)",
                            IsoCode3 = "MAF"
                        },
                        new
                        {
                            CountryId = -789,
                            DisplayName = "Saint Pierre and Miquelon",
                            IsoCode3 = "SPM"
                        },
                        new
                        {
                            CountryId = -790,
                            DisplayName = "Saint Vincent and the Grenadines",
                            IsoCode3 = "VCT"
                        },
                        new
                        {
                            CountryId = -791,
                            DisplayName = "Samoa",
                            IsoCode3 = "WSM"
                        },
                        new
                        {
                            CountryId = -792,
                            DisplayName = "San Marino",
                            IsoCode3 = "SMR"
                        },
                        new
                        {
                            CountryId = -793,
                            DisplayName = "Sao Tome and Principe",
                            IsoCode3 = "STP"
                        },
                        new
                        {
                            CountryId = -794,
                            DisplayName = "Saudi Arabia",
                            IsoCode3 = "SAU"
                        },
                        new
                        {
                            CountryId = -795,
                            DisplayName = "Senegal",
                            IsoCode3 = "SEN"
                        },
                        new
                        {
                            CountryId = -796,
                            DisplayName = "Serbia",
                            IsoCode3 = "SRB"
                        },
                        new
                        {
                            CountryId = -797,
                            DisplayName = "Seychelles",
                            IsoCode3 = "SYC"
                        },
                        new
                        {
                            CountryId = -798,
                            DisplayName = "Sierra Leone",
                            IsoCode3 = "SLE"
                        },
                        new
                        {
                            CountryId = -799,
                            DisplayName = "Singapore",
                            IsoCode3 = "SGP"
                        },
                        new
                        {
                            CountryId = -800,
                            DisplayName = "Sint Maarten (Dutch part)",
                            IsoCode3 = "SXM"
                        },
                        new
                        {
                            CountryId = -801,
                            DisplayName = "Slovakia",
                            IsoCode3 = "SVK"
                        },
                        new
                        {
                            CountryId = -802,
                            DisplayName = "Slovenia",
                            IsoCode3 = "SVN"
                        },
                        new
                        {
                            CountryId = -803,
                            DisplayName = "Solomon Islands",
                            IsoCode3 = "SLB"
                        },
                        new
                        {
                            CountryId = -804,
                            DisplayName = "Somalia",
                            IsoCode3 = "SOM"
                        },
                        new
                        {
                            CountryId = -805,
                            DisplayName = "South Africa",
                            IsoCode3 = "ZAF"
                        },
                        new
                        {
                            CountryId = -806,
                            DisplayName = "South Georgia and the South Sandwich Islands",
                            IsoCode3 = "SGS"
                        },
                        new
                        {
                            CountryId = -807,
                            DisplayName = "South Sudan",
                            IsoCode3 = "SSD"
                        },
                        new
                        {
                            CountryId = -808,
                            DisplayName = "Spain",
                            IsoCode3 = "ESP"
                        },
                        new
                        {
                            CountryId = -809,
                            DisplayName = "Sri Lanka",
                            IsoCode3 = "LKA"
                        },
                        new
                        {
                            CountryId = -810,
                            DisplayName = "Sudan (the)",
                            IsoCode3 = "SDN"
                        },
                        new
                        {
                            CountryId = -811,
                            DisplayName = "Suriname",
                            IsoCode3 = "SUR"
                        },
                        new
                        {
                            CountryId = -812,
                            DisplayName = "Svalbard and Jan Mayen",
                            IsoCode3 = "SJM"
                        },
                        new
                        {
                            CountryId = -813,
                            DisplayName = "Sweden",
                            IsoCode3 = "SWE"
                        },
                        new
                        {
                            CountryId = -814,
                            DisplayName = "Switzerland",
                            IsoCode3 = "CHE"
                        },
                        new
                        {
                            CountryId = -815,
                            DisplayName = "Syrian Arab Republic",
                            IsoCode3 = "SYR"
                        },
                        new
                        {
                            CountryId = -816,
                            DisplayName = "Taiwan",
                            IsoCode3 = "TWN"
                        },
                        new
                        {
                            CountryId = -817,
                            DisplayName = "Tajikistan",
                            IsoCode3 = "TJK"
                        },
                        new
                        {
                            CountryId = -818,
                            DisplayName = "Tanzania, United Republic of",
                            IsoCode3 = "TZA"
                        },
                        new
                        {
                            CountryId = -819,
                            DisplayName = "Thailand",
                            IsoCode3 = "THA"
                        },
                        new
                        {
                            CountryId = -820,
                            DisplayName = "Timor-Leste",
                            IsoCode3 = "TLS"
                        },
                        new
                        {
                            CountryId = -821,
                            DisplayName = "Togo",
                            IsoCode3 = "TGO"
                        },
                        new
                        {
                            CountryId = -822,
                            DisplayName = "Tokelau",
                            IsoCode3 = "TKL"
                        },
                        new
                        {
                            CountryId = -823,
                            DisplayName = "Tonga",
                            IsoCode3 = "TON"
                        },
                        new
                        {
                            CountryId = -824,
                            DisplayName = "Trinidad and Tobago",
                            IsoCode3 = "TTO"
                        },
                        new
                        {
                            CountryId = -825,
                            DisplayName = "Tunisia",
                            IsoCode3 = "TUN"
                        },
                        new
                        {
                            CountryId = -826,
                            DisplayName = "Turkey",
                            IsoCode3 = "TUR"
                        },
                        new
                        {
                            CountryId = -827,
                            DisplayName = "Turkmenistan",
                            IsoCode3 = "TKM"
                        },
                        new
                        {
                            CountryId = -828,
                            DisplayName = "Turks and Caicos Islands (the)",
                            IsoCode3 = "TCA"
                        },
                        new
                        {
                            CountryId = -829,
                            DisplayName = "Tuvalu",
                            IsoCode3 = "TUV"
                        },
                        new
                        {
                            CountryId = -830,
                            DisplayName = "Uganda",
                            IsoCode3 = "UGA"
                        },
                        new
                        {
                            CountryId = -831,
                            DisplayName = "Ukraine",
                            IsoCode3 = "UKR"
                        },
                        new
                        {
                            CountryId = -832,
                            DisplayName = "United Arab Emirates (the)",
                            IsoCode3 = "ARE"
                        },
                        new
                        {
                            CountryId = -833,
                            DisplayName = "United Kingdom of Great Britain and Northern Ireland (the)",
                            IsoCode3 = "GBR"
                        },
                        new
                        {
                            CountryId = -834,
                            DisplayName = "United States Minor Outlying Islands (the)",
                            IsoCode3 = "UMI"
                        },
                        new
                        {
                            CountryId = -835,
                            DisplayName = "United States of America (the)",
                            IsoCode3 = "USA"
                        },
                        new
                        {
                            CountryId = -836,
                            DisplayName = "Uruguay",
                            IsoCode3 = "URY"
                        },
                        new
                        {
                            CountryId = -837,
                            DisplayName = "Uzbekistan",
                            IsoCode3 = "UZB"
                        },
                        new
                        {
                            CountryId = -838,
                            DisplayName = "Vanuatu",
                            IsoCode3 = "VUT"
                        },
                        new
                        {
                            CountryId = -839,
                            DisplayName = "Venezuela (Bolivarian Republic of)",
                            IsoCode3 = "VEN"
                        },
                        new
                        {
                            CountryId = -840,
                            DisplayName = "Viet Nam",
                            IsoCode3 = "VNM"
                        },
                        new
                        {
                            CountryId = -841,
                            DisplayName = "Virgin Islands (British)",
                            IsoCode3 = "VGB"
                        },
                        new
                        {
                            CountryId = -842,
                            DisplayName = "Virgin Islands (U.S.)",
                            IsoCode3 = "VIR"
                        },
                        new
                        {
                            CountryId = -843,
                            DisplayName = "Wallis and Futuna",
                            IsoCode3 = "WLF"
                        },
                        new
                        {
                            CountryId = -844,
                            DisplayName = "Western Sahara",
                            IsoCode3 = "ESH"
                        },
                        new
                        {
                            CountryId = -845,
                            DisplayName = "Yemen",
                            IsoCode3 = "YEM"
                        },
                        new
                        {
                            CountryId = -846,
                            DisplayName = "Zambia",
                            IsoCode3 = "ZMB"
                        },
                        new
                        {
                            CountryId = -847,
                            DisplayName = "Zimbabwe",
                            IsoCode3 = "ZWE"
                        },
                        new
                        {
                            CountryId = -848,
                            DisplayName = "Åland Islands",
                            IsoCode3 = "ALA"
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.CountryAttributeMemberEntry", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(0);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("AttributeMemberId", "CountryId", "EffectiveDate");

                    b.HasIndex(new[] { "CountryId" }, "IX_CountryAttributeMemberEntry_CountryID");

                    b.ToTable("CountryAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentPerformanceAttributeMemberEntry", b =>
                {
                    b.Property<int>("AccountObjectId")
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID")
                        .HasColumnOrder(0);

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<decimal>("AverageCapital")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Gain")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Irr")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("IRR");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("NetContribution")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("AccountObjectId", "AttributeMemberId", "FromDate");

                    b.HasIndex(new[] { "AccountObjectId" }, "IX_InvestmentPerformanceAttributeMemberEntry_AccountObjectID");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_InvestmentPerformanceAttributeMemberEntry_AttributeMemberID");

                    b.ToTable("InvestmentPerformanceAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentPerformanceEntry", b =>
                {
                    b.Property<int>("AccountObjectId")
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AverageCapital")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Gain")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Irr")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("IRR");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("NetContribution")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("AccountObjectId", "FromDate");

                    b.HasIndex(new[] { "AccountObjectId" }, "IX_InvestmentPerformanceEntry_AccountObjectID");

                    b.ToTable("InvestmentPerformanceEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentStrategy", b =>
                {
                    b.Property<int>("InvestmentStrategyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvestmentStrategyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestmentStrategyId"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvestmentStrategyId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_InvestmentStrategy_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.ToTable("InvestmentStrategy", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentStrategyTarget", b =>
                {
                    b.Property<int>("InvestmentStrategyId")
                        .HasColumnType("int")
                        .HasColumnName("InvestmentStrategyID");

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("InvestmentStrategyId", "AttributeMemberId", "EffectiveDate");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_InvestmentStrategyTarget_AttributeMemberID");

                    b.HasIndex(new[] { "InvestmentStrategyId" }, "IX_InvestmentStrategyTarget_InvestmentStrategyID");

                    b.ToTable("InvestmentStrategyTarget", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketHoliday", b =>
                {
                    b.Property<int>("MarketHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MarketHolidayID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarketHolidayId"), 1L, 1);

                    b.Property<string>("MarketHolidayName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.HasKey("MarketHolidayId");

                    b.HasIndex(new[] { "MarketHolidayName" }, "UNI_MarketHoliday_MarketHolidayName")
                        .IsUnique()
                        .HasFilter("([MarketHolidayName] IS NOT NULL)");

                    b.ToTable("MarketHoliday", "FinanceApp");

                    b.HasData(
                        new
                        {
                            MarketHolidayId = -10,
                            MarketHolidayName = "Christmas Day"
                        },
                        new
                        {
                            MarketHolidayId = -11,
                            MarketHolidayName = "Good Friday"
                        },
                        new
                        {
                            MarketHolidayId = -12,
                            MarketHolidayName = "Independence Day"
                        },
                        new
                        {
                            MarketHolidayId = -13,
                            MarketHolidayName = "Labor Day"
                        },
                        new
                        {
                            MarketHolidayId = -14,
                            MarketHolidayName = "Martin Luther King, Jr. Day"
                        },
                        new
                        {
                            MarketHolidayId = -15,
                            MarketHolidayName = "Memorial Day"
                        },
                        new
                        {
                            MarketHolidayId = -16,
                            MarketHolidayName = "New Years Day"
                        },
                        new
                        {
                            MarketHolidayId = -17,
                            MarketHolidayName = "President's Day"
                        },
                        new
                        {
                            MarketHolidayId = -18,
                            MarketHolidayName = "Thanksgiving Day"
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketHolidayObservance", b =>
                {
                    b.Property<int>("MarketHolidayId")
                        .HasColumnType("int")
                        .HasColumnName("MarketHolidayID")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("ObservanceDate")
                        .HasColumnType("date")
                        .HasColumnOrder(1);

                    b.HasKey("MarketHolidayId", "ObservanceDate");

                    b.HasIndex(new[] { "MarketHolidayId" }, "IX_MarketHolidaySchedule_MarketHolidayID");

                    b.ToTable("MarketHolidayObservance", "FinanceApp");

                    b.HasData(
                        new
                        {
                            MarketHolidayId = -10,
                            ObservanceDate = new DateTime(2022, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MarketHolidayId = -11,
                            ObservanceDate = new DateTime(2022, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MarketHolidayId = -12,
                            ObservanceDate = new DateTime(2022, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MarketHolidayId = -13,
                            ObservanceDate = new DateTime(2022, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MarketHolidayId = -14,
                            ObservanceDate = new DateTime(2022, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MarketHolidayId = -15,
                            ObservanceDate = new DateTime(2022, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MarketHolidayId = -16,
                            ObservanceDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MarketHolidayId = -17,
                            ObservanceDate = new DateTime(2022, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MarketHolidayId = -18,
                            ObservanceDate = new DateTime(2022, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketIndex", b =>
                {
                    b.Property<int>("IndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndexID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndexId"), 1L, 1);

                    b.Property<string>("IndexCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("IndexDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("IndexId");

                    b.HasIndex(new[] { "IndexCode" }, "UNI_MarketIndex_IndexCode")
                        .IsUnique()
                        .HasFilter("([IndexCode] IS NOT NULL)");

                    b.ToTable("MarketIndex", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketIndexPrice", b =>
                {
                    b.Property<int>("IndexPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndexPriceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndexPriceId"), 1L, 1);

                    b.Property<int>("MarketIndexId")
                        .HasColumnType("int")
                        .HasColumnName("MarketIndexID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("PriceCode")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("date");

                    b.HasKey("IndexPriceId");

                    b.HasIndex(new[] { "MarketIndexId" }, "IX_MarketIndexPrice_MarketIndexID");

                    b.HasIndex(new[] { "PriceDate", "MarketIndexId", "PriceCode" }, "UNI_MarketIndexPrice_RowDef")
                        .IsUnique()
                        .HasFilter("([PriceCode] IS NOT NULL)");

                    b.ToTable("MarketIndexPrice", "FinanceApp");

                    b.HasCheckConstraint("CK_MarketIndexPrice_PriceCode", "[PriceCode] IN ('p','t')");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttributeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeId"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("AttributeId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_ModelAttribute_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.ToTable("ModelAttribute", "FinanceApp");

                    b.HasData(
                        new
                        {
                            AttributeId = -10,
                            DisplayName = "Asset Class"
                        },
                        new
                        {
                            AttributeId = -20,
                            DisplayName = "Security Type Group"
                        },
                        new
                        {
                            AttributeId = -30,
                            DisplayName = "Security Type"
                        },
                        new
                        {
                            AttributeId = -40,
                            DisplayName = "Transaction Category"
                        },
                        new
                        {
                            AttributeId = -50,
                            DisplayName = "Transaction Class"
                        },
                        new
                        {
                            AttributeId = -60,
                            DisplayName = "Country Exposure"
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttributeMember", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeMemberId"), 1L, 1);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeID");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.HasKey("AttributeMemberId");

                    b.HasIndex(new[] { "AttributeId" }, "IX_ModelAttributeMember_AttributeID");

                    b.HasIndex(new[] { "DisplayName", "AttributeId" }, "UNI_ModelAttributeMember_RowDef")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.ToTable("ModelAttributeMember", "FinanceApp");

                    b.HasData(
                        new
                        {
                            AttributeMemberId = -100,
                            AttributeId = -10,
                            DisplayName = "Equities",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -101,
                            AttributeId = -10,
                            DisplayName = "Fixed Income",
                            DisplayOrder = (short)1
                        },
                        new
                        {
                            AttributeMemberId = -102,
                            AttributeId = -10,
                            DisplayName = "Derivatives",
                            DisplayOrder = (short)2
                        },
                        new
                        {
                            AttributeMemberId = -103,
                            AttributeId = -10,
                            DisplayName = "Other",
                            DisplayOrder = (short)3
                        },
                        new
                        {
                            AttributeMemberId = -104,
                            AttributeId = -10,
                            DisplayName = "Cash & Equivalents",
                            DisplayOrder = (short)4
                        },
                        new
                        {
                            AttributeMemberId = -105,
                            AttributeId = -10,
                            DisplayName = "Blended Funds & Products",
                            DisplayOrder = (short)5
                        },
                        new
                        {
                            AttributeMemberId = -106,
                            AttributeId = -10,
                            DisplayName = "Debt & Liability",
                            DisplayOrder = (short)6
                        },
                        new
                        {
                            AttributeMemberId = -107,
                            AttributeId = -10,
                            DisplayName = "Not Classified",
                            DisplayOrder = (short)7
                        },
                        new
                        {
                            AttributeMemberId = -401,
                            AttributeId = -40,
                            DisplayName = "Interest Charge",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -402,
                            AttributeId = -40,
                            DisplayName = "Purchases",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -403,
                            AttributeId = -40,
                            DisplayName = "Margin Purchases",
                            DisplayOrder = (short)1
                        },
                        new
                        {
                            AttributeMemberId = -404,
                            AttributeId = -40,
                            DisplayName = "Gain/Loss",
                            DisplayOrder = (short)2
                        },
                        new
                        {
                            AttributeMemberId = -405,
                            AttributeId = -40,
                            DisplayName = "Starting Balance",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -406,
                            AttributeId = -40,
                            DisplayName = "Contributions",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -407,
                            AttributeId = -40,
                            DisplayName = "Withdrawals",
                            DisplayOrder = (short)1
                        },
                        new
                        {
                            AttributeMemberId = -408,
                            AttributeId = -40,
                            DisplayName = "Dividends",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -409,
                            AttributeId = -40,
                            DisplayName = "Expenses",
                            DisplayOrder = (short)2
                        },
                        new
                        {
                            AttributeMemberId = -410,
                            AttributeId = -40,
                            DisplayName = "Writeoffs",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -411,
                            AttributeId = -40,
                            DisplayName = "Interest",
                            DisplayOrder = (short)1
                        },
                        new
                        {
                            AttributeMemberId = -412,
                            AttributeId = -40,
                            DisplayName = "Principal Pay-Down",
                            DisplayOrder = (short)1
                        },
                        new
                        {
                            AttributeMemberId = -413,
                            AttributeId = -40,
                            DisplayName = "Sales",
                            DisplayOrder = (short)3
                        },
                        new
                        {
                            AttributeMemberId = -414,
                            AttributeId = -40,
                            DisplayName = "Margin Sales",
                            DisplayOrder = (short)2
                        },
                        new
                        {
                            AttributeMemberId = -501,
                            AttributeId = -50,
                            DisplayName = "Expense",
                            DisplayOrder = (short)4
                        },
                        new
                        {
                            AttributeMemberId = -502,
                            AttributeId = -50,
                            DisplayName = "Trade",
                            DisplayOrder = (short)1
                        },
                        new
                        {
                            AttributeMemberId = -503,
                            AttributeId = -50,
                            DisplayName = "Income",
                            DisplayOrder = (short)2
                        },
                        new
                        {
                            AttributeMemberId = -504,
                            AttributeId = -50,
                            DisplayName = "Balance",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -505,
                            AttributeId = -50,
                            DisplayName = "Transfer",
                            DisplayOrder = (short)3
                        },
                        new
                        {
                            AttributeMemberId = -506,
                            AttributeId = -50,
                            DisplayName = "Writeoff",
                            DisplayOrder = (short)5
                        },
                        new
                        {
                            AttributeMemberId = -600,
                            AttributeId = -60,
                            DisplayName = "AFG",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -601,
                            AttributeId = -60,
                            DisplayName = "ALB",
                            DisplayOrder = (short)1
                        },
                        new
                        {
                            AttributeMemberId = -602,
                            AttributeId = -60,
                            DisplayName = "DZA",
                            DisplayOrder = (short)2
                        },
                        new
                        {
                            AttributeMemberId = -603,
                            AttributeId = -60,
                            DisplayName = "ASM",
                            DisplayOrder = (short)3
                        },
                        new
                        {
                            AttributeMemberId = -604,
                            AttributeId = -60,
                            DisplayName = "AND",
                            DisplayOrder = (short)4
                        },
                        new
                        {
                            AttributeMemberId = -605,
                            AttributeId = -60,
                            DisplayName = "AGO",
                            DisplayOrder = (short)5
                        },
                        new
                        {
                            AttributeMemberId = -606,
                            AttributeId = -60,
                            DisplayName = "AIA",
                            DisplayOrder = (short)6
                        },
                        new
                        {
                            AttributeMemberId = -607,
                            AttributeId = -60,
                            DisplayName = "ATA",
                            DisplayOrder = (short)7
                        },
                        new
                        {
                            AttributeMemberId = -608,
                            AttributeId = -60,
                            DisplayName = "ATG",
                            DisplayOrder = (short)8
                        },
                        new
                        {
                            AttributeMemberId = -609,
                            AttributeId = -60,
                            DisplayName = "ARG",
                            DisplayOrder = (short)9
                        },
                        new
                        {
                            AttributeMemberId = -610,
                            AttributeId = -60,
                            DisplayName = "ARM",
                            DisplayOrder = (short)10
                        },
                        new
                        {
                            AttributeMemberId = -611,
                            AttributeId = -60,
                            DisplayName = "ABW",
                            DisplayOrder = (short)11
                        },
                        new
                        {
                            AttributeMemberId = -612,
                            AttributeId = -60,
                            DisplayName = "AUS",
                            DisplayOrder = (short)12
                        },
                        new
                        {
                            AttributeMemberId = -613,
                            AttributeId = -60,
                            DisplayName = "AUT",
                            DisplayOrder = (short)13
                        },
                        new
                        {
                            AttributeMemberId = -614,
                            AttributeId = -60,
                            DisplayName = "AZE",
                            DisplayOrder = (short)14
                        },
                        new
                        {
                            AttributeMemberId = -615,
                            AttributeId = -60,
                            DisplayName = "BHS",
                            DisplayOrder = (short)15
                        },
                        new
                        {
                            AttributeMemberId = -616,
                            AttributeId = -60,
                            DisplayName = "BHR",
                            DisplayOrder = (short)16
                        },
                        new
                        {
                            AttributeMemberId = -617,
                            AttributeId = -60,
                            DisplayName = "BGD",
                            DisplayOrder = (short)17
                        },
                        new
                        {
                            AttributeMemberId = -618,
                            AttributeId = -60,
                            DisplayName = "BRB",
                            DisplayOrder = (short)18
                        },
                        new
                        {
                            AttributeMemberId = -619,
                            AttributeId = -60,
                            DisplayName = "BLR",
                            DisplayOrder = (short)19
                        },
                        new
                        {
                            AttributeMemberId = -620,
                            AttributeId = -60,
                            DisplayName = "BEL",
                            DisplayOrder = (short)20
                        },
                        new
                        {
                            AttributeMemberId = -621,
                            AttributeId = -60,
                            DisplayName = "BLZ",
                            DisplayOrder = (short)21
                        },
                        new
                        {
                            AttributeMemberId = -622,
                            AttributeId = -60,
                            DisplayName = "BEN",
                            DisplayOrder = (short)22
                        },
                        new
                        {
                            AttributeMemberId = -623,
                            AttributeId = -60,
                            DisplayName = "BMU",
                            DisplayOrder = (short)23
                        },
                        new
                        {
                            AttributeMemberId = -624,
                            AttributeId = -60,
                            DisplayName = "BTN",
                            DisplayOrder = (short)24
                        },
                        new
                        {
                            AttributeMemberId = -625,
                            AttributeId = -60,
                            DisplayName = "BOL",
                            DisplayOrder = (short)25
                        },
                        new
                        {
                            AttributeMemberId = -626,
                            AttributeId = -60,
                            DisplayName = "BES",
                            DisplayOrder = (short)26
                        },
                        new
                        {
                            AttributeMemberId = -627,
                            AttributeId = -60,
                            DisplayName = "BIH",
                            DisplayOrder = (short)27
                        },
                        new
                        {
                            AttributeMemberId = -628,
                            AttributeId = -60,
                            DisplayName = "BWA",
                            DisplayOrder = (short)28
                        },
                        new
                        {
                            AttributeMemberId = -629,
                            AttributeId = -60,
                            DisplayName = "BVT",
                            DisplayOrder = (short)29
                        },
                        new
                        {
                            AttributeMemberId = -630,
                            AttributeId = -60,
                            DisplayName = "BRA",
                            DisplayOrder = (short)30
                        },
                        new
                        {
                            AttributeMemberId = -631,
                            AttributeId = -60,
                            DisplayName = "IOT",
                            DisplayOrder = (short)31
                        },
                        new
                        {
                            AttributeMemberId = -632,
                            AttributeId = -60,
                            DisplayName = "BRN",
                            DisplayOrder = (short)32
                        },
                        new
                        {
                            AttributeMemberId = -633,
                            AttributeId = -60,
                            DisplayName = "BGR",
                            DisplayOrder = (short)33
                        },
                        new
                        {
                            AttributeMemberId = -634,
                            AttributeId = -60,
                            DisplayName = "BFA",
                            DisplayOrder = (short)34
                        },
                        new
                        {
                            AttributeMemberId = -635,
                            AttributeId = -60,
                            DisplayName = "BDI",
                            DisplayOrder = (short)35
                        },
                        new
                        {
                            AttributeMemberId = -636,
                            AttributeId = -60,
                            DisplayName = "CPV",
                            DisplayOrder = (short)36
                        },
                        new
                        {
                            AttributeMemberId = -637,
                            AttributeId = -60,
                            DisplayName = "KHM",
                            DisplayOrder = (short)37
                        },
                        new
                        {
                            AttributeMemberId = -638,
                            AttributeId = -60,
                            DisplayName = "CMR",
                            DisplayOrder = (short)38
                        },
                        new
                        {
                            AttributeMemberId = -639,
                            AttributeId = -60,
                            DisplayName = "CAN",
                            DisplayOrder = (short)39
                        },
                        new
                        {
                            AttributeMemberId = -640,
                            AttributeId = -60,
                            DisplayName = "CYM",
                            DisplayOrder = (short)40
                        },
                        new
                        {
                            AttributeMemberId = -641,
                            AttributeId = -60,
                            DisplayName = "CAF",
                            DisplayOrder = (short)41
                        },
                        new
                        {
                            AttributeMemberId = -642,
                            AttributeId = -60,
                            DisplayName = "TCD",
                            DisplayOrder = (short)42
                        },
                        new
                        {
                            AttributeMemberId = -643,
                            AttributeId = -60,
                            DisplayName = "CHL",
                            DisplayOrder = (short)43
                        },
                        new
                        {
                            AttributeMemberId = -644,
                            AttributeId = -60,
                            DisplayName = "CHN",
                            DisplayOrder = (short)44
                        },
                        new
                        {
                            AttributeMemberId = -645,
                            AttributeId = -60,
                            DisplayName = "CXR",
                            DisplayOrder = (short)45
                        },
                        new
                        {
                            AttributeMemberId = -646,
                            AttributeId = -60,
                            DisplayName = "CCK",
                            DisplayOrder = (short)46
                        },
                        new
                        {
                            AttributeMemberId = -647,
                            AttributeId = -60,
                            DisplayName = "COL",
                            DisplayOrder = (short)47
                        },
                        new
                        {
                            AttributeMemberId = -648,
                            AttributeId = -60,
                            DisplayName = "COM",
                            DisplayOrder = (short)48
                        },
                        new
                        {
                            AttributeMemberId = -649,
                            AttributeId = -60,
                            DisplayName = "COD",
                            DisplayOrder = (short)49
                        },
                        new
                        {
                            AttributeMemberId = -650,
                            AttributeId = -60,
                            DisplayName = "COG",
                            DisplayOrder = (short)50
                        },
                        new
                        {
                            AttributeMemberId = -651,
                            AttributeId = -60,
                            DisplayName = "COK",
                            DisplayOrder = (short)51
                        },
                        new
                        {
                            AttributeMemberId = -652,
                            AttributeId = -60,
                            DisplayName = "CRI",
                            DisplayOrder = (short)52
                        },
                        new
                        {
                            AttributeMemberId = -653,
                            AttributeId = -60,
                            DisplayName = "HRV",
                            DisplayOrder = (short)53
                        },
                        new
                        {
                            AttributeMemberId = -654,
                            AttributeId = -60,
                            DisplayName = "CUB",
                            DisplayOrder = (short)54
                        },
                        new
                        {
                            AttributeMemberId = -655,
                            AttributeId = -60,
                            DisplayName = "CUW",
                            DisplayOrder = (short)55
                        },
                        new
                        {
                            AttributeMemberId = -656,
                            AttributeId = -60,
                            DisplayName = "CYP",
                            DisplayOrder = (short)56
                        },
                        new
                        {
                            AttributeMemberId = -657,
                            AttributeId = -60,
                            DisplayName = "CZE",
                            DisplayOrder = (short)57
                        },
                        new
                        {
                            AttributeMemberId = -658,
                            AttributeId = -60,
                            DisplayName = "CIV",
                            DisplayOrder = (short)58
                        },
                        new
                        {
                            AttributeMemberId = -659,
                            AttributeId = -60,
                            DisplayName = "DNK",
                            DisplayOrder = (short)59
                        },
                        new
                        {
                            AttributeMemberId = -660,
                            AttributeId = -60,
                            DisplayName = "DJI",
                            DisplayOrder = (short)60
                        },
                        new
                        {
                            AttributeMemberId = -661,
                            AttributeId = -60,
                            DisplayName = "DMA",
                            DisplayOrder = (short)61
                        },
                        new
                        {
                            AttributeMemberId = -662,
                            AttributeId = -60,
                            DisplayName = "DOM",
                            DisplayOrder = (short)62
                        },
                        new
                        {
                            AttributeMemberId = -663,
                            AttributeId = -60,
                            DisplayName = "ECU",
                            DisplayOrder = (short)63
                        },
                        new
                        {
                            AttributeMemberId = -664,
                            AttributeId = -60,
                            DisplayName = "EGY",
                            DisplayOrder = (short)64
                        },
                        new
                        {
                            AttributeMemberId = -665,
                            AttributeId = -60,
                            DisplayName = "SLV",
                            DisplayOrder = (short)65
                        },
                        new
                        {
                            AttributeMemberId = -666,
                            AttributeId = -60,
                            DisplayName = "GNQ",
                            DisplayOrder = (short)66
                        },
                        new
                        {
                            AttributeMemberId = -667,
                            AttributeId = -60,
                            DisplayName = "ERI",
                            DisplayOrder = (short)67
                        },
                        new
                        {
                            AttributeMemberId = -668,
                            AttributeId = -60,
                            DisplayName = "EST",
                            DisplayOrder = (short)68
                        },
                        new
                        {
                            AttributeMemberId = -669,
                            AttributeId = -60,
                            DisplayName = "SWZ",
                            DisplayOrder = (short)69
                        },
                        new
                        {
                            AttributeMemberId = -670,
                            AttributeId = -60,
                            DisplayName = "ETH",
                            DisplayOrder = (short)70
                        },
                        new
                        {
                            AttributeMemberId = -671,
                            AttributeId = -60,
                            DisplayName = "FLK",
                            DisplayOrder = (short)71
                        },
                        new
                        {
                            AttributeMemberId = -672,
                            AttributeId = -60,
                            DisplayName = "FRO",
                            DisplayOrder = (short)72
                        },
                        new
                        {
                            AttributeMemberId = -673,
                            AttributeId = -60,
                            DisplayName = "FJI",
                            DisplayOrder = (short)73
                        },
                        new
                        {
                            AttributeMemberId = -674,
                            AttributeId = -60,
                            DisplayName = "FIN",
                            DisplayOrder = (short)74
                        },
                        new
                        {
                            AttributeMemberId = -675,
                            AttributeId = -60,
                            DisplayName = "FRA",
                            DisplayOrder = (short)75
                        },
                        new
                        {
                            AttributeMemberId = -676,
                            AttributeId = -60,
                            DisplayName = "GUF",
                            DisplayOrder = (short)76
                        },
                        new
                        {
                            AttributeMemberId = -677,
                            AttributeId = -60,
                            DisplayName = "PYF",
                            DisplayOrder = (short)77
                        },
                        new
                        {
                            AttributeMemberId = -678,
                            AttributeId = -60,
                            DisplayName = "ATF",
                            DisplayOrder = (short)78
                        },
                        new
                        {
                            AttributeMemberId = -679,
                            AttributeId = -60,
                            DisplayName = "GAB",
                            DisplayOrder = (short)79
                        },
                        new
                        {
                            AttributeMemberId = -680,
                            AttributeId = -60,
                            DisplayName = "GMB",
                            DisplayOrder = (short)80
                        },
                        new
                        {
                            AttributeMemberId = -681,
                            AttributeId = -60,
                            DisplayName = "GEO",
                            DisplayOrder = (short)81
                        },
                        new
                        {
                            AttributeMemberId = -682,
                            AttributeId = -60,
                            DisplayName = "DEU",
                            DisplayOrder = (short)82
                        },
                        new
                        {
                            AttributeMemberId = -683,
                            AttributeId = -60,
                            DisplayName = "GHA",
                            DisplayOrder = (short)83
                        },
                        new
                        {
                            AttributeMemberId = -684,
                            AttributeId = -60,
                            DisplayName = "GIB",
                            DisplayOrder = (short)84
                        },
                        new
                        {
                            AttributeMemberId = -685,
                            AttributeId = -60,
                            DisplayName = "GRC",
                            DisplayOrder = (short)85
                        },
                        new
                        {
                            AttributeMemberId = -686,
                            AttributeId = -60,
                            DisplayName = "GRL",
                            DisplayOrder = (short)86
                        },
                        new
                        {
                            AttributeMemberId = -687,
                            AttributeId = -60,
                            DisplayName = "GRD",
                            DisplayOrder = (short)87
                        },
                        new
                        {
                            AttributeMemberId = -688,
                            AttributeId = -60,
                            DisplayName = "GLP",
                            DisplayOrder = (short)88
                        },
                        new
                        {
                            AttributeMemberId = -689,
                            AttributeId = -60,
                            DisplayName = "GUM",
                            DisplayOrder = (short)89
                        },
                        new
                        {
                            AttributeMemberId = -690,
                            AttributeId = -60,
                            DisplayName = "GTM",
                            DisplayOrder = (short)90
                        },
                        new
                        {
                            AttributeMemberId = -691,
                            AttributeId = -60,
                            DisplayName = "GGY",
                            DisplayOrder = (short)91
                        },
                        new
                        {
                            AttributeMemberId = -692,
                            AttributeId = -60,
                            DisplayName = "GIN",
                            DisplayOrder = (short)92
                        },
                        new
                        {
                            AttributeMemberId = -693,
                            AttributeId = -60,
                            DisplayName = "GNB",
                            DisplayOrder = (short)93
                        },
                        new
                        {
                            AttributeMemberId = -694,
                            AttributeId = -60,
                            DisplayName = "GUY",
                            DisplayOrder = (short)94
                        },
                        new
                        {
                            AttributeMemberId = -695,
                            AttributeId = -60,
                            DisplayName = "HTI",
                            DisplayOrder = (short)95
                        },
                        new
                        {
                            AttributeMemberId = -696,
                            AttributeId = -60,
                            DisplayName = "HMD",
                            DisplayOrder = (short)96
                        },
                        new
                        {
                            AttributeMemberId = -697,
                            AttributeId = -60,
                            DisplayName = "VAT",
                            DisplayOrder = (short)97
                        },
                        new
                        {
                            AttributeMemberId = -698,
                            AttributeId = -60,
                            DisplayName = "HND",
                            DisplayOrder = (short)98
                        },
                        new
                        {
                            AttributeMemberId = -699,
                            AttributeId = -60,
                            DisplayName = "HKG",
                            DisplayOrder = (short)99
                        },
                        new
                        {
                            AttributeMemberId = -700,
                            AttributeId = -60,
                            DisplayName = "HUN",
                            DisplayOrder = (short)100
                        },
                        new
                        {
                            AttributeMemberId = -701,
                            AttributeId = -60,
                            DisplayName = "ISL",
                            DisplayOrder = (short)101
                        },
                        new
                        {
                            AttributeMemberId = -702,
                            AttributeId = -60,
                            DisplayName = "IND",
                            DisplayOrder = (short)102
                        },
                        new
                        {
                            AttributeMemberId = -703,
                            AttributeId = -60,
                            DisplayName = "IDN",
                            DisplayOrder = (short)103
                        },
                        new
                        {
                            AttributeMemberId = -704,
                            AttributeId = -60,
                            DisplayName = "IRN",
                            DisplayOrder = (short)104
                        },
                        new
                        {
                            AttributeMemberId = -705,
                            AttributeId = -60,
                            DisplayName = "IRQ",
                            DisplayOrder = (short)105
                        },
                        new
                        {
                            AttributeMemberId = -706,
                            AttributeId = -60,
                            DisplayName = "IRL",
                            DisplayOrder = (short)106
                        },
                        new
                        {
                            AttributeMemberId = -707,
                            AttributeId = -60,
                            DisplayName = "IMN",
                            DisplayOrder = (short)107
                        },
                        new
                        {
                            AttributeMemberId = -708,
                            AttributeId = -60,
                            DisplayName = "ISR",
                            DisplayOrder = (short)108
                        },
                        new
                        {
                            AttributeMemberId = -709,
                            AttributeId = -60,
                            DisplayName = "ITA",
                            DisplayOrder = (short)109
                        },
                        new
                        {
                            AttributeMemberId = -710,
                            AttributeId = -60,
                            DisplayName = "JAM",
                            DisplayOrder = (short)110
                        },
                        new
                        {
                            AttributeMemberId = -711,
                            AttributeId = -60,
                            DisplayName = "JPN",
                            DisplayOrder = (short)111
                        },
                        new
                        {
                            AttributeMemberId = -712,
                            AttributeId = -60,
                            DisplayName = "JEY",
                            DisplayOrder = (short)112
                        },
                        new
                        {
                            AttributeMemberId = -713,
                            AttributeId = -60,
                            DisplayName = "JOR",
                            DisplayOrder = (short)113
                        },
                        new
                        {
                            AttributeMemberId = -714,
                            AttributeId = -60,
                            DisplayName = "KAZ",
                            DisplayOrder = (short)114
                        },
                        new
                        {
                            AttributeMemberId = -715,
                            AttributeId = -60,
                            DisplayName = "KEN",
                            DisplayOrder = (short)115
                        },
                        new
                        {
                            AttributeMemberId = -716,
                            AttributeId = -60,
                            DisplayName = "KIR",
                            DisplayOrder = (short)116
                        },
                        new
                        {
                            AttributeMemberId = -717,
                            AttributeId = -60,
                            DisplayName = "PRK",
                            DisplayOrder = (short)117
                        },
                        new
                        {
                            AttributeMemberId = -718,
                            AttributeId = -60,
                            DisplayName = "KOR",
                            DisplayOrder = (short)118
                        },
                        new
                        {
                            AttributeMemberId = -719,
                            AttributeId = -60,
                            DisplayName = "KWT",
                            DisplayOrder = (short)119
                        },
                        new
                        {
                            AttributeMemberId = -720,
                            AttributeId = -60,
                            DisplayName = "KGZ",
                            DisplayOrder = (short)120
                        },
                        new
                        {
                            AttributeMemberId = -721,
                            AttributeId = -60,
                            DisplayName = "LAO",
                            DisplayOrder = (short)121
                        },
                        new
                        {
                            AttributeMemberId = -722,
                            AttributeId = -60,
                            DisplayName = "LVA",
                            DisplayOrder = (short)122
                        },
                        new
                        {
                            AttributeMemberId = -723,
                            AttributeId = -60,
                            DisplayName = "LBN",
                            DisplayOrder = (short)123
                        },
                        new
                        {
                            AttributeMemberId = -724,
                            AttributeId = -60,
                            DisplayName = "LSO",
                            DisplayOrder = (short)124
                        },
                        new
                        {
                            AttributeMemberId = -725,
                            AttributeId = -60,
                            DisplayName = "LBR",
                            DisplayOrder = (short)125
                        },
                        new
                        {
                            AttributeMemberId = -726,
                            AttributeId = -60,
                            DisplayName = "LBY",
                            DisplayOrder = (short)126
                        },
                        new
                        {
                            AttributeMemberId = -727,
                            AttributeId = -60,
                            DisplayName = "LIE",
                            DisplayOrder = (short)127
                        },
                        new
                        {
                            AttributeMemberId = -728,
                            AttributeId = -60,
                            DisplayName = "LTU",
                            DisplayOrder = (short)128
                        },
                        new
                        {
                            AttributeMemberId = -729,
                            AttributeId = -60,
                            DisplayName = "LUX",
                            DisplayOrder = (short)129
                        },
                        new
                        {
                            AttributeMemberId = -730,
                            AttributeId = -60,
                            DisplayName = "MAC",
                            DisplayOrder = (short)130
                        },
                        new
                        {
                            AttributeMemberId = -731,
                            AttributeId = -60,
                            DisplayName = "MKD",
                            DisplayOrder = (short)131
                        },
                        new
                        {
                            AttributeMemberId = -732,
                            AttributeId = -60,
                            DisplayName = "MDG",
                            DisplayOrder = (short)132
                        },
                        new
                        {
                            AttributeMemberId = -733,
                            AttributeId = -60,
                            DisplayName = "MWI",
                            DisplayOrder = (short)133
                        },
                        new
                        {
                            AttributeMemberId = -734,
                            AttributeId = -60,
                            DisplayName = "MYS",
                            DisplayOrder = (short)134
                        },
                        new
                        {
                            AttributeMemberId = -735,
                            AttributeId = -60,
                            DisplayName = "MDV",
                            DisplayOrder = (short)135
                        },
                        new
                        {
                            AttributeMemberId = -736,
                            AttributeId = -60,
                            DisplayName = "MLI",
                            DisplayOrder = (short)136
                        },
                        new
                        {
                            AttributeMemberId = -737,
                            AttributeId = -60,
                            DisplayName = "MLT",
                            DisplayOrder = (short)137
                        },
                        new
                        {
                            AttributeMemberId = -738,
                            AttributeId = -60,
                            DisplayName = "MHL",
                            DisplayOrder = (short)138
                        },
                        new
                        {
                            AttributeMemberId = -739,
                            AttributeId = -60,
                            DisplayName = "MTQ",
                            DisplayOrder = (short)139
                        },
                        new
                        {
                            AttributeMemberId = -740,
                            AttributeId = -60,
                            DisplayName = "MRT",
                            DisplayOrder = (short)140
                        },
                        new
                        {
                            AttributeMemberId = -741,
                            AttributeId = -60,
                            DisplayName = "MUS",
                            DisplayOrder = (short)141
                        },
                        new
                        {
                            AttributeMemberId = -742,
                            AttributeId = -60,
                            DisplayName = "MYT",
                            DisplayOrder = (short)142
                        },
                        new
                        {
                            AttributeMemberId = -743,
                            AttributeId = -60,
                            DisplayName = "MEX",
                            DisplayOrder = (short)143
                        },
                        new
                        {
                            AttributeMemberId = -744,
                            AttributeId = -60,
                            DisplayName = "FSM",
                            DisplayOrder = (short)144
                        },
                        new
                        {
                            AttributeMemberId = -745,
                            AttributeId = -60,
                            DisplayName = "MDA",
                            DisplayOrder = (short)145
                        },
                        new
                        {
                            AttributeMemberId = -746,
                            AttributeId = -60,
                            DisplayName = "MCO",
                            DisplayOrder = (short)146
                        },
                        new
                        {
                            AttributeMemberId = -747,
                            AttributeId = -60,
                            DisplayName = "MNG",
                            DisplayOrder = (short)147
                        },
                        new
                        {
                            AttributeMemberId = -748,
                            AttributeId = -60,
                            DisplayName = "MNE",
                            DisplayOrder = (short)148
                        },
                        new
                        {
                            AttributeMemberId = -749,
                            AttributeId = -60,
                            DisplayName = "MSR",
                            DisplayOrder = (short)149
                        },
                        new
                        {
                            AttributeMemberId = -750,
                            AttributeId = -60,
                            DisplayName = "MAR",
                            DisplayOrder = (short)150
                        },
                        new
                        {
                            AttributeMemberId = -751,
                            AttributeId = -60,
                            DisplayName = "MOZ",
                            DisplayOrder = (short)151
                        },
                        new
                        {
                            AttributeMemberId = -752,
                            AttributeId = -60,
                            DisplayName = "MMR",
                            DisplayOrder = (short)152
                        },
                        new
                        {
                            AttributeMemberId = -753,
                            AttributeId = -60,
                            DisplayName = "NAM",
                            DisplayOrder = (short)153
                        },
                        new
                        {
                            AttributeMemberId = -754,
                            AttributeId = -60,
                            DisplayName = "NRU",
                            DisplayOrder = (short)154
                        },
                        new
                        {
                            AttributeMemberId = -755,
                            AttributeId = -60,
                            DisplayName = "NPL",
                            DisplayOrder = (short)155
                        },
                        new
                        {
                            AttributeMemberId = -756,
                            AttributeId = -60,
                            DisplayName = "NLD",
                            DisplayOrder = (short)156
                        },
                        new
                        {
                            AttributeMemberId = -757,
                            AttributeId = -60,
                            DisplayName = "NCL",
                            DisplayOrder = (short)157
                        },
                        new
                        {
                            AttributeMemberId = -758,
                            AttributeId = -60,
                            DisplayName = "NZL",
                            DisplayOrder = (short)158
                        },
                        new
                        {
                            AttributeMemberId = -759,
                            AttributeId = -60,
                            DisplayName = "NIC",
                            DisplayOrder = (short)159
                        },
                        new
                        {
                            AttributeMemberId = -760,
                            AttributeId = -60,
                            DisplayName = "NER",
                            DisplayOrder = (short)160
                        },
                        new
                        {
                            AttributeMemberId = -761,
                            AttributeId = -60,
                            DisplayName = "NGA",
                            DisplayOrder = (short)161
                        },
                        new
                        {
                            AttributeMemberId = -762,
                            AttributeId = -60,
                            DisplayName = "NIU",
                            DisplayOrder = (short)162
                        },
                        new
                        {
                            AttributeMemberId = -763,
                            AttributeId = -60,
                            DisplayName = "NFK",
                            DisplayOrder = (short)163
                        },
                        new
                        {
                            AttributeMemberId = -764,
                            AttributeId = -60,
                            DisplayName = "MNP",
                            DisplayOrder = (short)164
                        },
                        new
                        {
                            AttributeMemberId = -765,
                            AttributeId = -60,
                            DisplayName = "NOR",
                            DisplayOrder = (short)165
                        },
                        new
                        {
                            AttributeMemberId = -766,
                            AttributeId = -60,
                            DisplayName = "OMN",
                            DisplayOrder = (short)166
                        },
                        new
                        {
                            AttributeMemberId = -767,
                            AttributeId = -60,
                            DisplayName = "PAK",
                            DisplayOrder = (short)167
                        },
                        new
                        {
                            AttributeMemberId = -768,
                            AttributeId = -60,
                            DisplayName = "PLW",
                            DisplayOrder = (short)168
                        },
                        new
                        {
                            AttributeMemberId = -769,
                            AttributeId = -60,
                            DisplayName = "PSE",
                            DisplayOrder = (short)169
                        },
                        new
                        {
                            AttributeMemberId = -770,
                            AttributeId = -60,
                            DisplayName = "PAN",
                            DisplayOrder = (short)170
                        },
                        new
                        {
                            AttributeMemberId = -771,
                            AttributeId = -60,
                            DisplayName = "PNG",
                            DisplayOrder = (short)171
                        },
                        new
                        {
                            AttributeMemberId = -772,
                            AttributeId = -60,
                            DisplayName = "PRY",
                            DisplayOrder = (short)172
                        },
                        new
                        {
                            AttributeMemberId = -773,
                            AttributeId = -60,
                            DisplayName = "PER",
                            DisplayOrder = (short)173
                        },
                        new
                        {
                            AttributeMemberId = -774,
                            AttributeId = -60,
                            DisplayName = "PHL",
                            DisplayOrder = (short)174
                        },
                        new
                        {
                            AttributeMemberId = -775,
                            AttributeId = -60,
                            DisplayName = "PCN",
                            DisplayOrder = (short)175
                        },
                        new
                        {
                            AttributeMemberId = -776,
                            AttributeId = -60,
                            DisplayName = "POL",
                            DisplayOrder = (short)176
                        },
                        new
                        {
                            AttributeMemberId = -777,
                            AttributeId = -60,
                            DisplayName = "PRT",
                            DisplayOrder = (short)177
                        },
                        new
                        {
                            AttributeMemberId = -778,
                            AttributeId = -60,
                            DisplayName = "PRI",
                            DisplayOrder = (short)178
                        },
                        new
                        {
                            AttributeMemberId = -779,
                            AttributeId = -60,
                            DisplayName = "QAT",
                            DisplayOrder = (short)179
                        },
                        new
                        {
                            AttributeMemberId = -780,
                            AttributeId = -60,
                            DisplayName = "ROU",
                            DisplayOrder = (short)180
                        },
                        new
                        {
                            AttributeMemberId = -781,
                            AttributeId = -60,
                            DisplayName = "RUS",
                            DisplayOrder = (short)181
                        },
                        new
                        {
                            AttributeMemberId = -782,
                            AttributeId = -60,
                            DisplayName = "RWA",
                            DisplayOrder = (short)182
                        },
                        new
                        {
                            AttributeMemberId = -783,
                            AttributeId = -60,
                            DisplayName = "REU",
                            DisplayOrder = (short)183
                        },
                        new
                        {
                            AttributeMemberId = -784,
                            AttributeId = -60,
                            DisplayName = "BLM",
                            DisplayOrder = (short)184
                        },
                        new
                        {
                            AttributeMemberId = -785,
                            AttributeId = -60,
                            DisplayName = "SHN",
                            DisplayOrder = (short)185
                        },
                        new
                        {
                            AttributeMemberId = -786,
                            AttributeId = -60,
                            DisplayName = "KNA",
                            DisplayOrder = (short)186
                        },
                        new
                        {
                            AttributeMemberId = -787,
                            AttributeId = -60,
                            DisplayName = "LCA",
                            DisplayOrder = (short)187
                        },
                        new
                        {
                            AttributeMemberId = -788,
                            AttributeId = -60,
                            DisplayName = "MAF",
                            DisplayOrder = (short)188
                        },
                        new
                        {
                            AttributeMemberId = -789,
                            AttributeId = -60,
                            DisplayName = "SPM",
                            DisplayOrder = (short)189
                        },
                        new
                        {
                            AttributeMemberId = -790,
                            AttributeId = -60,
                            DisplayName = "VCT",
                            DisplayOrder = (short)190
                        },
                        new
                        {
                            AttributeMemberId = -791,
                            AttributeId = -60,
                            DisplayName = "WSM",
                            DisplayOrder = (short)191
                        },
                        new
                        {
                            AttributeMemberId = -792,
                            AttributeId = -60,
                            DisplayName = "SMR",
                            DisplayOrder = (short)192
                        },
                        new
                        {
                            AttributeMemberId = -793,
                            AttributeId = -60,
                            DisplayName = "STP",
                            DisplayOrder = (short)193
                        },
                        new
                        {
                            AttributeMemberId = -794,
                            AttributeId = -60,
                            DisplayName = "SAU",
                            DisplayOrder = (short)194
                        },
                        new
                        {
                            AttributeMemberId = -795,
                            AttributeId = -60,
                            DisplayName = "SEN",
                            DisplayOrder = (short)195
                        },
                        new
                        {
                            AttributeMemberId = -796,
                            AttributeId = -60,
                            DisplayName = "SRB",
                            DisplayOrder = (short)196
                        },
                        new
                        {
                            AttributeMemberId = -797,
                            AttributeId = -60,
                            DisplayName = "SYC",
                            DisplayOrder = (short)197
                        },
                        new
                        {
                            AttributeMemberId = -798,
                            AttributeId = -60,
                            DisplayName = "SLE",
                            DisplayOrder = (short)198
                        },
                        new
                        {
                            AttributeMemberId = -799,
                            AttributeId = -60,
                            DisplayName = "SGP",
                            DisplayOrder = (short)199
                        },
                        new
                        {
                            AttributeMemberId = -800,
                            AttributeId = -60,
                            DisplayName = "SXM",
                            DisplayOrder = (short)200
                        },
                        new
                        {
                            AttributeMemberId = -801,
                            AttributeId = -60,
                            DisplayName = "SVK",
                            DisplayOrder = (short)201
                        },
                        new
                        {
                            AttributeMemberId = -802,
                            AttributeId = -60,
                            DisplayName = "SVN",
                            DisplayOrder = (short)202
                        },
                        new
                        {
                            AttributeMemberId = -803,
                            AttributeId = -60,
                            DisplayName = "SLB",
                            DisplayOrder = (short)203
                        },
                        new
                        {
                            AttributeMemberId = -804,
                            AttributeId = -60,
                            DisplayName = "SOM",
                            DisplayOrder = (short)204
                        },
                        new
                        {
                            AttributeMemberId = -805,
                            AttributeId = -60,
                            DisplayName = "ZAF",
                            DisplayOrder = (short)205
                        },
                        new
                        {
                            AttributeMemberId = -806,
                            AttributeId = -60,
                            DisplayName = "SGS",
                            DisplayOrder = (short)206
                        },
                        new
                        {
                            AttributeMemberId = -807,
                            AttributeId = -60,
                            DisplayName = "SSD",
                            DisplayOrder = (short)207
                        },
                        new
                        {
                            AttributeMemberId = -808,
                            AttributeId = -60,
                            DisplayName = "ESP",
                            DisplayOrder = (short)208
                        },
                        new
                        {
                            AttributeMemberId = -809,
                            AttributeId = -60,
                            DisplayName = "LKA",
                            DisplayOrder = (short)209
                        },
                        new
                        {
                            AttributeMemberId = -810,
                            AttributeId = -60,
                            DisplayName = "SDN",
                            DisplayOrder = (short)210
                        },
                        new
                        {
                            AttributeMemberId = -811,
                            AttributeId = -60,
                            DisplayName = "SUR",
                            DisplayOrder = (short)211
                        },
                        new
                        {
                            AttributeMemberId = -812,
                            AttributeId = -60,
                            DisplayName = "SJM",
                            DisplayOrder = (short)212
                        },
                        new
                        {
                            AttributeMemberId = -813,
                            AttributeId = -60,
                            DisplayName = "SWE",
                            DisplayOrder = (short)213
                        },
                        new
                        {
                            AttributeMemberId = -814,
                            AttributeId = -60,
                            DisplayName = "CHE",
                            DisplayOrder = (short)214
                        },
                        new
                        {
                            AttributeMemberId = -815,
                            AttributeId = -60,
                            DisplayName = "SYR",
                            DisplayOrder = (short)215
                        },
                        new
                        {
                            AttributeMemberId = -816,
                            AttributeId = -60,
                            DisplayName = "TWN",
                            DisplayOrder = (short)216
                        },
                        new
                        {
                            AttributeMemberId = -817,
                            AttributeId = -60,
                            DisplayName = "TJK",
                            DisplayOrder = (short)217
                        },
                        new
                        {
                            AttributeMemberId = -818,
                            AttributeId = -60,
                            DisplayName = "TZA",
                            DisplayOrder = (short)218
                        },
                        new
                        {
                            AttributeMemberId = -819,
                            AttributeId = -60,
                            DisplayName = "THA",
                            DisplayOrder = (short)219
                        },
                        new
                        {
                            AttributeMemberId = -820,
                            AttributeId = -60,
                            DisplayName = "TLS",
                            DisplayOrder = (short)220
                        },
                        new
                        {
                            AttributeMemberId = -821,
                            AttributeId = -60,
                            DisplayName = "TGO",
                            DisplayOrder = (short)221
                        },
                        new
                        {
                            AttributeMemberId = -822,
                            AttributeId = -60,
                            DisplayName = "TKL",
                            DisplayOrder = (short)222
                        },
                        new
                        {
                            AttributeMemberId = -823,
                            AttributeId = -60,
                            DisplayName = "TON",
                            DisplayOrder = (short)223
                        },
                        new
                        {
                            AttributeMemberId = -824,
                            AttributeId = -60,
                            DisplayName = "TTO",
                            DisplayOrder = (short)224
                        },
                        new
                        {
                            AttributeMemberId = -825,
                            AttributeId = -60,
                            DisplayName = "TUN",
                            DisplayOrder = (short)225
                        },
                        new
                        {
                            AttributeMemberId = -826,
                            AttributeId = -60,
                            DisplayName = "TUR",
                            DisplayOrder = (short)226
                        },
                        new
                        {
                            AttributeMemberId = -827,
                            AttributeId = -60,
                            DisplayName = "TKM",
                            DisplayOrder = (short)227
                        },
                        new
                        {
                            AttributeMemberId = -828,
                            AttributeId = -60,
                            DisplayName = "TCA",
                            DisplayOrder = (short)228
                        },
                        new
                        {
                            AttributeMemberId = -829,
                            AttributeId = -60,
                            DisplayName = "TUV",
                            DisplayOrder = (short)229
                        },
                        new
                        {
                            AttributeMemberId = -830,
                            AttributeId = -60,
                            DisplayName = "UGA",
                            DisplayOrder = (short)230
                        },
                        new
                        {
                            AttributeMemberId = -831,
                            AttributeId = -60,
                            DisplayName = "UKR",
                            DisplayOrder = (short)231
                        },
                        new
                        {
                            AttributeMemberId = -832,
                            AttributeId = -60,
                            DisplayName = "ARE",
                            DisplayOrder = (short)232
                        },
                        new
                        {
                            AttributeMemberId = -833,
                            AttributeId = -60,
                            DisplayName = "GBR",
                            DisplayOrder = (short)233
                        },
                        new
                        {
                            AttributeMemberId = -834,
                            AttributeId = -60,
                            DisplayName = "UMI",
                            DisplayOrder = (short)234
                        },
                        new
                        {
                            AttributeMemberId = -835,
                            AttributeId = -60,
                            DisplayName = "USA",
                            DisplayOrder = (short)235
                        },
                        new
                        {
                            AttributeMemberId = -836,
                            AttributeId = -60,
                            DisplayName = "URY",
                            DisplayOrder = (short)236
                        },
                        new
                        {
                            AttributeMemberId = -837,
                            AttributeId = -60,
                            DisplayName = "UZB",
                            DisplayOrder = (short)237
                        },
                        new
                        {
                            AttributeMemberId = -838,
                            AttributeId = -60,
                            DisplayName = "VUT",
                            DisplayOrder = (short)238
                        },
                        new
                        {
                            AttributeMemberId = -839,
                            AttributeId = -60,
                            DisplayName = "VEN",
                            DisplayOrder = (short)239
                        },
                        new
                        {
                            AttributeMemberId = -840,
                            AttributeId = -60,
                            DisplayName = "VNM",
                            DisplayOrder = (short)240
                        },
                        new
                        {
                            AttributeMemberId = -841,
                            AttributeId = -60,
                            DisplayName = "VGB",
                            DisplayOrder = (short)241
                        },
                        new
                        {
                            AttributeMemberId = -842,
                            AttributeId = -60,
                            DisplayName = "VIR",
                            DisplayOrder = (short)242
                        },
                        new
                        {
                            AttributeMemberId = -843,
                            AttributeId = -60,
                            DisplayName = "WLF",
                            DisplayOrder = (short)243
                        },
                        new
                        {
                            AttributeMemberId = -844,
                            AttributeId = -60,
                            DisplayName = "ESH",
                            DisplayOrder = (short)244
                        },
                        new
                        {
                            AttributeMemberId = -845,
                            AttributeId = -60,
                            DisplayName = "YEM",
                            DisplayOrder = (short)245
                        },
                        new
                        {
                            AttributeMemberId = -846,
                            AttributeId = -60,
                            DisplayName = "ZMB",
                            DisplayOrder = (short)246
                        },
                        new
                        {
                            AttributeMemberId = -847,
                            AttributeId = -60,
                            DisplayName = "ZWE",
                            DisplayOrder = (short)247
                        },
                        new
                        {
                            AttributeMemberId = -848,
                            AttributeId = -60,
                            DisplayName = "ALA",
                            DisplayOrder = (short)248
                        },
                        new
                        {
                            AttributeMemberId = -200,
                            AttributeId = -20,
                            DisplayName = "Individual Stocks",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -201,
                            AttributeId = -20,
                            DisplayName = "Equity Funds & ETFs",
                            DisplayOrder = (short)1
                        },
                        new
                        {
                            AttributeMemberId = -202,
                            AttributeId = -20,
                            DisplayName = "Individual Bonds & CDs",
                            DisplayOrder = (short)2
                        },
                        new
                        {
                            AttributeMemberId = -203,
                            AttributeId = -20,
                            DisplayName = "Fixed Icome Funds & ETFs",
                            DisplayOrder = (short)3
                        },
                        new
                        {
                            AttributeMemberId = -204,
                            AttributeId = -20,
                            DisplayName = "Option Contracts",
                            DisplayOrder = (short)4
                        },
                        new
                        {
                            AttributeMemberId = -205,
                            AttributeId = -20,
                            DisplayName = "Digital Assets",
                            DisplayOrder = (short)5
                        },
                        new
                        {
                            AttributeMemberId = -206,
                            AttributeId = -20,
                            DisplayName = "Other Funds & ETPs",
                            DisplayOrder = (short)6
                        },
                        new
                        {
                            AttributeMemberId = -207,
                            AttributeId = -20,
                            DisplayName = "Short-Term Debt",
                            DisplayOrder = (short)7
                        },
                        new
                        {
                            AttributeMemberId = -208,
                            AttributeId = -20,
                            DisplayName = "Long-Term Debt",
                            DisplayOrder = (short)8
                        },
                        new
                        {
                            AttributeMemberId = -209,
                            AttributeId = -20,
                            DisplayName = "Cash Funds & Currency",
                            DisplayOrder = (short)9
                        },
                        new
                        {
                            AttributeMemberId = -210,
                            AttributeId = -20,
                            DisplayName = "Cash Deposit",
                            DisplayOrder = (short)10
                        },
                        new
                        {
                            AttributeMemberId = -211,
                            AttributeId = -20,
                            DisplayName = "Expense",
                            DisplayOrder = (short)11
                        },
                        new
                        {
                            AttributeMemberId = -212,
                            AttributeId = -20,
                            DisplayName = "None/External",
                            DisplayOrder = (short)12
                        },
                        new
                        {
                            AttributeMemberId = -300,
                            AttributeId = -30,
                            DisplayName = "Common Stock",
                            DisplayOrder = (short)0
                        },
                        new
                        {
                            AttributeMemberId = -301,
                            AttributeId = -30,
                            DisplayName = "American Depository Receipt",
                            DisplayOrder = (short)1
                        },
                        new
                        {
                            AttributeMemberId = -302,
                            AttributeId = -30,
                            DisplayName = "Equity ETF",
                            DisplayOrder = (short)2
                        },
                        new
                        {
                            AttributeMemberId = -303,
                            AttributeId = -30,
                            DisplayName = "Equity Mutual Fund",
                            DisplayOrder = (short)3
                        },
                        new
                        {
                            AttributeMemberId = -304,
                            AttributeId = -30,
                            DisplayName = "Corporate Bond",
                            DisplayOrder = (short)4
                        },
                        new
                        {
                            AttributeMemberId = -305,
                            AttributeId = -30,
                            DisplayName = "Municipal Bond",
                            DisplayOrder = (short)5
                        },
                        new
                        {
                            AttributeMemberId = -306,
                            AttributeId = -30,
                            DisplayName = "U.S. Government Bond/Bill",
                            DisplayOrder = (short)6
                        },
                        new
                        {
                            AttributeMemberId = -307,
                            AttributeId = -30,
                            DisplayName = "Certificate of Deposit",
                            DisplayOrder = (short)7
                        },
                        new
                        {
                            AttributeMemberId = -308,
                            AttributeId = -30,
                            DisplayName = "Bond ETF",
                            DisplayOrder = (short)8
                        },
                        new
                        {
                            AttributeMemberId = -309,
                            AttributeId = -30,
                            DisplayName = "Bond Mutual Fund",
                            DisplayOrder = (short)9
                        },
                        new
                        {
                            AttributeMemberId = -310,
                            AttributeId = -30,
                            DisplayName = "Call Option",
                            DisplayOrder = (short)10
                        },
                        new
                        {
                            AttributeMemberId = -311,
                            AttributeId = -30,
                            DisplayName = "Put Option",
                            DisplayOrder = (short)11
                        },
                        new
                        {
                            AttributeMemberId = -312,
                            AttributeId = -30,
                            DisplayName = "Cryptocurrency",
                            DisplayOrder = (short)12
                        },
                        new
                        {
                            AttributeMemberId = -313,
                            AttributeId = -30,
                            DisplayName = "Exchange-Traded Note",
                            DisplayOrder = (short)13
                        },
                        new
                        {
                            AttributeMemberId = -314,
                            AttributeId = -30,
                            DisplayName = "Retirement Plan",
                            DisplayOrder = (short)14
                        },
                        new
                        {
                            AttributeMemberId = -315,
                            AttributeId = -30,
                            DisplayName = "Revolving Debt",
                            DisplayOrder = (short)15
                        },
                        new
                        {
                            AttributeMemberId = -316,
                            AttributeId = -30,
                            DisplayName = "Student Debt",
                            DisplayOrder = (short)16
                        },
                        new
                        {
                            AttributeMemberId = -317,
                            AttributeId = -30,
                            DisplayName = "Money-Market Fund",
                            DisplayOrder = (short)17
                        },
                        new
                        {
                            AttributeMemberId = -318,
                            AttributeId = -30,
                            DisplayName = "Fiat Currency",
                            DisplayOrder = (short)18
                        },
                        new
                        {
                            AttributeMemberId = -319,
                            AttributeId = -30,
                            DisplayName = "Cash",
                            DisplayOrder = (short)19
                        },
                        new
                        {
                            AttributeMemberId = -320,
                            AttributeId = -30,
                            DisplayName = "Expense",
                            DisplayOrder = (short)20
                        },
                        new
                        {
                            AttributeMemberId = -321,
                            AttributeId = -30,
                            DisplayName = "None/External",
                            DisplayOrder = (short)21
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttributeScope", b =>
                {
                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeID")
                        .HasColumnOrder(0);

                    b.Property<string>("ScopeCode")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("ScopeCode")
                        .HasColumnOrder(1)
                        .IsFixedLength();

                    b.HasKey("AttributeId", "ScopeCode");

                    b.ToTable("ModelAttributeScope", "FinanceApp");

                    b.HasCheckConstraint("CK_ModelAttributeScope_ScopeCode", "[ScopeCode] in ('acc', 'bnk', 'brk', 'cou', 'cus', 'exc', 'sec')");

                    b.HasData(
                        new
                        {
                            AttributeId = -10,
                            ScopeCode = "sec"
                        },
                        new
                        {
                            AttributeId = -20,
                            ScopeCode = "sec"
                        },
                        new
                        {
                            AttributeId = -30,
                            ScopeCode = "sec"
                        },
                        new
                        {
                            AttributeId = -40,
                            ScopeCode = "brk"
                        },
                        new
                        {
                            AttributeId = -50,
                            ScopeCode = "brk"
                        },
                        new
                        {
                            AttributeId = -60,
                            ScopeCode = "sec"
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ReportConfiguration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConfigurationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigurationId"), 1L, 1);

                    b.Property<string>("ConfigurationCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ConfigurationDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("XmlDefinition")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.HasKey("ConfigurationId")
                        .HasName("PK_ReportSetting");

                    b.HasIndex(new[] { "ConfigurationCode" }, "UNI_ReportConfiguration_ConfigurationCode")
                        .IsUnique()
                        .HasFilter("([ConfigurationCode] IS NOT NULL)");

                    b.ToTable("ReportConfiguration", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ReportStyleSheet", b =>
                {
                    b.Property<int>("StyleSheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StyleSheetID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StyleSheetId"), 1L, 1);

                    b.Property<string>("StyleSheetCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("StyleSheetDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("XmlDefinition")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.HasKey("StyleSheetId");

                    b.HasIndex(new[] { "StyleSheetCode" }, "UNI_ReportStyleSheet_StyleSheetCode")
                        .IsUnique()
                        .HasFilter("([StyleSheetCode] IS NOT NULL)");

                    b.ToTable("ReportStyleSheet", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ResourceImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<byte[]>("ImageBinary")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ImageId");

                    b.ToTable("ResourceImage", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Security", b =>
                {
                    b.Property<int>("SecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityId"), 1L, 1);

                    b.Property<bool>("HasPerpetualMarket")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPerpetualPrice")
                        .HasColumnType("bit");

                    b.Property<string>("Issuer")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("SecurityDescription")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<int?>("SecurityExchangeId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityExchangeID");

                    b.Property<int>("SecurityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeID");

                    b.HasKey("SecurityId");

                    b.HasIndex(new[] { "SecurityExchangeId" }, "IX_Security_SecurityExchangeID");

                    b.HasIndex(new[] { "SecurityTypeId" }, "IX_Security_SecurityTypeID");

                    b.ToTable("Security", "FinanceApp");

                    b.HasData(
                        new
                        {
                            SecurityId = -100,
                            HasPerpetualMarket = false,
                            HasPerpetualPrice = false,
                            SecurityDescription = "None",
                            SecurityTypeId = -321
                        },
                        new
                        {
                            SecurityId = -101,
                            HasPerpetualMarket = false,
                            HasPerpetualPrice = true,
                            SecurityDescription = "Broker cash",
                            SecurityTypeId = -319
                        },
                        new
                        {
                            SecurityId = -102,
                            HasPerpetualMarket = false,
                            HasPerpetualPrice = false,
                            SecurityDescription = "Foreign tax withholding",
                            SecurityTypeId = -320
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityAttributeMemberEntry", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(0);

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnOrder(12);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("AttributeMemberId", "SecurityId", "EffectiveDate");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_SecurityAttributeMemberEntry_AttributeMemberID");

                    b.HasIndex(new[] { "SecurityId" }, "IX_SecurityAttributeMemberEntry_SecurityID");

                    b.ToTable("SecurityAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityExchange", b =>
                {
                    b.Property<int>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExchangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExchangeId"), 1L, 1);

                    b.Property<string>("ExchangeCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ExchangeDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ExchangeId");

                    b.HasIndex(new[] { "ExchangeCode" }, "UNI_SecurityExchange_ExchangeCode")
                        .IsUnique()
                        .HasFilter("([ExchangeCode] IS NOT NULL)");

                    b.ToTable("SecurityExchange", "FinanceApp");

                    b.HasData(
                        new
                        {
                            ExchangeId = -1,
                            ExchangeCode = "TSX",
                            ExchangeDescription = "TSX"
                        },
                        new
                        {
                            ExchangeId = -2,
                            ExchangeCode = "NYSE",
                            ExchangeDescription = "NYSE"
                        },
                        new
                        {
                            ExchangeId = -3,
                            ExchangeCode = "OTCQX",
                            ExchangeDescription = "OTCQX"
                        },
                        new
                        {
                            ExchangeId = -4,
                            ExchangeCode = "NYSE American",
                            ExchangeDescription = "NYSE American"
                        },
                        new
                        {
                            ExchangeId = -5,
                            ExchangeCode = "NASDAQ",
                            ExchangeDescription = "NASDAQ"
                        },
                        new
                        {
                            ExchangeId = -6,
                            ExchangeCode = "OTCQB",
                            ExchangeDescription = "OTCQB"
                        },
                        new
                        {
                            ExchangeId = -7,
                            ExchangeCode = "OTC Pink",
                            ExchangeDescription = "OTC Pink"
                        },
                        new
                        {
                            ExchangeId = -8,
                            ExchangeCode = "NYSE Arca",
                            ExchangeDescription = "NYSE Arca"
                        },
                        new
                        {
                            ExchangeId = -9,
                            ExchangeCode = "CBOE",
                            ExchangeDescription = "CBOE Consolidated Listings"
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityPrice", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PriceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"), 1L, 1);

                    b.Property<decimal>("PriceClose")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("PriceHigh")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal?>("PriceLow")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal?>("PriceOpen")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    b.Property<long?>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("PriceId");

                    b.HasIndex(new[] { "SecurityId" }, "IX_SecurityPrice_SecurityID");

                    b.HasIndex(new[] { "PriceDate", "SecurityId" }, "UNI_SecurityPrice_RowDef")
                        .IsUnique();

                    b.ToTable("SecurityPrice", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbol", b =>
                {
                    b.Property<int>("SymbolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SymbolID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymbolId"), 1L, 1);

                    b.Property<string>("Cusip")
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .IsFixedLength();

                    b.Property<string>("CustomSymbol")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<string>("OptionTicker")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    b.Property<string>("SymbolCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComputedColumnSql("(case when [SymbolTypeID]=(-10) then [Cusip] when [SymbolTypeID]=(-20) then [CustomSymbol] when [SymbolTypeID]=(-30) then [OptionTicker] when [SymbolTypeID]=(-40) then [Ticker]  end)", true);

                    b.Property<int>("SymbolTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SymbolTypeID");

                    b.Property<string>("Ticker")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("SymbolId");

                    b.HasIndex(new[] { "SymbolTypeId" }, "IX_SecuritySymbol_SymbolTypeID");

                    b.HasIndex(new[] { "SecurityId", "EffectiveDate" }, "UNI_SecuritySymbol_Column")
                        .IsUnique();

                    b.ToTable("SecuritySymbol", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbolMap", b =>
                {
                    b.Property<int>("SymbolMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SymbolMapID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymbolMapId"), 1L, 1);

                    b.Property<int>("AccountCustodianId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCustodianID");

                    b.Property<string>("CustodianSymbol")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<int>("SecuritySymbolId")
                        .HasColumnType("int")
                        .HasColumnName("SecuritySymbolID");

                    b.HasKey("SymbolMapId");

                    b.HasIndex(new[] { "AccountCustodianId" }, "IX_SecuritySymbolMap_AccountCustodianID");

                    b.HasIndex(new[] { "SecuritySymbolId", "AccountCustodianId" }, "UNI_SecuritySymbolMap_RowDef")
                        .IsUnique();

                    b.ToTable("SecuritySymbolMap", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbolType", b =>
                {
                    b.Property<int>("SymbolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SymbolTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymbolTypeId"), 1L, 1);

                    b.Property<string>("SymbolTypeName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("SymbolTypeId");

                    b.HasIndex(new[] { "SymbolTypeName" }, "UNI_SecuritySymbolType_TypeName")
                        .IsUnique()
                        .HasFilter("([SymbolTypeName] IS NOT NULL)");

                    b.ToTable("SecuritySymbolType", "FinanceApp");

                    b.HasData(
                        new
                        {
                            SymbolTypeId = -10,
                            SymbolTypeName = "CUSIP"
                        },
                        new
                        {
                            SymbolTypeId = -20,
                            SymbolTypeName = "Custom Identifier"
                        },
                        new
                        {
                            SymbolTypeId = -30,
                            SymbolTypeName = "Option Ticker"
                        },
                        new
                        {
                            SymbolTypeId = -40,
                            SymbolTypeName = "Ticker"
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityType", b =>
                {
                    b.Property<int>("SecurityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeID");

                    b.Property<bool>("CanHaveDerivative")
                        .HasColumnType("bit");

                    b.Property<bool>("CanHavePosition")
                        .HasColumnType("bit");

                    b.Property<bool>("HeldInWallet")
                        .HasColumnType("bit");

                    b.Property<int>("SecurityTypeGroupId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeGroupID");

                    b.Property<string>("SecurityTypeName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<decimal>("ValuationFactor")
                        .HasColumnType("decimal(7,4)");

                    b.HasKey("SecurityTypeId");

                    b.HasIndex(new[] { "SecurityTypeGroupId" }, "IX_SecurityType_SecurityTypeGroupID");

                    b.HasIndex(new[] { "SecurityTypeName" }, "UNI_SecurityType_SecurityTypeName")
                        .IsUnique()
                        .HasFilter("([SecurityTypeName] IS NOT NULL)");

                    b.ToTable("SecurityType", "FinanceApp");

                    b.HasData(
                        new
                        {
                            SecurityTypeId = -300,
                            CanHaveDerivative = true,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -200,
                            SecurityTypeName = "Common Stock",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -301,
                            CanHaveDerivative = true,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -200,
                            SecurityTypeName = "American Depository Receipt",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -302,
                            CanHaveDerivative = true,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -201,
                            SecurityTypeName = "Equity ETF",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -303,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -201,
                            SecurityTypeName = "Equity Mutual Fund",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -304,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -202,
                            SecurityTypeName = "Corporate Bond",
                            ValuationFactor = 0.01m
                        },
                        new
                        {
                            SecurityTypeId = -305,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -202,
                            SecurityTypeName = "Municipal Bond",
                            ValuationFactor = 0.01m
                        },
                        new
                        {
                            SecurityTypeId = -306,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -202,
                            SecurityTypeName = "U.S. Government Bond/Bill",
                            ValuationFactor = 0.01m
                        },
                        new
                        {
                            SecurityTypeId = -307,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -202,
                            SecurityTypeName = "Certificate of Deposit",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -308,
                            CanHaveDerivative = true,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -203,
                            SecurityTypeName = "Bond ETF",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -309,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -203,
                            SecurityTypeName = "Bond Mutual Fund",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -310,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -204,
                            SecurityTypeName = "Call Option",
                            ValuationFactor = 100m
                        },
                        new
                        {
                            SecurityTypeId = -311,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -204,
                            SecurityTypeName = "Put Option",
                            ValuationFactor = 100m
                        },
                        new
                        {
                            SecurityTypeId = -312,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = true,
                            SecurityTypeGroupId = -205,
                            SecurityTypeName = "Cryptocurrency",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -313,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -206,
                            SecurityTypeName = "Exchange-Traded Note",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -314,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -206,
                            SecurityTypeName = "Retirement Plan",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -315,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -207,
                            SecurityTypeName = "Revolving Debt",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -316,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -208,
                            SecurityTypeName = "Student Debt",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -317,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -209,
                            SecurityTypeName = "Money-Market Fund",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -318,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -209,
                            SecurityTypeName = "Fiat Currency",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -319,
                            CanHaveDerivative = false,
                            CanHavePosition = true,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -210,
                            SecurityTypeName = "Cash",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -320,
                            CanHaveDerivative = false,
                            CanHavePosition = false,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -211,
                            SecurityTypeName = "Expense",
                            ValuationFactor = 1m
                        },
                        new
                        {
                            SecurityTypeId = -321,
                            CanHaveDerivative = false,
                            CanHavePosition = false,
                            HeldInWallet = false,
                            SecurityTypeGroupId = -212,
                            SecurityTypeName = "None/External",
                            ValuationFactor = 1m
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityTypeGroup", b =>
                {
                    b.Property<int>("SecurityTypeGroupId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeGroupID");

                    b.Property<bool>("DepositSource")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityTypeGroupName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<bool>("Transactable")
                        .HasColumnType("bit");

                    b.HasKey("SecurityTypeGroupId");

                    b.HasIndex(new[] { "SecurityTypeGroupName" }, "UNI_SecurityTypeGroup_SecurityTypeGroupName")
                        .IsUnique()
                        .HasFilter("([SecurityTypeGroupName] IS NOT NULL)");

                    b.ToTable("SecurityTypeGroup", "FinanceApp");

                    b.HasData(
                        new
                        {
                            SecurityTypeGroupId = -200,
                            DepositSource = false,
                            SecurityTypeGroupName = "Individual Stocks",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -201,
                            DepositSource = false,
                            SecurityTypeGroupName = "Equity Funds & ETFs",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -202,
                            DepositSource = false,
                            SecurityTypeGroupName = "Individual Bonds & CDs",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -203,
                            DepositSource = false,
                            SecurityTypeGroupName = "Fixed Icome Funds & ETFs",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -204,
                            DepositSource = false,
                            SecurityTypeGroupName = "Option Contracts",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -205,
                            DepositSource = false,
                            SecurityTypeGroupName = "Digital Assets",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -206,
                            DepositSource = false,
                            SecurityTypeGroupName = "Other Funds & ETPs",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -207,
                            DepositSource = false,
                            SecurityTypeGroupName = "Short-Term Debt",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -208,
                            DepositSource = false,
                            SecurityTypeGroupName = "Long-Term Debt",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -209,
                            DepositSource = false,
                            SecurityTypeGroupName = "Cash Funds & Currency",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -210,
                            DepositSource = true,
                            SecurityTypeGroupName = "Cash Deposit",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -211,
                            DepositSource = false,
                            SecurityTypeGroupName = "Expense",
                            Transactable = true
                        },
                        new
                        {
                            SecurityTypeGroupId = -212,
                            DepositSource = true,
                            SecurityTypeGroupName = "None/External",
                            Transactable = false
                        });
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Account", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountCustodian", "AccountCustodian")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountCustodianId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Account_AccountCustodian");

                    b.HasOne("NjordinSight.EntityModel.AccountObject", "AccountNavigation")
                        .WithOne("Account")
                        .HasForeignKey("NjordinSight.EntityModel.Account", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountCustodian");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountObject", "AccountObject")
                        .WithMany("AccountAttributeMemberEntries")
                        .HasForeignKey("AccountObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountAttributeMemberEntry_AccountObjectID");

                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("AccountAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountAttributeMemberEntry_ModelAttributeMember");

                    b.Navigation("AccountObject");

                    b.Navigation("AttributeMember");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountComposite", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountObject", "AccountCompositeNavigation")
                        .WithOne("AccountComposite")
                        .HasForeignKey("NjordinSight.EntityModel.AccountComposite", "AccountCompositeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountComposite_AccountObject");

                    b.Navigation("AccountCompositeNavigation");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountCompositeMember", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountComposite", "AccountComposite")
                        .WithMany("AccountCompositeMembers")
                        .HasForeignKey("AccountCompositeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountCommpositeMember_AccountComposite");

                    b.HasOne("NjordinSight.EntityModel.Account", "Account")
                        .WithMany("AccountCompositeMembers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountCommpositeMember_Account");

                    b.Navigation("Account");

                    b.Navigation("AccountComposite");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountWallet", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.Account", "Account")
                        .WithMany("AccountWallets")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountWallet_Account");

                    b.HasOne("NjordinSight.EntityModel.Security", "DenominationSecurity")
                        .WithMany("AccountWallets")
                        .HasForeignKey("DenominationSecurityId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountWallet_Security");

                    b.Navigation("Account");

                    b.Navigation("DenominationSecurity");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransaction", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.Account", "Account")
                        .WithMany("BankTransactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_BankTransaction_Account");

                    b.HasOne("NjordinSight.EntityModel.BankTransactionCode", "TransactionCode")
                        .WithMany("BankTransactions")
                        .HasForeignKey("TransactionCodeId")
                        .IsRequired()
                        .HasConstraintName("FK_BankTransaction_BankTransactionCode");

                    b.Navigation("Account");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransactionCodeAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("BankTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankTransactionCodeAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordinSight.EntityModel.BankTransactionCode", "TransactionCode")
                        .WithMany("BankTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("TransactionCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankTransactionCodeAttributeMemberEntry_BankTransactionCode");

                    b.Navigation("AttributeMember");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransaction", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.Account", "Account")
                        .WithMany("BrokerTransactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_Account");

                    b.HasOne("NjordinSight.EntityModel.Security", "DepSecurity")
                        .WithMany("BrokerTransactionDepSecurities")
                        .HasForeignKey("DepSecurityId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_DepSecurityID");

                    b.HasOne("NjordinSight.EntityModel.Security", "Security")
                        .WithMany("BrokerTransactionSecurities")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_SecurityID");

                    b.HasOne("NjordinSight.EntityModel.BrokerTransaction", "TaxLot")
                        .WithMany("InverseTaxLot")
                        .HasForeignKey("TaxLotId")
                        .HasConstraintName("FK_BrokerTransaction_BrokerTransaction");

                    b.HasOne("NjordinSight.EntityModel.BrokerTransactionCode", "TransactionCode")
                        .WithMany("BrokerTransactions")
                        .HasForeignKey("TransactionCodeId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_BrokerTransactionCode");

                    b.Navigation("Account");

                    b.Navigation("DepSecurity");

                    b.Navigation("Security");

                    b.Navigation("TaxLot");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransactionCodeAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("BrokerTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransactionCodeAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordinSight.EntityModel.BrokerTransactionCode", "TransactionCode")
                        .WithMany("BrokerTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("TransactionCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransactionCodeAttributeMemberEntry_BrokerTransactionCode");

                    b.Navigation("AttributeMember");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Country", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMemberNavigation")
                        .WithOne("Country")
                        .HasForeignKey("NjordinSight.EntityModel.Country", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Country_ModelAttributeMember");

                    b.Navigation("AttributeMemberNavigation");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.CountryAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("CountryAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CountryAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordinSight.EntityModel.Country", "Country")
                        .WithMany("CountryAttributeMemberEntries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CountryAttributeMemberEntry_Country");

                    b.Navigation("AttributeMember");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentPerformanceAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountObject", "AccountObject")
                        .WithMany("InvestmentPerformanceAttributeMemberEntries")
                        .HasForeignKey("AccountObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentPerformanceAttributeMemberEntry_AccountObject");

                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("InvestmentPerformanceAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentPerformanceAttributeMemberEntry_ModelAttributeMember");

                    b.Navigation("AccountObject");

                    b.Navigation("AttributeMember");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentPerformanceEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountObject", "AccountObject")
                        .WithMany("InvestmentPerformanceEntries")
                        .HasForeignKey("AccountObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentPerformanceEntry_AccountObject");

                    b.Navigation("AccountObject");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentStrategyTarget", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("InvestmentStrategyTargets")
                        .HasForeignKey("AttributeMemberId")
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentStrategyTarget_ModelAttributeMember");

                    b.HasOne("NjordinSight.EntityModel.InvestmentStrategy", "InvestmentStrategy")
                        .WithMany("InvestmentStrategyTargets")
                        .HasForeignKey("InvestmentStrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentStrategyTarget_InvestmentStrategy");

                    b.Navigation("AttributeMember");

                    b.Navigation("InvestmentStrategy");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketHolidayObservance", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.MarketHoliday", "MarketHoliday")
                        .WithMany("MarketHolidaySchedules")
                        .HasForeignKey("MarketHolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MarketHolidayObservance_MarketHoliday");

                    b.Navigation("MarketHoliday");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketIndexPrice", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.MarketIndex", "MarketIndex")
                        .WithMany("MarketIndexPrices")
                        .HasForeignKey("MarketIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MarketIndexPrice_MarketIndex");

                    b.Navigation("MarketIndex");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttributeMember", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttribute", "Attribute")
                        .WithMany("ModelAttributeMembers")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModelAttributeMember_ModelAttribute");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttributeScope", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttribute", "Attribute")
                        .WithMany("ModelAttributeScopes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModelAttributeScope_ModelAttribute");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Security", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.SecurityExchange", "SecurityExchange")
                        .WithMany("Securities")
                        .HasForeignKey("SecurityExchangeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Security_SecurityExchange");

                    b.HasOne("NjordinSight.EntityModel.SecurityType", "SecurityType")
                        .WithMany("Securities")
                        .HasForeignKey("SecurityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Security_SecurityType");

                    b.Navigation("SecurityExchange");

                    b.Navigation("SecurityType");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("SecurityAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecurityAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordinSight.EntityModel.Security", "Security")
                        .WithMany("SecurityAttributeMemberEntries")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecurityAttributeMemberEntry_Security");

                    b.Navigation("AttributeMember");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityPrice", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.Security", "Security")
                        .WithMany("SecurityPrices")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecurityPrice_Security");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbol", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.Security", "Security")
                        .WithMany("SecuritySymbols")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbol_Security");

                    b.HasOne("NjordinSight.EntityModel.SecuritySymbolType", "SymbolType")
                        .WithMany("SecuritySymbols")
                        .HasForeignKey("SymbolTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbol_SecuritySymbolType");

                    b.Navigation("Security");

                    b.Navigation("SymbolType");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbolMap", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountCustodian", "AccountCustodian")
                        .WithMany("SecuritySymbolMaps")
                        .HasForeignKey("AccountCustodianId")
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbolMap_AccountCustodian");

                    b.HasOne("NjordinSight.EntityModel.SecuritySymbol", "SecuritySymbol")
                        .WithMany("SecuritySymbolMaps")
                        .HasForeignKey("SecuritySymbolId")
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbolMap_SecuritySymbol");

                    b.Navigation("AccountCustodian");

                    b.Navigation("SecuritySymbol");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityType", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.SecurityTypeGroup", "SecurityTypeGroup")
                        .WithMany("SecurityTypes")
                        .HasForeignKey("SecurityTypeGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_SecurityType_SecurityTypeGroup");

                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMemberNavigation")
                        .WithOne("SecurityType")
                        .HasForeignKey("NjordinSight.EntityModel.SecurityType", "SecurityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SecurityType_ModelAttributeMember");

                    b.Navigation("AttributeMemberNavigation");

                    b.Navigation("SecurityTypeGroup");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityTypeGroup", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMemberNavigation")
                        .WithOne("SecurityTypeGroup")
                        .HasForeignKey("NjordinSight.EntityModel.SecurityTypeGroup", "SecurityTypeGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_SecurityTypeGroup_ModelAttributeMember");

                    b.Navigation("AttributeMemberNavigation");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Account", b =>
                {
                    b.Navigation("AccountCompositeMembers");

                    b.Navigation("AccountWallets");

                    b.Navigation("BankTransactions");

                    b.Navigation("BrokerTransactions");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountComposite", b =>
                {
                    b.Navigation("AccountCompositeMembers");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountCustodian", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("SecuritySymbolMaps");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountObject", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("AccountAttributeMemberEntries");

                    b.Navigation("AccountComposite");

                    b.Navigation("InvestmentPerformanceAttributeMemberEntries");

                    b.Navigation("InvestmentPerformanceEntries");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransactionCode", b =>
                {
                    b.Navigation("BankTransactionCodeAttributeMemberEntries");

                    b.Navigation("BankTransactions");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransaction", b =>
                {
                    b.Navigation("InverseTaxLot");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransactionCode", b =>
                {
                    b.Navigation("BrokerTransactionCodeAttributeMemberEntries");

                    b.Navigation("BrokerTransactions");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Country", b =>
                {
                    b.Navigation("CountryAttributeMemberEntries");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentStrategy", b =>
                {
                    b.Navigation("InvestmentStrategyTargets");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketHoliday", b =>
                {
                    b.Navigation("MarketHolidaySchedules");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketIndex", b =>
                {
                    b.Navigation("MarketIndexPrices");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttribute", b =>
                {
                    b.Navigation("ModelAttributeMembers");

                    b.Navigation("ModelAttributeScopes");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttributeMember", b =>
                {
                    b.Navigation("AccountAttributeMemberEntries");

                    b.Navigation("BankTransactionCodeAttributeMemberEntries");

                    b.Navigation("BrokerTransactionCodeAttributeMemberEntries");

                    b.Navigation("Country");

                    b.Navigation("CountryAttributeMemberEntries");

                    b.Navigation("InvestmentPerformanceAttributeMemberEntries");

                    b.Navigation("InvestmentStrategyTargets");

                    b.Navigation("SecurityAttributeMemberEntries");

                    b.Navigation("SecurityType");

                    b.Navigation("SecurityTypeGroup");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Security", b =>
                {
                    b.Navigation("AccountWallets");

                    b.Navigation("BrokerTransactionDepSecurities");

                    b.Navigation("BrokerTransactionSecurities");

                    b.Navigation("SecurityAttributeMemberEntries");

                    b.Navigation("SecurityPrices");

                    b.Navigation("SecuritySymbols");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityExchange", b =>
                {
                    b.Navigation("Securities");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbol", b =>
                {
                    b.Navigation("SecuritySymbolMaps");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbolType", b =>
                {
                    b.Navigation("SecuritySymbols");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityType", b =>
                {
                    b.Navigation("Securities");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityTypeGroup", b =>
                {
                    b.Navigation("SecurityTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
