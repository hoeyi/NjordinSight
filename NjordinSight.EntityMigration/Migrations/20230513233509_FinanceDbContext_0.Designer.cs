// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NjordinSight.EntityModel.Context;

#nullable disable

namespace NjordinSight.EntityMigration.Migrations
{
    [DbContext(typeof(FinanceDbContext))]
    [Migration("20230513233509_FinanceDbContext_0")]
    partial class FinanceDbContext_0
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("seqAuditEventID", "FinanceApp")
                .HasMin(1L);

            modelBuilder.HasSequence<int>("seqModelAttributeMember", "FinanceApp");

            modelBuilder.Entity("NjordinSight.EntityModel.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<int?>("AccountCustodianId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCustodianID");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<DateTime?>("BooksClosedDate")
                        .HasColumnType("date");

                    b.Property<bool>("HasBankTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBrokerTransaction")
                        .HasColumnType("bit");

                    b.Property<bool>("HasWallet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplianceTradable")
                        .HasColumnType("bit");

                    b.HasKey("AccountId");

                    b.HasIndex(new[] { "AccountCustodianId" }, "IX_Account_AccountCustodianID");

                    b.ToTable("Account", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountAttributeMemberEntry", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(0);

                    b.Property<int>("AccountObjectId")
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("AttributeMemberId", "AccountObjectId", "EffectiveDate");

                    b.HasIndex(new[] { "AccountObjectId" }, "IX_AccountAttributeMemberEntry_AccountObjectID");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_AccountAttributeMemberEntry_AttributeMemberID");

                    b.ToTable("AccountAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountComposite", b =>
                {
                    b.Property<int>("AccountCompositeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCompositeID");

                    b.HasKey("AccountCompositeId");

                    b.ToTable("AccountComposite", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountCompositeMember", b =>
                {
                    b.Property<int>("AccountCompositeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCompositeID")
                        .HasColumnOrder(0);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<string>("Comment")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("date");

                    b.HasKey("AccountCompositeId", "AccountId", "EntryDate");

                    b.HasIndex(new[] { "AccountCompositeId" }, "IX_AccountCompositeMember_AccountCompositeID");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountCompositeMember_AccountID");

                    b.ToTable("AccountCompositeMember", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountCustodian", b =>
                {
                    b.Property<int>("AccountCustodianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountCustodianID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountCustodianId"), 1L, 1);

                    b.Property<string>("CustodianCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.HasKey("AccountCustodianId");

                    b.HasIndex(new[] { "CustodianCode" }, "UNI_AccountCustodian_CustodianCode")
                        .IsUnique()
                        .HasFilter("([CustodianCode] IS NOT NULL)");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_AccountCustodian_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.ToTable("AccountCustodian", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountObject", b =>
                {
                    b.Property<int>("AccountObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountObjectId"), 1L, 1);

                    b.Property<string>("AccountObjectCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("date");

                    b.Property<string>("ObjectDescription")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ObjectDisplayName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<string>("PrefixedObjectCode")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasComputedColumnSql("(case when [ObjectType]='c' then concat('+',[AccountObjectCode]) else [AccountObjectCode] end)", true);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("AccountObjectId");

                    b.HasIndex(new[] { "AccountObjectCode" }, "UNI_AccountObject_AccountObjectCode")
                        .IsUnique()
                        .HasFilter("([AccountObjectCode] IS NOT NULL)");

                    b.ToTable("AccountObject", "FinanceApp");

                    b.HasCheckConstraint("CK_AccountObject_ObjectType", "[ObjectType] IN ('c','a')");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountWallet", b =>
                {
                    b.Property<int>("AccountWalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountWalletID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountWalletId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("AddressCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<string>("AddressTag")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .UseCollation("Latin1_General_BIN2");

                    b.Property<int>("DenominationSecurityId")
                        .HasColumnType("int")
                        .HasColumnName("DenominationSecurityID");

                    b.HasKey("AccountWalletId");

                    b.HasIndex(new[] { "AccountId" }, "IX_AccountWallet_AccountID");

                    b.HasIndex(new[] { "DenominationSecurityId", "AccountId" }, "UNI_AccountWallet_RowDef")
                        .IsUnique();

                    b.ToTable("AccountWallet", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AuditEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    b.Property<int>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("AuditUserID");

                    b.Property<DateTime>("EventTimeUtc")
                        .HasColumnType("datetime")
                        .HasColumnName("EventTimeUTC");

                    b.HasKey("EventId");

                    b.ToTable("AuditEvent", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("Comment")
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<byte[]>("TransactionVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TransactionId");

                    b.HasIndex(new[] { "AccountId" }, "IX_BankTransaction_AccountID");

                    b.HasIndex(new[] { "TransactionCodeId" }, "IX_BankTransaction_TransactionCodeID");

                    b.ToTable("BankTransaction", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransactionCode", b =>
                {
                    b.Property<int>("TransactionCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionCodeId"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("TransactionCodeId")
                        .HasName("PK_BankTransactionSymbol");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_BankTransactionCode_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.HasIndex(new[] { "TransactionCode" }, "UNI_BankTransactionCode_TransactionCode")
                        .IsUnique()
                        .HasFilter("([TransactionCode] IS NOT NULL)");

                    b.ToTable("BankTransactionCode", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransactionCodeAttributeMemberEntry", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(0);

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("AttributeMemberId", "TransactionCodeId", "EffectiveDate");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_BankTransactionCodeAttributeMemberEntry_AttributeMemberID");

                    b.HasIndex(new[] { "TransactionCodeId" }, "IX_BankTransactionCodeAttributeMemberEntry_TransactionCodeID");

                    b.ToTable("BankTransactionCodeAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<DateTime?>("AcquisitionDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("DepSecurityId")
                        .HasColumnType("int")
                        .HasColumnName("DepSecurityID");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(9,4)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(19,6)");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    b.Property<DateTime?>("SettleDate")
                        .HasColumnType("date");

                    b.Property<int?>("TaxLotId")
                        .HasColumnType("int")
                        .HasColumnName("TaxLotID");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("date");

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    b.Property<decimal?>("Withholding")
                        .HasColumnType("decimal(9,4)");

                    b.HasKey("TransactionId");

                    b.HasIndex(new[] { "AccountId" }, "IX_BrokerTransaction_AccountID");

                    b.HasIndex(new[] { "DepSecurityId" }, "IX_BrokerTransaction_DepSecurityID");

                    b.HasIndex(new[] { "SecurityId" }, "IX_BrokerTransaction_SecurityID");

                    b.HasIndex(new[] { "TaxLotId" }, "IX_BrokerTransaction_TaxLotID");

                    b.HasIndex(new[] { "TransactionCodeId" }, "IX_BrokerTransaction_TransactionCodeID");

                    b.ToTable("BrokerTransaction", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransactionCode", b =>
                {
                    b.Property<int>("TransactionCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionCodeId"), 1L, 1);

                    b.Property<short>("CashEffect")
                        .HasColumnType("smallint");

                    b.Property<short>("ContributionWithdrawalEffect")
                        .HasColumnType("smallint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<short>("QuantityEffect")
                        .HasColumnType("smallint");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength();

                    b.HasKey("TransactionCodeId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_BrokerTransactionCode_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.HasIndex(new[] { "TransactionCode" }, "UNI_BrokerTransactionCode_TransactionCode")
                        .IsUnique()
                        .HasFilter("([TransactionCode] IS NOT NULL)");

                    b.ToTable("BrokerTransactionCode", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransactionCodeAttributeMemberEntry", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(0);

                    b.Property<int>("TransactionCodeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionCodeID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("AttributeMemberId", "TransactionCodeId", "EffectiveDate");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_BrokerTransactionCodeAttributeMemberEntry_AttributeMemberID");

                    b.HasIndex(new[] { "TransactionCodeId" }, "IX_BrokerTransactionCodeAttributeMemberEntry_TransactionCodeID");

                    b.ToTable("BrokerTransactionCodeAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<string>("IsoCode3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength();

                    b.HasKey("CountryId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_Country_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.HasIndex(new[] { "IsoCode3" }, "UNI_Country_IsoCode3")
                        .IsUnique()
                        .HasFilter("([IsoCode3] IS NOT NULL)");

                    b.ToTable("Country", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.CountryAttributeMemberEntry", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(0);

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("AttributeMemberId", "CountryId", "EffectiveDate");

                    b.HasIndex(new[] { "CountryId" }, "IX_CountryAttributeMemberEntry_CountryID");

                    b.ToTable("CountryAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentPerformanceAttributeMemberEntry", b =>
                {
                    b.Property<int>("AccountObjectId")
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID")
                        .HasColumnOrder(0);

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnOrder(2);

                    b.Property<decimal>("AverageCapital")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Gain")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Irr")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("IRR");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("NetContribution")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("AccountObjectId", "AttributeMemberId", "FromDate");

                    b.HasIndex(new[] { "AccountObjectId" }, "IX_InvestmentPerformanceAttributeMemberEntry_AccountObjectID");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_InvestmentPerformanceAttributeMemberEntry_AttributeMemberID");

                    b.ToTable("InvestmentPerformanceAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentPerformanceEntry", b =>
                {
                    b.Property<int>("AccountObjectId")
                        .HasColumnType("int")
                        .HasColumnName("AccountObjectID")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnOrder(1);

                    b.Property<decimal>("AverageCapital")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Gain")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Irr")
                        .HasColumnType("decimal(9,4)")
                        .HasColumnName("IRR");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("NetContribution")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("AccountObjectId", "FromDate");

                    b.HasIndex(new[] { "AccountObjectId" }, "IX_InvestmentPerformanceEntry_AccountObjectID");

                    b.ToTable("InvestmentPerformanceEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentStrategy", b =>
                {
                    b.Property<int>("InvestmentStrategyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvestmentStrategyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvestmentStrategyId"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvestmentStrategyId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_InvestmentStrategy_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.ToTable("InvestmentStrategy", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentStrategyTarget", b =>
                {
                    b.Property<int>("InvestmentStrategyId")
                        .HasColumnType("int")
                        .HasColumnName("InvestmentStrategyID");

                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("InvestmentStrategyId", "AttributeMemberId", "EffectiveDate");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_InvestmentStrategyTarget_AttributeMemberID");

                    b.HasIndex(new[] { "InvestmentStrategyId" }, "IX_InvestmentStrategyTarget_InvestmentStrategyID");

                    b.ToTable("InvestmentStrategyTarget", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketHoliday", b =>
                {
                    b.Property<int>("MarketHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MarketHolidayID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarketHolidayId"), 1L, 1);

                    b.Property<string>("MarketHolidayName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.HasKey("MarketHolidayId");

                    b.HasIndex(new[] { "MarketHolidayName" }, "UNI_MarketHoliday_MarketHolidayName")
                        .IsUnique()
                        .HasFilter("([MarketHolidayName] IS NOT NULL)");

                    b.ToTable("MarketHoliday", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketHolidayObservance", b =>
                {
                    b.Property<int>("MarketHolidayId")
                        .HasColumnType("int")
                        .HasColumnName("MarketHolidayID")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("ObservanceDate")
                        .HasColumnType("date")
                        .HasColumnOrder(1);

                    b.HasKey("MarketHolidayId", "ObservanceDate");

                    b.HasIndex(new[] { "MarketHolidayId" }, "IX_MarketHolidaySchedule_MarketHolidayID");

                    b.ToTable("MarketHolidayObservance", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketIndex", b =>
                {
                    b.Property<int>("IndexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndexID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndexId"), 1L, 1);

                    b.Property<string>("IndexCode")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("IndexDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("IndexId");

                    b.HasIndex(new[] { "IndexCode" }, "UNI_MarketIndex_IndexCode")
                        .IsUnique()
                        .HasFilter("([IndexCode] IS NOT NULL)");

                    b.ToTable("MarketIndex", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketIndexPrice", b =>
                {
                    b.Property<int>("IndexPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IndexPriceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndexPriceId"), 1L, 1);

                    b.Property<int>("MarketIndexId")
                        .HasColumnType("int")
                        .HasColumnName("MarketIndexID");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.Property<string>("PriceCode")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("date");

                    b.HasKey("IndexPriceId");

                    b.HasIndex(new[] { "MarketIndexId" }, "IX_MarketIndexPrice_MarketIndexID");

                    b.HasIndex(new[] { "PriceDate", "MarketIndexId", "PriceCode" }, "UNI_MarketIndexPrice_RowDef")
                        .IsUnique()
                        .HasFilter("([PriceCode] IS NOT NULL)");

                    b.ToTable("MarketIndexPrice", "FinanceApp");

                    b.HasCheckConstraint("CK_MarketIndexPrice_PriceCode", "[PriceCode] IN ('p','t')");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttributeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeId"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("AttributeId");

                    b.HasIndex(new[] { "DisplayName" }, "UNI_ModelAttribute_DisplayName")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.ToTable("ModelAttribute", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttributeMember", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeMemberId"), 1L, 1);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeID");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint");

                    b.HasKey("AttributeMemberId");

                    b.HasIndex(new[] { "AttributeId" }, "IX_ModelAttributeMember_AttributeID");

                    b.HasIndex(new[] { "DisplayName", "AttributeId" }, "UNI_ModelAttributeMember_RowDef")
                        .IsUnique()
                        .HasFilter("([DisplayName] IS NOT NULL)");

                    b.ToTable("ModelAttributeMember", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttributeScope", b =>
                {
                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeID")
                        .HasColumnOrder(0);

                    b.Property<string>("ScopeCode")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("ScopeCode")
                        .HasColumnOrder(1)
                        .IsFixedLength();

                    b.HasKey("AttributeId", "ScopeCode");

                    b.ToTable("ModelAttributeScope", "FinanceApp");

                    b.HasCheckConstraint("CK_ModelAttributeScope_ScopeCode", "[ScopeCode] in ('acc', 'bnk', 'brk', 'cou', 'cus', 'exc', 'sec')");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ReportConfiguration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConfigurationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigurationId"), 1L, 1);

                    b.Property<string>("ConfigurationCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("ConfigurationDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("XmlDefinition")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.HasKey("ConfigurationId")
                        .HasName("PK_ReportSetting");

                    b.HasIndex(new[] { "ConfigurationCode" }, "UNI_ReportConfiguration_ConfigurationCode")
                        .IsUnique()
                        .HasFilter("([ConfigurationCode] IS NOT NULL)");

                    b.ToTable("ReportConfiguration", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ReportStyleSheet", b =>
                {
                    b.Property<int>("StyleSheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StyleSheetID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StyleSheetId"), 1L, 1);

                    b.Property<string>("StyleSheetCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("StyleSheetDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("XmlDefinition")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.HasKey("StyleSheetId");

                    b.HasIndex(new[] { "StyleSheetCode" }, "UNI_ReportStyleSheet_StyleSheetCode")
                        .IsUnique()
                        .HasFilter("([StyleSheetCode] IS NOT NULL)");

                    b.ToTable("ReportStyleSheet", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ResourceImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<byte[]>("ImageBinary")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ImageId");

                    b.ToTable("ResourceImage", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Security", b =>
                {
                    b.Property<int>("SecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityId"), 1L, 1);

                    b.Property<bool>("HasPerpetualMarket")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPerpetualPrice")
                        .HasColumnType("bit");

                    b.Property<string>("Issuer")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("SecurityDescription")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<int?>("SecurityExchangeId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityExchangeID");

                    b.Property<int>("SecurityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeID");

                    b.HasKey("SecurityId");

                    b.HasIndex(new[] { "SecurityExchangeId" }, "IX_Security_SecurityExchangeID");

                    b.HasIndex(new[] { "SecurityTypeId" }, "IX_Security_SecurityTypeID");

                    b.ToTable("Security", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityAttributeMemberEntry", b =>
                {
                    b.Property<int>("AttributeMemberId")
                        .HasColumnType("int")
                        .HasColumnName("AttributeMemberID")
                        .HasColumnOrder(0);

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnOrder(12);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("AttributeMemberId", "SecurityId", "EffectiveDate");

                    b.HasIndex(new[] { "AttributeMemberId" }, "IX_SecurityAttributeMemberEntry_AttributeMemberID");

                    b.HasIndex(new[] { "SecurityId" }, "IX_SecurityAttributeMemberEntry_SecurityID");

                    b.ToTable("SecurityAttributeMemberEntry", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityExchange", b =>
                {
                    b.Property<int>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExchangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExchangeId"), 1L, 1);

                    b.Property<string>("ExchangeCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("ExchangeDescription")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ExchangeId");

                    b.HasIndex(new[] { "ExchangeCode" }, "UNI_SecurityExchange_ExchangeCode")
                        .IsUnique()
                        .HasFilter("([ExchangeCode] IS NOT NULL)");

                    b.ToTable("SecurityExchange", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityPrice", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PriceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceId"), 1L, 1);

                    b.Property<decimal>("PriceClose")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime>("PriceDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("PriceHigh")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal?>("PriceLow")
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal?>("PriceOpen")
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    b.Property<long?>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("PriceId");

                    b.HasIndex(new[] { "SecurityId" }, "IX_SecurityPrice_SecurityID");

                    b.HasIndex(new[] { "PriceDate", "SecurityId" }, "UNI_SecurityPrice_RowDef")
                        .IsUnique();

                    b.ToTable("SecurityPrice", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbol", b =>
                {
                    b.Property<int>("SymbolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SymbolID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymbolId"), 1L, 1);

                    b.Property<string>("Cusip")
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .IsFixedLength();

                    b.Property<string>("CustomSymbol")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<string>("OptionTicker")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("SecurityId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityID");

                    b.Property<string>("SymbolCode")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasComputedColumnSql("(case when [SymbolTypeID]=(-10) then [Cusip] when [SymbolTypeID]=(-20) then [CustomSymbol] when [SymbolTypeID]=(-30) then [OptionTicker] when [SymbolTypeID]=(-40) then [Ticker]  end)", true);

                    b.Property<int>("SymbolTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SymbolTypeID");

                    b.Property<string>("Ticker")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("SymbolId");

                    b.HasIndex(new[] { "SymbolTypeId" }, "IX_SecuritySymbol_SymbolTypeID");

                    b.HasIndex(new[] { "SecurityId", "EffectiveDate" }, "UNI_SecuritySymbol_Column")
                        .IsUnique();

                    b.ToTable("SecuritySymbol", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbolMap", b =>
                {
                    b.Property<int>("SymbolMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SymbolMapID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymbolMapId"), 1L, 1);

                    b.Property<int>("AccountCustodianId")
                        .HasColumnType("int")
                        .HasColumnName("AccountCustodianID");

                    b.Property<string>("CustodianSymbol")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<int>("SecuritySymbolId")
                        .HasColumnType("int")
                        .HasColumnName("SecuritySymbolID");

                    b.HasKey("SymbolMapId");

                    b.HasIndex(new[] { "AccountCustodianId" }, "IX_SecuritySymbolMap_AccountCustodianID");

                    b.HasIndex(new[] { "SecuritySymbolId", "AccountCustodianId" }, "UNI_SecuritySymbolMap_RowDef")
                        .IsUnique();

                    b.ToTable("SecuritySymbolMap", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbolType", b =>
                {
                    b.Property<int>("SymbolTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SymbolTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SymbolTypeId"), 1L, 1);

                    b.Property<string>("SymbolTypeName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("SymbolTypeId");

                    b.HasIndex(new[] { "SymbolTypeName" }, "UNI_SecuritySymbolType_TypeName")
                        .IsUnique()
                        .HasFilter("([SymbolTypeName] IS NOT NULL)");

                    b.ToTable("SecuritySymbolType", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityType", b =>
                {
                    b.Property<int>("SecurityTypeId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeID");

                    b.Property<bool>("CanHaveDerivative")
                        .HasColumnType("bit");

                    b.Property<bool>("CanHavePosition")
                        .HasColumnType("bit");

                    b.Property<bool>("HeldInWallet")
                        .HasColumnType("bit");

                    b.Property<int>("SecurityTypeGroupId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeGroupID");

                    b.Property<string>("SecurityTypeName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<decimal>("ValuationFactor")
                        .HasColumnType("decimal(7,4)");

                    b.HasKey("SecurityTypeId");

                    b.HasIndex(new[] { "SecurityTypeGroupId" }, "IX_SecurityType_SecurityTypeGroupID");

                    b.HasIndex(new[] { "SecurityTypeName" }, "UNI_SecurityType_SecurityTypeName")
                        .IsUnique()
                        .HasFilter("([SecurityTypeName] IS NOT NULL)");

                    b.ToTable("SecurityType", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityTypeGroup", b =>
                {
                    b.Property<int>("SecurityTypeGroupId")
                        .HasColumnType("int")
                        .HasColumnName("SecurityTypeGroupID");

                    b.Property<bool>("DepositSource")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityTypeGroupName")
                        .IsRequired()
                        .HasMaxLength(72)
                        .HasColumnType("nvarchar(72)");

                    b.Property<bool>("Transactable")
                        .HasColumnType("bit");

                    b.HasKey("SecurityTypeGroupId");

                    b.HasIndex(new[] { "SecurityTypeGroupName" }, "UNI_SecurityTypeGroup_SecurityTypeGroupName")
                        .IsUnique()
                        .HasFilter("([SecurityTypeGroupName] IS NOT NULL)");

                    b.ToTable("SecurityTypeGroup", "FinanceApp");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Account", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountCustodian", "AccountCustodian")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountCustodianId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Account_AccountCustodian");

                    b.HasOne("NjordinSight.EntityModel.AccountObject", "AccountNavigation")
                        .WithOne("Account")
                        .HasForeignKey("NjordinSight.EntityModel.Account", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountCustodian");

                    b.Navigation("AccountNavigation");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountObject", "AccountObject")
                        .WithMany("AccountAttributeMemberEntries")
                        .HasForeignKey("AccountObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountAttributeMemberEntry_AccountObjectID");

                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("AccountAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountAttributeMemberEntry_ModelAttributeMember");

                    b.Navigation("AccountObject");

                    b.Navigation("AttributeMember");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountComposite", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountObject", "AccountCompositeNavigation")
                        .WithOne("AccountComposite")
                        .HasForeignKey("NjordinSight.EntityModel.AccountComposite", "AccountCompositeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountComposite_AccountObject");

                    b.Navigation("AccountCompositeNavigation");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountCompositeMember", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountComposite", "AccountComposite")
                        .WithMany("AccountCompositeMembers")
                        .HasForeignKey("AccountCompositeId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountCommpositeMember_AccountComposite");

                    b.HasOne("NjordinSight.EntityModel.Account", "Account")
                        .WithMany("AccountCompositeMembers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountCommpositeMember_Account");

                    b.Navigation("Account");

                    b.Navigation("AccountComposite");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountWallet", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.Account", "Account")
                        .WithMany("AccountWallets")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountWallet_Account");

                    b.HasOne("NjordinSight.EntityModel.Security", "DenominationSecurity")
                        .WithMany("AccountWallets")
                        .HasForeignKey("DenominationSecurityId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountWallet_Security");

                    b.Navigation("Account");

                    b.Navigation("DenominationSecurity");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransaction", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.Account", "Account")
                        .WithMany("BankTransactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_BankTransaction_Account");

                    b.HasOne("NjordinSight.EntityModel.BankTransactionCode", "TransactionCode")
                        .WithMany("BankTransactions")
                        .HasForeignKey("TransactionCodeId")
                        .IsRequired()
                        .HasConstraintName("FK_BankTransaction_BankTransactionCode");

                    b.Navigation("Account");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransactionCodeAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("BankTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankTransactionCodeAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordinSight.EntityModel.BankTransactionCode", "TransactionCode")
                        .WithMany("BankTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("TransactionCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankTransactionCodeAttributeMemberEntry_BankTransactionCode");

                    b.Navigation("AttributeMember");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransaction", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.Account", "Account")
                        .WithMany("BrokerTransactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_Account");

                    b.HasOne("NjordinSight.EntityModel.Security", "DepSecurity")
                        .WithMany("BrokerTransactionDepSecurities")
                        .HasForeignKey("DepSecurityId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_DepSecurityID");

                    b.HasOne("NjordinSight.EntityModel.Security", "Security")
                        .WithMany("BrokerTransactionSecurities")
                        .HasForeignKey("SecurityId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_SecurityID");

                    b.HasOne("NjordinSight.EntityModel.BrokerTransaction", "TaxLot")
                        .WithMany("InverseTaxLot")
                        .HasForeignKey("TaxLotId")
                        .HasConstraintName("FK_BrokerTransaction_BrokerTransaction");

                    b.HasOne("NjordinSight.EntityModel.BrokerTransactionCode", "TransactionCode")
                        .WithMany("BrokerTransactions")
                        .HasForeignKey("TransactionCodeId")
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransaction_BrokerTransactionCode");

                    b.Navigation("Account");

                    b.Navigation("DepSecurity");

                    b.Navigation("Security");

                    b.Navigation("TaxLot");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransactionCodeAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("BrokerTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransactionCodeAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordinSight.EntityModel.BrokerTransactionCode", "TransactionCode")
                        .WithMany("BrokerTransactionCodeAttributeMemberEntries")
                        .HasForeignKey("TransactionCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BrokerTransactionCodeAttributeMemberEntry_BrokerTransactionCode");

                    b.Navigation("AttributeMember");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Country", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMemberNavigation")
                        .WithOne("Country")
                        .HasForeignKey("NjordinSight.EntityModel.Country", "CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Country_ModelAttributeMember");

                    b.Navigation("AttributeMemberNavigation");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.CountryAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("CountryAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CountryAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordinSight.EntityModel.Country", "Country")
                        .WithMany("CountryAttributeMemberEntries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CountryAttributeMemberEntry_Country");

                    b.Navigation("AttributeMember");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentPerformanceAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountObject", "AccountObject")
                        .WithMany("InvestmentPerformanceAttributeMemberEntries")
                        .HasForeignKey("AccountObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentPerformanceAttributeMemberEntry_AccountObject");

                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("InvestmentPerformanceAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentPerformanceAttributeMemberEntry_ModelAttributeMember");

                    b.Navigation("AccountObject");

                    b.Navigation("AttributeMember");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentPerformanceEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountObject", "AccountObject")
                        .WithMany("InvestmentPerformanceEntries")
                        .HasForeignKey("AccountObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentPerformanceEntry_AccountObject");

                    b.Navigation("AccountObject");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentStrategyTarget", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("InvestmentStrategyTargets")
                        .HasForeignKey("AttributeMemberId")
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentStrategyTarget_ModelAttributeMember");

                    b.HasOne("NjordinSight.EntityModel.InvestmentStrategy", "InvestmentStrategy")
                        .WithMany("InvestmentStrategyTargets")
                        .HasForeignKey("InvestmentStrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestmentStrategyTarget_InvestmentStrategy");

                    b.Navigation("AttributeMember");

                    b.Navigation("InvestmentStrategy");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketHolidayObservance", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.MarketHoliday", "MarketHoliday")
                        .WithMany("MarketHolidaySchedules")
                        .HasForeignKey("MarketHolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MarketHolidayObservance_MarketHoliday");

                    b.Navigation("MarketHoliday");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketIndexPrice", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.MarketIndex", "MarketIndex")
                        .WithMany("MarketIndexPrices")
                        .HasForeignKey("MarketIndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MarketIndexPrice_MarketIndex");

                    b.Navigation("MarketIndex");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttributeMember", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttribute", "Attribute")
                        .WithMany("ModelAttributeMembers")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModelAttributeMember_ModelAttribute");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttributeScope", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttribute", "Attribute")
                        .WithMany("ModelAttributeScopes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ModelAttributeScope_ModelAttribute");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Security", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.SecurityExchange", "SecurityExchange")
                        .WithMany("Securities")
                        .HasForeignKey("SecurityExchangeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Security_SecurityExchange");

                    b.HasOne("NjordinSight.EntityModel.SecurityType", "SecurityType")
                        .WithMany("Securities")
                        .HasForeignKey("SecurityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Security_SecurityType");

                    b.Navigation("SecurityExchange");

                    b.Navigation("SecurityType");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityAttributeMemberEntry", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMember")
                        .WithMany("SecurityAttributeMemberEntries")
                        .HasForeignKey("AttributeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecurityAttributeMemberEntry_ModelAttributeMember");

                    b.HasOne("NjordinSight.EntityModel.Security", "Security")
                        .WithMany("SecurityAttributeMemberEntries")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecurityAttributeMemberEntry_Security");

                    b.Navigation("AttributeMember");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityPrice", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.Security", "Security")
                        .WithMany("SecurityPrices")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecurityPrice_Security");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbol", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.Security", "Security")
                        .WithMany("SecuritySymbols")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbol_Security");

                    b.HasOne("NjordinSight.EntityModel.SecuritySymbolType", "SymbolType")
                        .WithMany("SecuritySymbols")
                        .HasForeignKey("SymbolTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbol_SecuritySymbolType");

                    b.Navigation("Security");

                    b.Navigation("SymbolType");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbolMap", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.AccountCustodian", "AccountCustodian")
                        .WithMany("SecuritySymbolMaps")
                        .HasForeignKey("AccountCustodianId")
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbolMap_AccountCustodian");

                    b.HasOne("NjordinSight.EntityModel.SecuritySymbol", "SecuritySymbol")
                        .WithMany("SecuritySymbolMaps")
                        .HasForeignKey("SecuritySymbolId")
                        .IsRequired()
                        .HasConstraintName("FK_SecuritySymbolMap_SecuritySymbol");

                    b.Navigation("AccountCustodian");

                    b.Navigation("SecuritySymbol");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityType", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.SecurityTypeGroup", "SecurityTypeGroup")
                        .WithMany("SecurityTypes")
                        .HasForeignKey("SecurityTypeGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_SecurityType_SecurityTypeGroup");

                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMemberNavigation")
                        .WithOne("SecurityType")
                        .HasForeignKey("NjordinSight.EntityModel.SecurityType", "SecurityTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SecurityType_ModelAttributeMember");

                    b.Navigation("AttributeMemberNavigation");

                    b.Navigation("SecurityTypeGroup");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityTypeGroup", b =>
                {
                    b.HasOne("NjordinSight.EntityModel.ModelAttributeMember", "AttributeMemberNavigation")
                        .WithOne("SecurityTypeGroup")
                        .HasForeignKey("NjordinSight.EntityModel.SecurityTypeGroup", "SecurityTypeGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_SecurityTypeGroup_ModelAttributeMember");

                    b.Navigation("AttributeMemberNavigation");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Account", b =>
                {
                    b.Navigation("AccountCompositeMembers");

                    b.Navigation("AccountWallets");

                    b.Navigation("BankTransactions");

                    b.Navigation("BrokerTransactions");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountComposite", b =>
                {
                    b.Navigation("AccountCompositeMembers");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountCustodian", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("SecuritySymbolMaps");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.AccountObject", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("AccountAttributeMemberEntries");

                    b.Navigation("AccountComposite");

                    b.Navigation("InvestmentPerformanceAttributeMemberEntries");

                    b.Navigation("InvestmentPerformanceEntries");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BankTransactionCode", b =>
                {
                    b.Navigation("BankTransactionCodeAttributeMemberEntries");

                    b.Navigation("BankTransactions");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransaction", b =>
                {
                    b.Navigation("InverseTaxLot");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.BrokerTransactionCode", b =>
                {
                    b.Navigation("BrokerTransactionCodeAttributeMemberEntries");

                    b.Navigation("BrokerTransactions");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Country", b =>
                {
                    b.Navigation("CountryAttributeMemberEntries");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.InvestmentStrategy", b =>
                {
                    b.Navigation("InvestmentStrategyTargets");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketHoliday", b =>
                {
                    b.Navigation("MarketHolidaySchedules");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.MarketIndex", b =>
                {
                    b.Navigation("MarketIndexPrices");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttribute", b =>
                {
                    b.Navigation("ModelAttributeMembers");

                    b.Navigation("ModelAttributeScopes");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.ModelAttributeMember", b =>
                {
                    b.Navigation("AccountAttributeMemberEntries");

                    b.Navigation("BankTransactionCodeAttributeMemberEntries");

                    b.Navigation("BrokerTransactionCodeAttributeMemberEntries");

                    b.Navigation("Country");

                    b.Navigation("CountryAttributeMemberEntries");

                    b.Navigation("InvestmentPerformanceAttributeMemberEntries");

                    b.Navigation("InvestmentStrategyTargets");

                    b.Navigation("SecurityAttributeMemberEntries");

                    b.Navigation("SecurityType");

                    b.Navigation("SecurityTypeGroup");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.Security", b =>
                {
                    b.Navigation("AccountWallets");

                    b.Navigation("BrokerTransactionDepSecurities");

                    b.Navigation("BrokerTransactionSecurities");

                    b.Navigation("SecurityAttributeMemberEntries");

                    b.Navigation("SecurityPrices");

                    b.Navigation("SecuritySymbols");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityExchange", b =>
                {
                    b.Navigation("Securities");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbol", b =>
                {
                    b.Navigation("SecuritySymbolMaps");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecuritySymbolType", b =>
                {
                    b.Navigation("SecuritySymbols");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityType", b =>
                {
                    b.Navigation("Securities");
                });

            modelBuilder.Entity("NjordinSight.EntityModel.SecurityTypeGroup", b =>
                {
                    b.Navigation("SecurityTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
