<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Caption_Button_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Caption_Button_Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Caption_Button_Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Caption_Button_Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Caption_CreateNew" xml:space="preserve">
    <value>New {0}</value>
    <comment>{0} is text indicating the type of object to be create, e.g., account</comment>
  </data>
  <data name="Caption_DeleteMany" xml:space="preserve">
    <value>Delete {0}</value>
    <comment>{0} is text indicating the type to delete, e.g., accounts</comment>
  </data>
  <data name="Caption_DeleteSingle" xml:space="preserve">
    <value>Delete {0}</value>
    <comment>{0} is text indicating the type/record to delete, e.g., account or account 1234</comment>
  </data>
  <data name="Caption_DevelopmentPlaceholder" xml:space="preserve">
    <value>Page/component is not available at this time. Please try again later or report this message to the project maintainer.</value>
    <comment>Placeholder for development when text will be present, but not available at the time the page component is being built. There should be no references to this resource in production builds.</comment>
  </data>
  <data name="Caption_EditMany" xml:space="preserve">
    <value>Edit {0}</value>
    <comment>{0} is text indicating the type to edit, e.g., accounts</comment>
  </data>
  <data name="Caption_EditSingle" xml:space="preserve">
    <value>Edit {0}</value>
    <comment>{0} is text indicating the type/record to edit, e.g., account or account 1234</comment>
  </data>
  <data name="Caption_InputSelect_Prompt" xml:space="preserve">
    <value>&lt;select&gt;</value>
  </data>
  <data name="Caption_InputSelect_SearchField" xml:space="preserve">
    <value>Search for:</value>
  </data>
  <data name="Caption_NavigateBack" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Caption_NavigateBackTo" xml:space="preserve">
    <value>Return to {0}</value>
    <comment>{0} is the description of the destination</comment>
  </data>
  <data name="Caption_NoContent" xml:space="preserve">
    <value>(No content)</value>
  </data>
  <data name="Caption_SaveMany" xml:space="preserve">
    <value>Save {0}</value>
  </data>
  <data name="Caption_SaveSingle" xml:space="preserve">
    <value>Save {0}</value>
  </data>
  <data name="Caption_ViewMany" xml:space="preserve">
    <value>View {0}</value>
    <comment>{0} is text indicating the type to view, e.g., accounts</comment>
  </data>
  <data name="Caption_ViewSingle" xml:space="preserve">
    <value>View {0}</value>
    <comment>{0} is text indicating the type/record to view, e.g., account or account 1234</comment>
  </data>
  <data name="DialogResult_Abort" xml:space="preserve">
    <value>Abort</value>
    <comment>Indicates the user wishes to abort an in-progress action.</comment>
  </data>
  <data name="DialogResult_Cancel" xml:space="preserve">
    <value>Cancel</value>
    <comment>Indicates the user wishes to cancel an action.</comment>
  </data>
  <data name="DialogResult_Continue" xml:space="preserve">
    <value>Continue</value>
    <comment>Indicates the user wishes to continue given additional information.</comment>
  </data>
  <data name="DialogResult_Delete" xml:space="preserve">
    <value>Delete</value>
    <comment>Indicates the user has affirmatively responded to delete a record, file, or other object.</comment>
  </data>
  <data name="DialogResult_Ignore" xml:space="preserve">
    <value>Ignore</value>
    <comment>Indicates the user wishes to ignore warnings or failures.</comment>
  </data>
  <data name="DialogResult_No" xml:space="preserve">
    <value>No</value>
    <comment>Indicates the user has negatively responded to a question.</comment>
  </data>
  <data name="DialogResult_None" xml:space="preserve">
    <value>None</value>
    <comment>Indicates no user response was provided or prompted.</comment>
  </data>
  <data name="DialogResult_OK" xml:space="preserve">
    <value>OK</value>
    <comment>Indicates the user has affirmed.</comment>
  </data>
  <data name="DialogResult_Retry" xml:space="preserve">
    <value>Retry</value>
    <comment>Indicates the user wishes to retry a failed action.</comment>
  </data>
  <data name="DialogResult_TryAgain" xml:space="preserve">
    <value>Try again</value>
    <comment>Indicates the user wishes to try an action again.</comment>
  </data>
  <data name="DialogResult_Yes" xml:space="preserve">
    <value>Yes</value>
    <comment>Indicates the user has affirmatively responded to a question.</comment>
  </data>
</root>