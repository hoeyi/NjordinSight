@typeparam T

@inherits LocalizableComponent

<div class="custom-modal @IsShownClassAttribute">
    @if(IsLoading)
    {
    }
    else
    {
        <div class="custom-modal-body">
            <PageSection AdditionalClassAttributes="@(new string[]{"custom-modal-content"})">
                @ChildContent
            </PageSection>
            <ActionButtonMenu>
                @foreach(var dialogOption in _dialogResultButtons)
                {
                    <button 
                        type="button" 
                        class="form-control button"
                        @onclick="() => OnClick.InvokeAsync(dialogOption)"
                        @onclick:preventDefault >
                        @(NameFor<DialogResult>($"{dialogOption}"))
                    </button>
                }
            </ActionButtonMenu>
        </div>
    }
</div>

@code {
    ///// <summary>
    ///// Gets or sets the event handler for the click event of this form.
    ///// </summary>
    [Parameter]
    public EventCallback<DialogResult> OnClick { get; set; }

    /// <summary>
    /// Gets or sets the child content to render for this form.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    /// <summary>
    /// Gets or sets the supported dialog options for this form.
    /// </summary>
    /// <remarks>
    /// Default options are <see cref="DialogResult.OK" /> and <see cref="DialogResult.Cancel" />.
    /// </remarks>
    [Parameter]
    public DialogResult DialogOptions { get; set; } = DialogResult.OK | DialogResult.Cancel;

    private IEnumerable<DialogResult> _dialogResultButtons;

    private string IsShownClassAttribute { get; set; } = VisibleClass;

    private const string VisibleClass = "visible";
    private const string HiddenClass = "hidden";

    protected void ChangeVisibility(bool visible)
    {
        IsShownClassAttribute = visible ? VisibleClass : HiddenClass;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var flagsQuery = Enum.GetValues(typeof(DialogResult))
            .OfType<DialogResult>()
            .Where(v => v != DialogResult.None && DialogOptions.HasFlag(v));

        _dialogResultButtons = flagsQuery.ToList();

        IsLoading = _dialogResultButtons is null || ChildContent is null;
    }
}
