@typeparam TModel
@attribute [CascadingTypeParameter(nameof(TModel))]

@inherits ComponentBase
@inject IModelMetadataService ModelMetadata

<ThemedComponent>
    <CascadingValue IsFixed=true Value=this>
        <CascadingValue IsFixed=true Value="@EditContext">

            @ChildContent

            <table class="datagrid" @attributes="TableAttributes">
                <thead>
                    <tr class="datagrid-header-row">
                        @foreach (var column in Columns.Where(c => c.Visible).OrderBy(c => c.Index))
                        {
                            <th @attributes="column.ColumnAttributes">
                                @(column.Caption ?? column.Property)
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var model in Data)
                    {
                        <DataGridRow Model="@model" />
                    }
                </tbody>
            </table>
        </CascadingValue>
    </CascadingValue>
</ThemedComponent>



@code {
    /// <summary>
    /// Gets or sets the edit context for this cell.
    /// </summary>
    [CascadingParameter]
    public EditContext EditContext { get; set; } = default!;

    /// <summary>
    /// Gets or sets the attributes to apply to the underlying <table> element.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> TableAttributes { get; set; } = default!;

    /// <summary>
    /// Gets or sets the child content for this grid. Column defintions must be provided here.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    /// <summary>
    /// Gets or sets the enumerable collection of <typeparamref name="TModel"/> for this grid.
    /// </summary>
    [Parameter]
    public IEnumerable<TModel> Data { get; set; } = default!;

    /// <summary>
    /// Gets the list of <see cref="DataGridColumn{TModel}"/> objects in this grid.
    /// </summary>
    public IList<DataGridColumn<TModel>> Columns { get; init; } = new List<DataGridColumn<TModel>>();

    /// <summary>
    /// Adds the given column to the data grid collection.
    /// </summary>
    /// <param name="gridColumn">The <see cref="DataGridColumn{TModel}"/> to add.</param>
    /// <exception cref="ArgumentNullException"><param name="gridColumn"/> was null.</exception>
    internal void AddColumn(DataGridColumn<TModel> gridColumn)
    {
        if (gridColumn is null)
            throw new ArgumentNullException(paramName: nameof(gridColumn));

        if (!Columns.Contains(gridColumn))
        {
            gridColumn.Index = Columns.Count + 1;
            Columns.Add(gridColumn);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // The first render will instantiate the GridColumn defined in the ChildContent.
            // GridColumn calls AddColumn during its initialization. This means that until
            // the first render is completed, the columns collection is empty.
            // Calling StateHasChanged() will re-render the component, so the second time it will know the columns
            StateHasChanged();
        }
    }

}