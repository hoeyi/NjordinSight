@using System.Text
<li class="@GetItemClass()">
    @if (string.IsNullOrEmpty(MenuItem.UriStem) && OnHyperlinkClickOverride is null)
    {
        <div class="grid-container">
            <div class="icon left">
                <IonIcon Name="@MenuItem.IconKey" />
            </div>
            @if(!string.IsNullOrEmpty(MenuItem.Caption))
            {
                <div class="caption left">
                    @MenuItem.Caption
                </div>
            }

            @if (!MenuItem.IsRoot && MenuItem.HasChildren)
            {
                <div class="icon right">
                    <IonIcon Name="caret-forward" class="caret-forward" />
                </div>
            }
        </div>
    }
    else
    {
        @if(OnHyperlinkClickOverride is null)
        {
            <a class="grid-container custom-nav-link" href="@MenuItem.UriStem">
                <div class="icon left">
                    <IonIcon Name="@MenuItem.IconKey" />
                </div>
                <div class="caption">
                    @MenuItem.Caption
                </div>
                @if (!MenuItem.IsRoot && MenuItem.HasChildren)
                {
                    <div class="icon right">
                        <IonIcon Name="caret-forward" class="caret-forward" />
                    </div>
                }
            </a>
        }
        else
        {
            <div class="grid-container custom-nav-link" style="cursor: pointer;"
                @onclick="(async (args) => await OnHyperlinkClickOverride.Value.InvokeAsync(args))">
                <div class="icon left">
                    <IonIcon Name="@MenuItem.IconKey" />
                </div>
                <div class="caption">
                    @MenuItem.Caption
                </div>
                @if (!MenuItem.IsRoot && MenuItem.HasChildren)
                {
                    <div class="icon right">
                        <IonIcon Name="caret-forward" class="caret-forward" />
                    </div>
                }
            </div>
        }
    }
    @if (MenuItem.HasChildren)
    {
        <ul class="@GetChildMenuClass()">
            @foreach (var child in MenuItem.Children)
            {
                <MenuStripItem MenuItem=@child.Value />
            }
        </ul>
    }
</li>

@code {
    /// <summary>
    /// Gets or sets the object defining the content of this menu item.
    /// </summary>
    [Parameter, EditorRequired]
    public MenuItem MenuItem { get; set; }

    /// <summary>
    /// Gets or sets the delegate overriding the link behavior for this menu item.
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs>? OnHyperlinkClickOverride { get; set; }

    private const string MenuLevelRoot = "level-0";
    private const string MenuLevelChild = "level-n";
    private const string MenuItemClass = "menu-item";

    private string GetChildMenuClass() =>
        $"sub-menu {(MenuItem.IsRoot ? MenuLevelRoot : MenuLevelChild)}";

    private string GetItemClass()
    {
        StringBuilder sb = new();
        sb.Append(MenuItemClass);

        if (MenuItem.HasChildren)
            sb.Append(" parent");

        if (MenuItem.IsRoot)
        {
            sb.Append(" root-node");
        }

        if(!string.IsNullOrEmpty(MenuItem?.IconKey))
            sb.Append(" has-icon-key");

        return string.Join(" ", sb);
    }
}