@inherits ModelCRUD<AccountViewModel>

@if (ViewModel is null || AccountCustodians is null)
{
    <LoadingSvg />
}
else
{   
    <ModelForm TModel="AccountViewModel">
        @*AccountObject inputs*@
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.AccountObjectCode)"
            ValidationMessageDelegate="@(() => ViewModel.AccountObjectCode)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.AccountObjectCode
                </div>
            }
            else
            {
                <InputText class="form-control" @bind-Value=ViewModel.AccountObjectCode
                    disable="@Disabled"
                    DisplayName=@(NameFor(nameof(AccountViewModel.AccountObjectCode))) />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.DisplayName)"
            ValidationMessageDelegate="@(() => ViewModel.DisplayName)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.DisplayName
                </div>
            }
            else
            {
                <InputText class="form-control" @bind-Value=ViewModel.DisplayName
                    disable="@Disabled"
                    DisplayName=@(NameFor(nameof(AccountViewModel.DisplayName))) />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.Description)"
            ValidationMessageDelegate="@(() => ViewModel.Description)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.Description
                </div>
            }
            else
            {
                <InputText class="form-control" @bind-Value=ViewModel.Description
                    disable="@Disabled"
                    DisplayName=@(NameFor(nameof(AccountViewModel.Description))) />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.StartDate)"
            ValidationMessageDelegate="@(() => ViewModel.StartDate)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.StartDate.ToShortDateString()
                </div>
            }
            else
            {
                <InputDate class="form-control" @bind-Value=ViewModel.StartDate disable="@Disabled" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.CloseDate)"
            ValidationMessageDelegate="@(() => ViewModel.CloseDate)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.CloseDate?.ToShortDateString()
                </div>
            }
            else
            {
                <InputDate class="form-control" @bind-Value=ViewModel.CloseDate disable="@Disabled" />
            }
        </ModelFormLineItem>

        @*Account inputs*@
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.AccountNumber)" 
            ValidationMessageDelegate="@(() => ViewModel.AccountNumber)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.AccountNumber
                </div>
            }
            else
            {
                <InputText class="form-control" @bind-Value=ViewModel.AccountNumber
                        disable="@Disabled" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.AccountCustodianId)"
            ValidationMessageDelegate="@(() => ViewModel.AccountCustodianId)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @CustodianDisplayName(ViewModel.AccountCustodianId)
                </div>
            }
            else
            {
                <InputSelect id="account-custodian" class="form-control"
                    DisplayName="Model.AccountCustodian.CustodianCode"
                    @bind-Value="ViewModel.AccountCustodianId"
                    disabled="@Disabled">
                    @foreach (var custodian in AccountCustodians)
                    {
                    <option value=@custodian.Key>@custodian.Display</option>
                    }
                </InputSelect>
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.BooksClosedDate)"
            ValidationMessageDelegate="@(() => ViewModel.BooksClosedDate)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.BooksClosedDate?.ToShortDateString()
                </div>
            }
            else
            {
                <InputDate class="form-control" @bind-Value=ViewModel.BooksClosedDate
                        disabled="@Disabled" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.IsComplianceTradable)"
            ValidationMessageDelegate="@(() => ViewModel.IsComplianceTradable)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.IsComplianceTradable
                </div>
            }
            else
            {
                <InputCheckbox @bind-Value=ViewModel.IsComplianceTradable disabled="@Disabled" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.HasWallet)"
            ValidationMessageDelegate="@(() => ViewModel.HasWallet)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.HasWallet
                </div>
            }
            else
            {
                <InputCheckbox @bind-Value=ViewModel.HasWallet disabled="@Disabled" />
                <ValidationMessage For="@(() => ViewModel.HasWallet)" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.HasBankTransaction)"
            ValidationMessageDelegate="@(() => ViewModel.HasBankTransaction)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.HasBankTransaction
                </div>
            }
            else
            {
                <InputCheckbox @bind-Value=ViewModel.HasBankTransaction disabled="@Disabled" />
                <ValidationMessage For="@(() => ViewModel.HasBankTransaction)" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.HasBrokerTransaction)"
            ValidationMessageDelegate="@(() => ViewModel.HasBrokerTransaction)">
            @if (ReadOnly)
            {
                <div class="form-control">
                    @ViewModel.HasBrokerTransaction
                </div>
            }
            else
            {
                <InputCheckbox @bind-Value=ViewModel.HasBrokerTransaction disabled="@Disabled" />
            }
        </ModelFormLineItem>
    </ModelForm>
}
@code {
    [Parameter]
    public IEnumerable<LookupModel> AccountCustodians { get; set; }

    private string? CustodianDisplayName(int? custodianId)
    {
        return AccountCustodians.FirstOrDefault(a => a.Key == custodianId)?.Display;
    }
}
