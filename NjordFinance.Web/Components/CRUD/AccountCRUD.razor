@inherits ModelCRUD<AccountViewModel>

@if (Model is null || AccountCustodians is null)
{
    <LoadingSvg />
}
else
{
    <ModelForm TModel="AccountViewModel">
        @*AccountObject inputs*@
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.AccountObjectCode)"
            ValidationMessageDelegate="@(() => Model.AccountObjectCode)">
            @if (ReadOnly)
            {
                @Model.AccountObjectCode
            }
            else
            {
                <InputText class="form-control" @bind-Value=Model.AccountObjectCode
                    disable="@Disabled"
                    DisplayName=@(NameFor(nameof(AccountViewModel.AccountObjectCode))) />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.DisplayName)"
            ValidationMessageDelegate="@(() => Model.DisplayName)">
            @if (ReadOnly)
            {
                @Model.DisplayName
            }
            else
            {
                <InputText class="form-control" @bind-Value=Model.DisplayName
                    disable="@Disabled"
                    DisplayName=@(NameFor(nameof(AccountViewModel.DisplayName))) />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.Description)"
            ValidationMessageDelegate="@(() => Model.Description)">
            @if (ReadOnly)
            {
                @Model.Description
            }
            else
            {
                <InputText class="form-control" @bind-Value=Model.Description
                    disable="@Disabled"
                    DisplayName=@(NameFor(nameof(AccountViewModel.Description))) />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.StartDate)"
            ValidationMessageDelegate="@(() => Model.StartDate)">
            @if (ReadOnly)
            {
                @Model.StartDate.ToShortDateString()
            }
            else
            {
                <InputDate class="form-control" @bind-Value=Model.StartDate disable="@Disabled" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.CloseDate)"
            ValidationMessageDelegate="@(() => Model.CloseDate)">
            @if (ReadOnly)
            {
                @Model.CloseDate?.ToShortDateString()
            }
            else
            {
                <InputDate class="form-control" @bind-Value=Model.CloseDate disable="@Disabled" />
            }
        </ModelFormLineItem>

        @*Account inputs*@
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.AccountNumber)" 
            ValidationMessageDelegate="@(() => Model.AccountNumber)">
            @if (ReadOnly)
            {
                @Model.AccountNumber
            }
            else
            {
                <InputText class="form-control" @bind-Value=Model.AccountNumber
                        disable="@Disabled" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.AccountCustodianId)"
            ValidationMessageDelegate="@(() => Model.AccountCustodianId)">
            @if (ReadOnly)
            {
                @Model.AccountCustodian?.DisplayName
            }
            else
            {
                <InputSelect id="account-custodian" class="form-control"
                    DisplayName="Model.AccountCustodian.CustodianCode"
                    @bind-Value="Model.AccountCustodianId"
                    disabled="@Disabled">
                    @foreach (var custodian in AccountCustodians)
                    {
                    <option value=@custodian.Key>@custodian.Display</option>
                    }
                </InputSelect>
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.BooksClosedDate)"
            ValidationMessageDelegate="@(() => Model.BooksClosedDate)">
            @if (ReadOnly)
            {
                @Model.BooksClosedDate?.ToShortDateString()
            }
            else
            {
                <InputDate class="form-control" @bind-Value=Model.BooksClosedDate
                        disabled="@Disabled" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.IsComplianceTradable)"
            ValidationMessageDelegate="@(() => Model.IsComplianceTradable)">
            @if (ReadOnly)
            {
                @Model.IsComplianceTradable
            }
            else
            {
                <InputCheckbox @bind-Value=Model.IsComplianceTradable disabled="@Disabled" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.HasWallet)"
            ValidationMessageDelegate="@(() => Model.HasWallet)">
            @if (ReadOnly)
            {
                @Model.HasWallet
            }
            else
            {
                <InputCheckbox @bind-Value=Model.HasWallet disabled="@Disabled" />
                <ValidationMessage For="@(() => Model.HasWallet)" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.HasBankTransaction)"
            ValidationMessageDelegate="@(() => Model.HasBankTransaction)">
            @if (ReadOnly)
            {
                @Model.HasBankTransaction
            }
            else
            {
                <InputCheckbox @bind-Value=Model.HasBankTransaction disabled="@Disabled" />
                <ValidationMessage For="@(() => Model.HasBankTransaction)" />
            }
        </ModelFormLineItem>
        <ModelFormLineItem MemberName="@nameof(AccountViewModel.HasBrokerTransaction)"
            ValidationMessageDelegate="@(() => Model.HasBrokerTransaction)">
            @if (ReadOnly)
            {
                @Model.HasBrokerTransaction
            }
            else
            {
                <InputCheckbox @bind-Value=Model.HasBrokerTransaction disabled="@Disabled" />
            }
        </ModelFormLineItem>
    </ModelForm>
}
@code {
    [Parameter]
    public IEnumerable<LookupModel> AccountCustodians { get; set; }
}
