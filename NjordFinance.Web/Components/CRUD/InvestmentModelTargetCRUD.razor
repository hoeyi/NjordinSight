@inherits ModelCRUD<InvestmentModelTargetViewModel>

@if(Model is null)
{
    <LoadingSvg />
}
else
{
    <div class="section-header">
        <h4 class="title">@Model.ParentAttribute.DisplayName</h4>
        <h6 class="sub-title">(@Model.EffectiveDate.ToShortDateString())</h6>
    </div>
    <DataGrid Data="@Model.MemberEntries">
        <ValidationMessage For=@(() => Model.SumOfMemberWeights) />
        <DataGridColumn 
            Property=@nameof(InvestmentStrategyTarget.AttributeMemberId)
            Caption=@(NameFor<InvestmentStrategyTarget>(nameof(InvestmentStrategyTarget.AttributeMemberId)))>
                <CellTemplate Context="model">
                    @model.AttributeMember.DisplayName
                </CellTemplate>
        </DataGridColumn>
        <DataGridColumn 
            Property=@nameof(InvestmentStrategyTarget.Weight)
            Caption=@(NameFor<InvestmentStrategyTarget>(nameof(InvestmentStrategyTarget.Weight)))>
                <CellTemplate Context="model">
                    @model.Weight
                </CellTemplate>
        </DataGridColumn>
    </DataGrid>

@*    <CellEditTemplate Context="model">
        <InputSelect class="form-control" @bind-Value=model.AttributeMember. />
    </CellEditTemplate>
    <CellEditTemplate Context="model">
        <InputNumber class="form-control" @bind-Value=model.Weight />
    </CellEditTemplate>*@
}

@code{
    [Parameter]
    public IEnumerable<LookupModel> AttributeMemberLookup { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsLoading = !ReadOnly || AttributeMemberLookup is null;
    }
}