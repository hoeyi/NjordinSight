@using System.ComponentModel.DataAnnotations;
@inherits LocalizableComponent

@if(IsLoading)
{
    <LoadingSvg />
}
else
{
    <ContentTile>
        <TitleAlignLeft>
            @Caption
        </TitleAlignLeft>
        <TitleAlignRight>
            <label>
                @(ModelMetadata.NameFor<BrokerTransaction>(x => x.Quantity))
            </label>
            <div class="form-control">
                @(string.Format("{0:0.######}", InstructionTable.Transaction.Quantity))
            </div>
            <label>
                @(ModelMetadata.NameFor<AllocationInstructionTable>(x => x.RemainingTransactionQuantity))
            </label>
            <div class="form-control">
                @(string.Format("{0:0.######}", InstructionTable.RemainingTransactionQuantity))
            </div>
        </TitleAlignRight>
        <Body>
            <EditForm wdith="100%" Model="@InstructionTable">
                <DataAnnotationsValidator />
                <ValidationMessage For="@(() => InstructionTable.RemainingTransactionQuantity)" />
                <DataGrid Data="@InstructionTable.Instructions">
                    <DataGridColumn
                        Type="DataGridCellType.Control"
                        Property="@nameof(AllocationInstruction.ClosingQuantity)"
                        Caption="@(ModelMetadata.NameFor<AllocationInstruction>(x => x.ClosingQuantity))">
                        <CellEditTemplate Context="model">
                            <InputNumber class="form-control" @bind-Value="model.ClosingQuantity" />
                        </CellEditTemplate>
                    </DataGridColumn>
                    <DataGridColumn 
                        Type="DataGridCellType.Control"
                        Property="@nameof(BrokerTaxLot.AcquisitionDate)"
                        Caption="@(ModelMetadata.NameFor<BrokerTaxLot>(x => x.AcquisitionDate))">
                        <CellTemplate Context="model">
                            <div class="form-control">
                                @model.TaxLot.AcquisitionDate.ToShortDateString()
                            </div>
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn 
                        Type="DataGridCellType.Control"
                        Property="@nameof(BrokerTaxLot.UnclosedQuantity)"
                        Caption="@(ModelMetadata.NameFor<BrokerTaxLot>(x => x.UnclosedQuantity))">
                        <CellTemplate Context="model">
                            <div class="form-control">
                                @model.TaxLot.UnclosedQuantity
                            </div>
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn 
                        Type="DataGridCellType.Control"
                        Property="@nameof(BrokerTaxLot.UnitCostBasis)"
                        Caption="@(ModelMetadata.NameFor<BrokerTaxLot>(x => x.UnitCostBasis))">
                        <CellTemplate Context="model">
                            <div class="form-control">
                                @model.TaxLot.UnitCostBasis
                            </div>
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            </EditForm>
        </Body>
    </ContentTile>
}

@code {
    /// <summary>
    /// The <see cref="AllocationInstructionTable" /> to hold the user input.
    /// </summary>
    [CascadingParameter]
    public AllocationInstructionTable InstructionTable { get; set; }

    private string Caption { get; set; }
    ///// <summary>
    ///// The delegate handler for processing a valid form submission.
    ///// </summary>
    //[Parameter, EditorRequired]
    //public EventCallback<ModalEventArgs<AllocationInstructionTable>> OnFormSubmission { get; set; }

    protected override void OnInitialized()
    {
        Caption = ModelMetadata
            .GetAttribute<AllocationInstructionTable, DisplayAttribute>()?.GetName() 
            ?? nameof(AllocationInstructionTable);
        
        IsLoading = InstructionTable is null;
    }
}