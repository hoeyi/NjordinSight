@typeparam TViewModel
@attribute [CascadingTypeParameter(nameof(TViewModel))]

@inherits LocalizableComponent

@code {
    /// <summary>
    /// Gets or sets the <see cref="TViewModel"/> for this component.
    /// </summary>
    [CascadingParameter]
    public TViewModel ViewModel { get; set; } = default!;

    /// <summary>
    /// Gets or sets whether the component is disabled.
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Gets or sets whether the component is rendered as readonly.
    /// </summary>
    [Parameter]
    public bool ReadOnly { get; set; } = true;

    /// <summary>
    /// Gets the description of the <typeparamref name="TViewModel" /> member.
    /// </summary>
    /// <param name="memberName">The member name.</param>
    /// <returns>A <see cref="string"/> representing the display text for the
    /// <typeparamref name="TViewModel"/> member, if defined, else null.</returns>
    public string DescriptionFor(string memberName) => DescriptionFor<TViewModel>(memberName);

    /// <summary>
    /// Gets the description for the <typeparamref name="TViewModel" /> member matching the 
    /// given expression.
    /// </summary>
    /// <param name="expression">The path to the member to retrieve display text for.</param>
    /// <returns>A <see cref="string"/> representing the display text for the
    /// <typeparamref name="TViewModel"/> member, if defined, else null.</returns>
    public string? DescriptionFor(Expression<Func<TViewModel, object>> expression) =>
        ModelMetadata.DescriptionFor(expression);

    /// <summary>
    /// Gets the display name for the <typeparamref name="T" /> member matching the 
    /// given expression.
    /// </summary>
    /// <param name="expression">The path to the member to retrieve display text for.</param>
    /// <returns>A <see cref="string"/> representing the display text for the
    /// <typeparamref name="T"/> member, if defined, else null.</returns>
    public string? DescriptionFor<T>(Expression<Func<T, object>> expression) =>
        ModelMetadata.DescriptionFor(expression);

    /// <summary>
    /// Gets the display name of the <typeparamref name="TViewModel" /> member.
    /// </summary>
    /// <param name="memberName">The member name.</param>
    /// <returns></returns>
    public string NameFor(string memberName) => NameFor<TViewModel>(memberName);

    /// <summary>
    /// Gets the display name for the <typeparamref name="TViewModel" /> member matching the 
    /// given expression.
    /// </summary>
    /// <param name="expression">The path to the member to retrieve display text for.</param>
    /// <remarks>
    /// <see cref="object" /> destination of the given expression must be a direct member of
    /// <typeparamref name="TViewModel" />.
    /// </remarks>
    /// <returns>A <see cref="string"/> representing the display name, if defined, else
    /// the member name.</returns>
    public string NameFor(Expression<Func<TViewModel, object>> expression) => 
        NameFor<TViewModel>(expression);

    /// <summary>
    /// Gets the display name for the <typeparamref name="T" /> member matching the given expression.
    /// </summary>
    /// <param name="expression">The path to the member to retrieve display text for.</param>
    /// <remarks>
    /// <see cref="object" /> destination of the given expression must be a direct member of 
    /// <typeparamref name="T" />.
    /// </remarks>
    /// <returns>A <see cref="string"/> representing the display name, if defined, else 
    /// the member name.</returns>
    public string NameFor<T>(Expression<Func<T, object>> expression) => 
        ModelMetadata.NameFor(expression);
}
    