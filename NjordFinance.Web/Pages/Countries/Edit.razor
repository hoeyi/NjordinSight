@page "/countries/edit"

@inherits ModelPage<Country>

@inject IBatchController<Country> Controller

<ThemedComponent>
    <PageTitle>@(PageTitle.UpdateMany(string.Empty).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader Header="@(PageTitle.UpdateMany(string.Empty))" />

    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="error-text">@ErrorMessage</div>
                }
                <EditForm width="100%" EditContext="@_context">
                    <ActionButtonMenu>
                        <button class="form-control button"
                            @onclick="@(async (args) => await Submit_OnClick(context, args))">
                            @Resources.Strings.Caption_Button_Save
                        </button>
                        <button class="form-control button"
                            @onclick="(async (args) => await AddNewAsync(args))">
                            @Resources.Strings.Caption_Button_Add.Format(
                        ModelMetadata.NounFor(typeof(Country))?.GetSingular())
                        </button>
                        <button class="form-control button" @onclick="Cancel_OnClick"
                            @onclick:preventDefault>
                            @Resources.Strings.Caption_Button_Cancel
                        </button>
                    </ActionButtonMenu>
                    <DataAnnotationsValidator />
                    <DataGrid Data="@Countries">
                        <DataGridColumn Property=@nameof(Country.DisplayName)
                                    Caption=@(NameFor(nameof(Country.DisplayName)))>
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value="model.DisplayName" />
                                <ValidationMessage For=@(()=> model.DisplayName) />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property=@nameof(Country.IsoCode3)
                                    Caption=@(NameFor(nameof(Country.IsoCode3)))>
                            <CellEditTemplate Context="model">
                                <InputText class="form-control" @bind-Value="model.IsoCode3" />
                                <ValidationMessage For=@(()=> model.IsoCode3) />
                            </CellEditTemplate>
                        </DataGridColumn>
                        <DataGridColumn Type="DataGridCellType.Button">
                            <CellEditTemplate Context="model">
                                <ToolTip Text="@Resources.Strings.Caption_Button_Delete">
                                    <button class="form-control button icon"
                                        type="button"
                                        @onclick="async (args) => await DeleteAsync(args, model)">
                                        <IonIcon Name="close-circle" />
                                    </button>
                                </ToolTip>
                            </CellEditTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </EditForm>
            </Body>
        </ContentTile>
    }
</ThemedComponent>
@code {
    private IList<Country> Countries { get; set; }

    private EditContext _context;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsLoading = true;

        try
        {
            Countries = (await Controller.SelectAllAsync()).Value;

            if (!Countries.Any())
            {
                await AddNewAsync(args: null);
            }
        }
        finally
        {
            _context = new(Countries);
            IsLoading = Countries is null;
        }
    }

    private async Task AddNewAsync(MouseEventArgs args)
    {
        // TODO: Do something with MouseEventArgs?

        var getDefaultTask = await Controller.GetDefaultAsync();
        await Controller.AddAsync(getDefaultTask.Value);

        if (getDefaultTask.Value is Country model)
            Countries.Insert(0, model);
    }

    private async Task DeleteAsync(MouseEventArgs args, Country model)
    {
        var result = await Controller.DeleteOrDetachAsync(model);

        if (result is OkResult)
            Countries.Remove(model);
        else
            throw new InvalidOperationException();

        // TODO: interpret the response.
    }

    private void Cancel_OnClick() => NavigationHelper.NavigateTo(IndexUriRelativePath);

    private async Task Submit_OnClick(EditContext context, MouseEventArgs args)
    {
        bool isValid = context.Validate();
        if (isValid)
        {
            var saveResult = await Controller.SaveChangesAsync();

            if (saveResult is NoContentResult)
                NavigationHelper.NavigateTo(IndexUriRelativePath);

            else if (saveResult is ObjectResult objectResult)
                ErrorMessage = (objectResult.Value as Exception)?.Message;
        }
    }
}
