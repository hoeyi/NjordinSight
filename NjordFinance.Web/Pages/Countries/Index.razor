@page "/countries"

@inherits ModelIndex<Country>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

<ThemedComponent>
    <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.ReadMany())" />

    <ContentTile>
        <Body>
            <SearchInputTable TModel="Country"
                ComparisonOperators=@ComparisonOperators
                ExpressionBuilder=@ExpressionBuilder
                SearchFields=@SearchFields
                OnSearchClick=@(async (args) => await SearchClicked(args))>
            </SearchInputTable>
        </Body>
    </ContentTile>

    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {

        <ContentTile>
            <Body>
                <DataGrid Data="@Models">
                    <DataGridColumn Property=@nameof(Country.DisplayName)
                                Caption=@(NameFor(x => x.DisplayName))>
                        <CellTemplate Context="model">
                            @model.DisplayName
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Country.IsoCode3)
                                Caption=@(NameFor(x => x.IsoCode3))>
                        <CellTemplate Context="model">
                            @model.IsoCode3
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Type="DataGridCellType.Button">
                        <CellTemplate Context="model">
                            <ToolTip Text=@(Strings.Caption_ViewMany.Format(
                                ModelMetadata
                                    .GetAttribute<CountryAttributeMemberEntry, NounAttribute>()
                                    ?.GetPlural()))>
                                <button class="form-control button icon"
                                    type="button"
                                    @onclick="(args) => OnAttributeDetailSelect(args, model)">
                                    <IonIcon Name="list-circle" />
                                </button>
                            </ToolTip>
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        ActionMenu = new()
            {
                IconKey = "reorder-four",
                Children = new()
                {
                    { 0, new MenuItem()
                        {
                            IconKey = "pencil",
                            Caption = string.Format(
                                Strings.Caption_EditMany, ModelNoun?.GetPlural()),
                            UriStem = $"{IndexUriRelativePath}/edit"
                        }
                    }
                }
            };

        MaxRecordCount = -1;

        await base.OnInitializedAsync();
    }

    private void OnAttributeDetailSelect(MouseEventArgs args, Country model) =>
        NavigationHelper.NavigateTo(FormatDetailUri(GetKeyValueOrDefault<int>(model)));
}
