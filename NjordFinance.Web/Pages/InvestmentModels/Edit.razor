@page "/InvestmentModels/{ModelId:int}/Edit"

@inherits ModelDetail<InvestmentStrategy>

@inject IReferenceDataService ReferenceData

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateSingle(ViewModel.DisplayName).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu"
                         Header="@(PageTitle.UpdateSingle(ViewModel.DisplayName))" />

        @if (DrawDialog)
        {
            <TargetEditDialog ViewModel="@CurrentTargetViewModel"
                      AttributeMemberLookup="@CurrentAttributeMemberLookup"
                      OnClose="OnModalClosed" />
        }

        <ActionButtonMenu>
            <button type="button" class="form-control button"
                @onclick="Cancel_OnClick"
                @onclick:preventDefault>
                @Resources.Strings.Caption_Button_Cancel
            </button>
            <button type="button" class="form-control button"
                @onclick="Delete_OnClick"
                @onclick:preventDefault>
                @Resources.Strings.Caption_Button_Delete
            </button>
            <button type="button" class="form-control button"
                @onclick="AddNewTarget_Click"
                @onclick:preventDefault>
                @(string.Format(
                    Resources.Strings.Caption_Button_Add,
                    ModelMetadata.NounFor(typeof(InvestmentStrategyTarget)).GetSingular()))
            </button>
            <button type="submit" form="@FormGuid" class="form-control button">
                @Resources.Strings.Caption_Button_Save
            </button>
        </ActionButtonMenu>
        <ContentTile>
            <Body>
                <EditForm id="@FormGuid" Model="@ViewModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <InvestmentModelCRUD Model="@ViewModel" Disabled="false" ReadOnly="false" />
                </EditForm>
            </Body>
        </ContentTile>
        @foreach (var group in ViewModel.AttributeTargetCollection)
        {
            <ContentTile>
                <TitleAlignLeft>
                    @group.Key.DisplayName
                </TitleAlignLeft>
                <TitleAlignRight>
                    <div @onclick="(() => AddTarget_OnClick(group.Key))" class="icon">
                        <IonIcon Name="add" />
                    </div>
                </TitleAlignRight>
                <Body>
                    <DataGrid Data="group">
                        <DataGridColumn Type="DataGridCellType.Link"
                                Property="@nameof(InvestmentModelTargetViewModel.EffectiveDate)"
                                Caption=@(NameFor<InvestmentStrategyTarget>(
                                nameof(InvestmentModelTargetViewModel.EffectiveDate)))>
                            <CellTemplate Context="model">
                                <a 
                                    @onclick:preventDefault
                                    @onclick="(() => Target_OnClick(model))">
                                    @model.EffectiveDate.ToShortDateString()
                                </a>
                            </CellTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </Body>
            </ContentTile>
        }
    }
</ThemedComponent>

@code {
    /// <summary>
    /// Gets or sets the identifier for the <see cref="InvestmentStrategy" /> worked using this
    /// page.
    /// </summary>
    [Parameter]
    public int ModelId { get; set; }

    /// <summary>
    /// Gets or sets the <see cref="InvestmentModelViewModel" /> representing the worked model.
    /// </summary>
    private InvestmentModelViewModel ViewModel { get; set; }

    /// <summary>
    /// Gets or sets the current <see cref="InvestmentModelTargetViewModel" /> instance.
    /// </summary>
    private InvestmentModelTargetViewModel? CurrentTargetViewModel { get; set; }

    /// <summary>
    /// Gets or sets the current collection of valid entries for the current
    /// </summary>
    private IEnumerable<LookupModel> CurrentAttributeMemberLookup { get; set; }

    /// <summary>
    /// Gets or sets the allowable model attributes for targets.
    /// </summary>
    private IEnumerable<ModelAttribute> AllowableModelAttributes { get; set; }

    /// <summary>
    /// Gets or sets whether the modal dialog for this page is drawn. Default is <see cref="false"/>.
    /// </summary>
    private bool DrawDialog { get; set; } = false;

    private readonly Guid FormGuid = Guid.NewGuid();

    private readonly string[] ModelScopes =
        (ModelAttributeScopeCode.Country | ModelAttributeScopeCode.Security).ToStringArray();

    protected override async Task OnInitializedAsync()
    {
        ActionMenu = new()
            {
                IconKey = "reorder-four",
                Children = new()
                {
                    // Add index button.
                    { 0, new MenuItem()
                        {
                            IconKey = "list",
                            Caption = $"{Resources.Strings.Caption_Button_Index}",
                            UriStem = $"{IndexUriRelativePath}"
                        }
                    },
                    // Add delete button.
                    { 1, new MenuItem()
                        {
                            IconKey = "close",
                            Caption = $"{Resources.Strings.Caption_Button_Delete} {ModelNoun.GetSingular()}",
                            UriStem = $"#"
                        }
                    }
                }
            };

        IsLoading = true;

        try
        {
            using var queryBuilder = ReferenceData.CreateQueryBuilder<ModelAttribute>()
                                        .WithDirectRelationship(a => a.ModelAttributeScopes);

            var modelQuery = Controller.ReadAsync(ModelId);
            var attributeQuery = queryBuilder.SelectWhereAsync(
                predicate: attr => attr.ModelAttributeScopes.Any(msc => ModelScopes.Contains(msc.ScopeCode)),
                maxCount: 0);

            if ((await modelQuery).Value is InvestmentStrategy model)
            {
                Model = model;
            }

            AllowableModelAttributes = await attributeQuery;

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Model is null || ViewModel is null || AllowableModelAttributes is null;
        }
    }

    private async Task AddNewTarget_Click()
    {
        throw new NotImplementedException();
    }

    private async Task AddTarget_OnClick(ModelAttribute forModelAttribute)
    {
        await Target_OnClick(ViewModel
            .AddNew(forAttribute: forModelAttribute, effectiveDate: DateTime.Now.Date));
    }

    private void Cancel_OnClick()
    {
        NavigationHelper.NavigateTo(FormatDetailUri(ModelId));
    }

    private async Task Delete_OnClick()
    {
        var result = await Controller.DeleteAsync(Model);

        if (result is NoContentResult ncr)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    private async Task HandleValidSubmit()
    {
        Model = ViewModel.ToEntity();

        var result = await Controller.UpdateAsync(Model.InvestmentStrategyId, Model);

        if (result.Value is not null)
            NavigationHelper.NavigateTo(FormatDetailUri(result.Value.InvestmentStrategyId));
    }

    private void OnModalClosed(ModalEventArgs<InvestmentModelTargetViewModel> modalEventArgs)
    {
        DrawDialog = false;

        switch (modalEventArgs.Result)
        {
            case DialogResult.Delete:
                ViewModel.TargetCollection.Remove(modalEventArgs.Model);
                break;
            case DialogResult.None:
                break;
            case DialogResult.OK:
                break;
            case DialogResult.Cancel:
                break;
            default:
                throw new NotSupportedException();
        };
    }

    private async Task Target_OnClick(InvestmentModelTargetViewModel targetViewModel)
    {
        CurrentTargetViewModel = targetViewModel;
        CurrentAttributeMemberLookup = (await ReferenceData
                .ModelAttributeMemberListAsync(targetViewModel.ParentAttribute.AttributeId))
                .ToLookups();

        DrawDialog = CurrentTargetViewModel is not null && CurrentAttributeMemberLookup is not null;
    }
}