@inherits LocalizableComponent

@if(IsLoading)
{
    <LoadingSvg />   
}
else
{
    <CascadingValue Value="OnClose">
        <Modal T="InvestmentModelTargetViewModel" DialogOptions="DialogResult.None">
            <EditForm 
                class="model-editor" 
                Model="@ViewModel" 
                OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <InvestmentModelTargetCRUD 
                    Model="@ViewModel"
                    AttributeMemberLookup="@AttributeMemberLookup"
                    Disabled="false"
                    ReadOnly="false" />
                <ActionButtonMenu>
                    <button type="button" class="form-control button" 
                        @onclick="@(async () => await OnClick(DialogResult.Cancel))"
                        @onclick:preventDefault >
                        @(NameFor<DialogResult>(nameof(DialogResult.Cancel)))
                    </button>
                    <button type="button" class="form-control button" 
                        @onclick="@(async () => await OnClick(DialogResult.Delete))"
                        @onclick:preventDefault >
                        @(NameFor<DialogResult>(nameof(DialogResult.Delete)))
                    </button>
                    <button type="submit" class="form-control button">
                        @(NameFor<DialogResult>(nameof(DialogResult.OK)))
                    </button>
                </ActionButtonMenu>
            </EditForm>
        </Modal>
    </CascadingValue>
}

@code{
    /// <summary>
    /// Gets or sets the event handler for the close event of this form.
    /// </summary>
    [Parameter]
    public EventCallback<ModalEventArgs<InvestmentModelTargetViewModel>> OnClose { get; set; }

    /// <summary>
    /// Gets or sets the 
    /// </summary>
    [Parameter]
    public InvestmentModelTargetViewModel ViewModel { get; set; }

    /// <summary>
    /// Gets or sets the reference list for allowable <see cref="ModelAttributeMember" /> 
    /// records for this form.
    /// </summary>
    [Parameter]
    public IEnumerable<LookupModel> AttributeMemberLookup { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsLoading = ViewModel is null || AttributeMemberLookup is null;
    }

    private async Task OnClick(DialogResult result)
    {
        switch(result)
        {
            case DialogResult.OK:
                break;
            case DialogResult.Cancel:
                break;
            case DialogResult.Delete:
                break;
            default:
                throw new NotSupportedException();
        }

        var args = new ModalEventArgs<InvestmentModelTargetViewModel>()
        {
            Model = ViewModel,
            Result = result
        };

        await OnClose.InvokeAsync(args);
    }

    private async Task HandleValidSubmit() => await OnClick(DialogResult.OK);
}