@page "/InvestmentModels/{ModelId:int}/Detail"

@inherits ModelDetail<InvestmentStrategy>

@inject IReferenceDataService ReferenceData

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle(Model.DisplayName).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.ReadSingle(Model.DisplayName))" />

        @foreach(var group in ViewModel.CurrentTargetCollection)
        {
            <PageSection>
                <EditForm class="model-editor" Model="@group.First()">
                    <InvestmentModelTargetCRUD 
                        Model="@group.First()"
                        Disabled="false"
                        ReadOnly="true" />
                </EditForm>
            </PageSection>
        }
    }
</ThemedComponent>

@code{
    [Parameter]
    public int ModelId { get; set; }

    private IEnumerable<LookupModel> ModelAttributes { get; set; }

    private InvestmentModelViewModel ViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

                
        try
        {
            var modelQuery = Controller.ReadAsync(ModelId);

            if((await modelQuery).Value is InvestmentStrategy model)
                Model = model;

            ActionMenu = new()
                    {
                        IconKey = "reorder-four",
                        Children = new()
                    {
                        // Add index button.
                        { 0, new MenuItem()
                            {
                                IconKey = "list",
                                Caption = $"{Resources.Strings.Caption_Button_Index}",
                                UriStem = $"{IndexUriRelativePath}"
                            }
                        },
                        // Add edit button.
                        { 1, new MenuItem()
                            {
                                IconKey = "pencil",
                                Caption = $"{Resources.Strings.Caption_Button_Edit} {ModelNoun.GetSingular()}",
                                UriStem = FormatEditUri(Model.InvestmentStrategyId)
                            }
                        }
                    }
                };  

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Model is null || ViewModel is null;
        }
    }
}