@inherits LocalizableComponent


<ThemedComponent>
    <EditForm class="model-editor modal" 
        Model="ViewModel" 
        OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <InvestmentModelTargetCRUD Model="ViewModel"
            Disabled="false"
            ReadOnly="false" />
        <ActionButtonMenu>
            <button type="button" class="form-control button" 
                @onclick="Cancel_OnClick"
                @onclick:preventDefault >
                @Resources.Strings.Caption_Button_Cancel
            </button>
            <button type="button" class="form-control button" 
                @onclick="Delete_OnClick"
                @onclick:preventDefault >
                @Resources.Strings.Caption_Button_Delete
            </button>
            <button type="submit" class="form-control button">
                @Resources.Strings.Caption_Button_Save
            </button>
        </ActionButtonMenu>
    </EditForm>
</ThemedComponent>

@code{
    /// <summary>
    /// Gets or sets the target of the modal edit form.
    /// </summary>
    [Parameter]
    public InvestmentModelTargetViewModel ViewModel { get; set; }

    /// <summary>
    /// Gets or sets the reference list for allowable <see cref="ModelAttributeMember" /> 
    /// records for this form.
    /// </summary>
    [Parameter]
    public IEnumerable<LookupModel> AttributeMemberLookup { get; set; }

    /// <summary>
    /// Gets or sets the event handler for the close event of this form.
    /// </summary>
    [Parameter]
    public EventCallback<ModalEventArgs<InvestmentModelTargetViewModel>> OnClose { get; set; }

    private Task HandleValidSubmit()
    {
        var eventArgs = new ModalEventArgs<InvestmentModelTargetViewModel>()
            {
                Model = ViewModel,
                Result = ModalEventArgs<InvestmentModelTargetViewModel>.ModalResult.UpdateSubmitted
            };

        return OnClose.InvokeAsync(eventArgs);
    }

    private Task Cancel_OnClick()
    {
        var eventArgs = new ModalEventArgs<InvestmentModelTargetViewModel>()
            {
                Model = ViewModel,
                Result = ModalEventArgs<InvestmentModelTargetViewModel>.ModalResult.UpdateSubmitted
            };

        return OnClose.InvokeAsync(eventArgs);
    }

    private Task Delete_OnClick()
    {
        var eventArgs = new ModalEventArgs<InvestmentModelTargetViewModel>()
            {
                Model = ViewModel,
                Result = ModalEventArgs<InvestmentModelTargetViewModel>.ModalResult.UpdateSubmitted
            };

        return OnClose.InvokeAsync(eventArgs);
    }
}