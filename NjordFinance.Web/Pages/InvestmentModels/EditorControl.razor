@inherits AttributeEntryCollectionEdit<
    InvestmentModelViewModel, 
    InvestmentModelTargetViewModel, 
    InvestmentStrategy, 
    InvestmentStrategyTarget>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        @if (DrawViewModelChildModelEditor)
        {
            <CascadingValue Value="@CurrentViewModelChild">
                <CascadingValue Value="@CurrentAttributeMemberLookup">
                    <AttributeTargetModalCRUD 
                        TViewModel="InvestmentModelTargetViewModel"
                        OnClose="OnModalEditor_ForChildView_Close">
                        <InvestmentModelTargetCRUD Disabled="false" ReadOnly="false" />
                    </AttributeTargetModalCRUD>
                </CascadingValue>
            </CascadingValue>
        }

        @if(DrawAttributeSelectorDialog)
        {
            <AttributeSelectorModal 
                OnClose="OnModalAttributeSelectorClosed"
                AllowableAttributes="@AllowableModelAttributes">
            </AttributeSelectorModal>
        }

        <ActionButtonMenu>
            <button type="submit" form="@FormGuid" class="form-control button">
                @Resources.Strings.Caption_Button_Save
            </button>
            <button type="button" class="form-control button"
                @onclick="OnAddNewTargetClick"
                @onclick:preventDefault>
                @(string.Format(
                    Resources.Strings.Caption_Button_Add,
                    ModelMetadata.NounFor(typeof(InvestmentStrategyTarget)).GetSingular()))
            </button>
            @if(Mode == EditorMode.Edit)
            {
                <button type="button" class="form-control button"
                    @onclick="@(async (args) => await OnDeleteModelClick.InvokeAsync(args))"
                    @onclick:preventDefault>
                    @Resources.Strings.Caption_Button_Delete
                </button>
            }
            <button type="button" class="form-control button"
                @onclick="@(async(args) => await OnCancelEditorClick.InvokeAsync(args))"
                @onclick:preventDefault>
                @Resources.Strings.Caption_Button_Cancel
            </button>
        </ActionButtonMenu>
        <ContentTile class="left">
            <Body>
                <CascadingValue Value="@ViewModel">
                    <EditForm id="@FormGuid" 
                        Model="@ViewModel"
                        OnValidSubmit="@(async (args) => await OnValidFormSubmit.InvokeAsync(args))">
                        <DataAnnotationsValidator />
                        <InvestmentModelCRUD Disabled="false" ReadOnly="false" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
        @foreach (var group in ViewModel.AttributeTargetCollection)
        {
            <ContentTile>
                <TitleAlignLeft>
                    @group.Key.DisplayName
                </TitleAlignLeft>
                <TitleAlignRight>
                    <button
                        class="form-control button icon"
                        type="button" 
                        @onclick="(() => AddEntryForGrouping(group.Key))">
                        <IonIcon Name="add" />
                    </button>
                </TitleAlignRight>
                <Body>
                    <DataGrid Data="group">
                        <DataGridColumn Type="DataGridCellType.Link"
                                Property="@nameof(InvestmentModelTargetViewModel.EffectiveDate)"
                                Caption=@(NameFor<InvestmentModelTargetViewModel>(
                                    nameof(InvestmentModelTargetViewModel.EffectiveDate)))>
                            <CellTemplate Context="model">
                                <a 
                                    @onclick:preventDefault
                                    @onclick="(() => OnChildViewSelect(model))">
                                    @model.EffectiveDate.ToShortDateString()
                                </a>
                            </CellTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </Body>
            </ContentTile>
        }
    }
</ThemedComponent>

@code {
    /// <summary>
    /// Gets or sets the delegate for handling a request to delete the model initiated by a 
    /// mouse click.
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnDeleteModelClick { get; set; }

    /// <summary>
    /// Gets or sets the delegate for handling a request to cancel the editor initiated by a
    /// mouse click.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<MouseEventArgs> OnCancelEditorClick { get; set; }

    /// <summary>
    /// Gets or sets the delegate for handling a request to submit a valid form initiated by a
    /// mouse click.
    /// </summary>
    [Parameter, EditorRequired]
    public EventCallback<EditContext> OnValidFormSubmit { get; set; }

    /// <summary>
    /// Gets or sets the identifier for the <see cref="EditorMode" /> for the page.
    /// </summary>
    [Parameter, EditorRequired]
    public EditorMode Mode { get; set; }

    /// <summary>
    /// Gets or sets whether the modal dialog for selecting an attribute is drawn. Default is 
    /// <see cref="false" />.
    /// </summary>
    private bool DrawAttributeSelectorDialog { get; set; } = false;

    private readonly Guid FormGuid = Guid.NewGuid();

    private void OnAddNewTargetClick() => DrawAttributeSelectorDialog = true;

    private async Task OnModalAttributeSelectorClosed(ModalEventArgs<ModelAttribute> modalEventArgs)
    {
        DrawAttributeSelectorDialog = false;

        switch(modalEventArgs.Result)
        {
            case DialogResult.OK:
                if (modalEventArgs.Model is not null)
                    await AddEntryForGrouping(modalEventArgs.Model);
                break;
            case DialogResult.Cancel:
                break;
            default:
                throw new NotSupportedException();
        }

        StateHasChanged();
    }
}