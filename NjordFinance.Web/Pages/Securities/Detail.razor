@page "/securities/{SecurityId:int}/detail"

@inherits ModelDetail<Security>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle($"{Model.SecuritySymbol} {Model.SecurityDescription}").AsPageTitle())
        </PageTitle>

        <ModelPageMenuHeader 
            ActionMenu="@ActionMenu" 
            Header="@(PageTitle.ReadSingle(Model.SecurityDescription))" />

        <ContentTile>
            <Body>
                <CascadingValue Value="@ViewModel">
                    <EditForm class="model-editor" Model="@ViewModel"> 
                        <SecurityCRUD
                            SecurityTypes="SecurityTypes"
                            SecurityExchanges="Exchanges"
                            Issuers="Issuers"
                            Disabled="false" ReadOnly="true" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
        @foreach(var group in ViewModel.AttributeViewModel.CurrentEntryCollectionGroups.OrderBy(g => 
            g.ParentAttribute.DisplayName))
        {
            <ContentTile>
                <Body>
                    <CascadingValue Value="@group">
                        <EditForm class="model-editor" Model="@group">
                            <SecurityAttributesCRUD 
                                Disabled="false"
                                ReadOnly="true" />
                        </EditForm>
                    </CascadingValue>
                </Body>
            </ContentTile>
        }
        <ContentTile>
            <TitleAlignLeft>
                @(ModelMetadata
                    .GetAttribute<SecuritySymbol, NounAttribute>()
                    .GetPlural().ToTitleCase())
            </TitleAlignLeft>
            <Body>
                <EditForm width="100%" Model="@ViewModel.SecuritySymbols">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <DataGrid Data="@ViewModel.SecuritySymbols">
                        <DataGridColumn Property="@nameof(SecuritySymbol.SymbolTypeId)"
                                    Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.SymbolTypeId))">
                            <CellTemplate Context="model">
                                @GetLookupDisplayName(SymbolTypes, model.SymbolTypeId)
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property="@nameof(SecuritySymbol.SymbolCode)"
                                    Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.SymbolCode))">
                            <CellTemplate Context="model">
                                @model.SymbolCode
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property="@nameof(SecuritySymbol.EffectiveDate)"
                                    Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.EffectiveDate))">
                            <CellTemplate Context="model">
                                @model.EffectiveDate.ToShortDateString()
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property="@nameof(SecuritySymbol.Ticker)"
                                    Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.Ticker))">
                            <CellTemplate Context="model">
                                @model.Ticker
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property="@nameof(SecuritySymbol.Cusip)"
                                    Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.Cusip))">
                            <CellTemplate Context="model">
                                @model.Cusip
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property="@nameof(SecuritySymbol.CustomSymbol)"
                                    Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.CustomSymbol))">
                            <CellTemplate Context="model">
                                @model.CustomSymbol
                            </CellTemplate>
                        </DataGridColumn>
                        <DataGridColumn Property="@nameof(SecuritySymbol.OptionTicker)"
                                    Caption="@(ModelMetadata.NameFor<SecuritySymbol>(x => x.OptionTicker))">
                            <CellTemplate Context="model">
                                @model.OptionTicker
                            </CellTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </EditForm>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int SecurityId { get; set; }

    private IEnumerable<LookupModel<int, string>> Exchanges { get; set; }

    private IEnumerable<LookupModel<int, string>> SecurityTypes { get; set; }

    private IEnumerable<LookupModel<int, string>> SymbolTypes { get; set; }

    private IEnumerable<string> Issuers { get; set; }

    private SecurityViewModel ViewModel { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var exchangesDtoQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecurityExchange, int, string>(
                    key: x => x.ExchangeId,
                    display: x => x.ExchangeCode);

            var securityTypesQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecurityType, int, string>(
                    key: x => x.SecurityTypeId,
                    display: x => x.SecurityTypeName);

            var issuersQuery = Controller.ReferenceQueries
                .GetManyAsync<Security>(x => (x.Issuer ?? string.Empty) != string.Empty);

            var securityQuery = Controller.ReadAsync(SecurityId);

            var symbolTypesQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecuritySymbolType, int, string>(
                    key: x => x.SymbolTypeId,
                    display: x => x.SymbolTypeName);

            var dataTasks = Task.WhenAll(
                exchangesDtoQuery,
                securityTypesQuery,
                issuersQuery,
                securityQuery);

            await dataTasks;

            if(dataTasks.Status == TaskStatus.RanToCompletion)
            {
                Model = (await securityQuery).Value;
                Exchanges = (await exchangesDtoQuery).Value;
                SecurityTypes  = (await securityTypesQuery).Value;
                Issuers = (await issuersQuery).Value.Select(x => x.Issuer).Distinct();
                SymbolTypes = (await symbolTypesQuery).Value;
            }

            else
            {
                throw dataTasks.Exception.Flatten();
            }

            ActionMenu = new()
                {
                    IconKey = "reorder-four",
                    Children = new()
                    {
                        // Add return to index button.
                        { 0, new MenuItem()
                            {
                                IconKey = "caret-back-circle",
                                Caption = string.Format(
                                    Strings.Caption_NavigateBackTo,
                                    ModelMetadata
                                        .GetAttribute<Security, NounAttribute>()
                                        ?.GetPlural()),
                                UriStem = $"{IndexUriRelativePath}"
                            }
                        },
                        // Add edit button.
                        { 1, new MenuItem()
                            {
                                IconKey = "pencil",
                                Caption = string.Format(
                                    Strings.Caption_EditSingle, ModelNoun?.GetSingular()),
                                UriStem = FormatEditUri(GetKeyValueOrDefault<int>(Model))
                            }
                        }
                    }
                };

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Exchanges is null ||
                SecurityTypes is null ||
                Issuers is null ||
                Model is null ||
                ViewModel is null ||
                SymbolTypes is null;
        }

        // TODO: Take corrective action here, accountQuery.Value should be Account
    }

    private string? GetLookupDisplayName(IEnumerable<LookupModel<int, string>> lookupModels, int id) =>
        lookupModels.FirstOrDefault(x => x.Key == id)?.Display;
}
