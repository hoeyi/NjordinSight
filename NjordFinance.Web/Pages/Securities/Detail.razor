@page "/securities/{SecurityId:int}/detail"

@inherits ModelDetail<Security>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle($"{Model.SecuritySymbol} {Model.SecurityDescription}").AsPageTitle())
        </PageTitle>

        <ModelPageMenuHeader 
            ActionMenu="@ActionMenu" 
            Header="@(PageTitle.ReadSingle(Model.SecurityDescription))" />

        <ContentTile>
            <Body>
                <CascadingValue Value="@ViewModel">
                    <EditForm class="model-editor" Model="@ViewModel"> 
                        <SecurityCRUD
                            SecurityTypes="SecurityTypes"
                            SecurityExchanges="Exchanges"
                            Issuers="Issuers"
                            Disabled="false" ReadOnly="true" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int SecurityId { get; set; }

    private IEnumerable<LookupModel<int, string>> Exchanges { get; set; }

    private IEnumerable<LookupModel<int, string>> SecurityTypes { get; set; }

    private IEnumerable<string> Issuers { get; set; }

    private Security ViewModel { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var exchangesDtoQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecurityExchange, int, string>(
                    key: x => x.ExchangeId,
                    display: x => x.ExchangeCode);

            var securityTypesQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecurityType, int, string>(
                    key: x => x.SecurityTypeId,
                    display: x => x.SecurityTypeName);

            var issuersQuery = Controller.ReferenceQueries
                .GetManyAsync<Security>(x => (x.Issuer ?? string.Empty) != string.Empty);

            var securityQuery = Controller.ReadAsync(SecurityId);


            var dataTasks = Task.WhenAll(
                exchangesDtoQuery,
                securityTypesQuery,
                issuersQuery,
                securityQuery);

            await dataTasks;

            if(dataTasks.Status == TaskStatus.RanToCompletion)
            {
                Model = (await securityQuery).Value;
                Exchanges = (await exchangesDtoQuery).Value;
                SecurityTypes  = (await securityTypesQuery).Value;
                Issuers = (await issuersQuery).Value.Select(x => x.Issuer).Distinct();
            }

            else
            {
                throw dataTasks.Exception.Flatten();
            }

            ActionMenu = new()
                {
                    IconKey = "reorder-four",
                    Children = new()
                    {
                        // Add return to index button.
                        { 0, new MenuItem()
                            {
                                IconKey = "caret-back-circle",
                                Caption = string.Format(
                                    Strings.Caption_NavigateBackTo,
                                    ModelMetadata
                                        .GetAttribute<Security, NounAttribute>()
                                        ?.GetPlural()),
                                UriStem = $"{IndexUriRelativePath}"
                            }
                        },
                        // Add edit button.
                        { 1, new MenuItem()
                            {
                                IconKey = "pencil",
                                Caption = string.Format(
                                    Strings.Caption_EditSingle, ModelNoun?.GetSingular()),
                                UriStem = FormatEditUri(GetKeyValueOrDefault<int>(Model))
                            }
                        }
                    }
                };

            // Add view attributes menu item.
            ActionMenu.Children.Add(ActionMenu.Children.Max(kv => kv.Key) + 1, new MenuItem()
                {
                    IconKey = "journal",
                    Caption = string.Format(
                                Strings.Caption_ViewMany,
                                ModelMetadata.GetAttribute<ModelAttribute, NounAttribute>()?.GetPlural()),
                    UriStem = $"{FormatDetailUri(Model.SecurityId)}/attributes"
                });

            // Add view symbols menu item.
            ActionMenu.Children.Add(ActionMenu.Children.Max(kv => kv.Key) + 1, new MenuItem()
                {
                    IconKey = "journal",
                    Caption = string.Format(
                            Strings.Caption_ViewMany,
                            ModelMetadata.GetAttribute<SecuritySymbol, NounAttribute>()?.GetPlural()),
                    UriStem = $"{FormatDetailUri(Model.SecurityId)}/symbols"
                });

            ViewModel = Model;
        }
        finally
        {
            IsLoading = Exchanges is null || 
                SecurityTypes is null || 
                Issuers is null || Model is null || ViewModel is null;
        }

        // TODO: Take corrective action here, accountQuery.Value should be Account
    }
}
