@page "/securities/create/{RequestGuid:guid}"

@inherits ModelDetail<Security>

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>
            @(PageTitle.ReadSingle($"{Model.SecuritySymbol} {Model.SecurityDescription}").AsPageTitle())
        </PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu"
                         Header="@(PageTitle.ReadSingle(Model.SecurityDescription))" />

        <ContentTile>
            <Body>
                <CascadingValue Value="@ViewModel">
                    <EditForm class="model-editor" Model="@ViewModel"
                          OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ActionButtonMenu>
                            <button type="submit" class="form-control button">
                                @Strings.Caption_Button_Save
                            </button>
                            <button type="button" class="form-control button"
                                @onclick="Cancel_OnClick"
                                @onclick:preventDefault>
                                @Strings.Caption_Button_Cancel
                            </button>
                        </ActionButtonMenu>
                        <SecurityCRUD SecurityTypes="SecurityTypes"
                                  SecurityExchanges="Exchanges"
                                  Issuers="Issuers"
                                  Disabled="false" ReadOnly="false" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    /// <summary>
    /// Gets or sets the unique identifier for the creation action.
    /// </summary>
    [Parameter]
    public Guid RequestGuid { get; init; }

    private IEnumerable<LookupModel<int, string>> Exchanges { get; set; }

    private IEnumerable<LookupModel<int, string>> SecurityTypes { get; set; }

    private IEnumerable<string> Issuers { get; set; }

    private Security ViewModel { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var exchangesDtoQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecurityExchange, int, string>(
                    key: x => x.ExchangeId,
                    display: x => x.ExchangeCode);

            var securityTypesQuery = Controller.ReferenceQueries
                .GetDtosAsync<SecurityType, int, string>(
                    key: x => x.SecurityTypeId,
                    display: x => x.SecurityTypeName);

            var issuersQuery = Controller.ReferenceQueries
                .GetManyAsync<Security>(x => (x.Issuer ?? string.Empty) != string.Empty);

            var securityQuery = Controller.GetDefaultAsync();


            var dataTasks = Task.WhenAll(
                exchangesDtoQuery,
                securityTypesQuery,
                issuersQuery,
                securityQuery);

            await dataTasks;

            if (dataTasks.Status == TaskStatus.RanToCompletion)
            {
                Model = (await securityQuery).Value;
                Exchanges = (await exchangesDtoQuery).Value;
                SecurityTypes = (await securityTypesQuery).Value;
                Issuers = (await issuersQuery).Value.Select(x => x.Issuer).Distinct();
            }
            else
            {
                throw dataTasks.Exception.Flatten();
            }

            ActionMenu = new()
                {
                    IconKey = "reorder-four",
                    Children = new()
                    {
                        // Add return to index button.
                        { 0, new MenuItem()
                            {
                                IconKey = "caret-back-circle",
                                Caption = string.Format(
                                    Strings.Caption_NavigateBackTo,
                                    ModelMetadata
                                        .GetAttribute<Security, NounAttribute>()
                                        ?.GetPlural()),
                                UriStem = $"{IndexUriRelativePath}"
                            }
                        },
                        // Add edit button.
                        { 1, new MenuItem()
                            {
                                IconKey = "pencil",
                                Caption = string.Format(
                                    Strings.Caption_EditSingle, ModelNoun?.GetSingular()),
                                UriStem = FormatEditUri(GetKeyValueOrDefault<int>(Model))
                            }
                        }
                    }
                };

            ViewModel = Model;
        }
        finally
        {
            IsLoading = Exchanges is null ||
                SecurityTypes is null ||
                Issuers is null || Model is null || ViewModel is null;
        }
    }

    private void Cancel_OnClick()
    {
        NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    private async Task Delete_OnClick()
    {
        var result = await Controller.DeleteAsync(Model!);

        if (result is NoContentResult ncr)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    private async Task HandleValidSubmit()
    {
        var result = await Controller.CreateAsync(Model);

        if (result.Result is CreatedAtActionResult cr)
            NavigationHelper.NavigateTo(FormatDetailUri(cr.RouteValues["id"]));
    }
}
