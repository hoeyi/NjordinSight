@page "/composites/{AccountCompositeId:int}/detail"

@inherits ModelDetail<AccountComposite>

@inject IQueryService QueryService

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle(Model.AccountCompositeCode).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader 
            ActionMenu="@ActionMenu" 
            Header="@(PageTitle.ReadSingle(Model.AccountCompositeCode))" />

        <CascadingValue Value="@ViewModel">
            <EditForm class="model-editor" Model="@ViewModel">
                <ContentTile>
                    <Body>
                        <AccountCompositeCRUD Disabled="false" ReadOnly="true" />
                    </Body>
                </ContentTile>
                <ContentTile>
                    <Body>
                        <AccountCompositeMembersCRUD 
                            Accounts="@Accounts" Disabled="false" ReadOnly="true" />
                    </Body>
                </ContentTile>
            </EditForm>
        </CascadingValue>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int AccountCompositeId { get; set; }

    private IEnumerable<LookupModel<int, string>> Accounts { get; set; }

    private AccountCompositeViewModel ViewModel { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var compositeQuery = await Controller.ReadAsync(AccountCompositeId);
            var accountsQuery = QueryService.CreateQueryBuilder<Account>()
                .WithDirectRelationship(a => a.AccountNavigation)
                .Build()
                .SelectDTOsAsync(
                    key: x => x.AccountId,
                    display: x => x.AccountCode,
                    defaultDisplay: Resources.Strings.Caption_InputSelect_Placeholder);

            if (compositeQuery.Value is AccountComposite composite)
                Model = composite;

            ActionMenu = new()
                {
                    IconKey = "reorder-four",
                    Children = new()
                    {
                        // Add return to index button.
                        { 0, new MenuItem()
                            {
                                IconKey = "caret-back-circle",
                                Caption = string.Format(
                                    Strings.Caption_NavigateBackTo,
                                    ModelMetadata
                                        .GetAttribute<AccountComposite, NounAttribute>()
                                        ?.GetPlural()),
                                UriStem = $"{IndexUriRelativePath}"
                            }
                        },
                        // Add edit button.
                        { 1, new MenuItem()
                            {
                                IconKey = "pencil",
                                Caption = string.Format(
                                    Strings.Caption_EditSingle, ModelNoun?.GetSingular()),
                                UriStem = FormatEditUri(GetKeyValueOrDefault<int>(Model))
                            }
                        }
                    }
                };

            Accounts = await QueryService.GetAccountDTOsAsync();
            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Accounts is null || Model is null;
        }

        // TODO: Take corrective action here, accountQuery.Value should be Account
    }
}
