@page "/Custodians/Edit"

@inherits ModelIndex<AccountCustodian>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

<ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.ReadMany())" />

@if (IsLoading)
{
    <LoadingSvg />
}
else
{   
    <PageTitle>@(PageTitle.UpdateSingle(parent.AccountCode).AsPageTitle())</PageTitle>

    <ModelPageMenuHeader Header="@(PageTitle.UpdateMany(parent.AccountCode))" />

    if(!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-text">@ErrorMessage</div>
    }
    <ThemedComponent>
        <EditForm width="100%" Model="@Wallets">
            <ActionButtonMenu>
                <button class="form-control button" 
                    @onclick="@(args => Submit_OnClick(context, args))">
                    @Resources.Strings.Caption_Button_Save
                </button>
                <button class="form-control button" @onclick=@(args => AddNewAsync(args))>
                    @Resources.Strings.Caption_DataGrid_NewLine.Format(
                        ModelMetadata.NounFor(typeof(AccountWallet))?.GetSingular())
                </button>
            </ActionButtonMenu>
            <DataAnnotationsValidator/>
            <ValidationSummary/>
                <DataGrid Data="@Models">
                    <DataGridColumn Property=@nameof(AccountCustodian.CustodianCode)
                                Caption=@(NameFor<AccountCustodian>(nameof(AccountCustodian.CustodianCode)))>
                        <CellTemplate Context="model">
                            <a href=@(FormatDetailUri(model.AccountCustodianId)) @onclick:preventDefault 
                                @onclick="@(args => Detail_OnClick(model, args))">
                                @model.CustodianCode
                            </a>
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(AccountCustodian.DisplayName)
                                Caption=@(NameFor<AccountCustodian>(nameof(AccountCustodian.DisplayName)))>
                        <CellTemplate Context="model">
                            @model.DisplayName
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
        </EditForm>
    </ThemedComponent>
}

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <DataGrid Data="@Models" class="datagrid">
        <DataGridColumn Property=@nameof(AccountCustodian.CustodianCode)
                    Caption=@(NameFor<AccountCustodian>(nameof(AccountCustodian.CustodianCode)))>
            <CellTemplate Context="model">
                <a href=@(FormatDetailUri(model.AccountCustodianId)) @onclick:preventDefault 
                    @onclick="@(args => Detail_OnClick(model, args))">
                    @model.CustodianCode
                </a>
            </CellTemplate>
        </DataGridColumn>
        <DataGridColumn Property=@nameof(AccountCustodian.DisplayName)
                    Caption=@(NameFor<AccountCustodian>(nameof(AccountCustodian.DisplayName)))>
            <CellTemplate Context="model">
                @model.DisplayName
            </CellTemplate>
        </DataGridColumn>
    </DataGrid>
}

@code {
    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        ActionMenu = new()
        {
            IconKey = "reorder-four",
            Children = new()
            {
                { 0, new MenuItem()
                    {
                        IconKey = "create",
                        Caption = $"Create new {ModelNoun.GetSingular()}",
                        UriStem = FormatCreateUri(Guid.NewGuid())
                    }
                }
            }
        };

        MaxRecordCount = -1;

        await base.OnInitializedAsync();
    }

    private void Detail_OnClick(AccountCustodian model, MouseEventArgs args)
    {
        NavigationHelper.NavigateTo(FormatDetailUri(model.AccountCustodianId));
    }
}