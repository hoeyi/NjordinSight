@page "/AccountWallets/Edit/{AccountId:int}"

@inherits ModelPage<AccountWallet>

@inject IBatchController<AccountWallet> Controller
@inject IReferenceDataService ReferenceData

@if (Wallets is null || parent is null)
{
    <p><em>@Resources.Strings.Caption_Page_Loading</em></p>
}
else
{   
    <PageTitle>@(PageTitle.Update(parent.AccountCode).AsPageTitle())</PageTitle>
    <h3>@(PageTitle.Update(parent.AccountCode))</h3>
    <hr/>

    if(!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-text">@errorMessage</div>
    }
    <EditForm Model="@Wallets">
        <a class="link-button" href="" @onclick=@(args => HandleSubmit(context, args)) @onclick:preventDefault>
            @Resources.Strings.Caption_Button_Save
        </a>
        <div>
            <button class="btn btn-primary" @onclick=@(args => AddNewAsync(args))>
                @Resources.Strings.Caption_DataGrid_NewLine.Format(
            ModelMetadata.NounFor(typeof(AccountWallet))?.GetSingular())
            </button>
        </div>
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <span>
            <DataGrid Data="@Wallets" class="datagrid-editable" >
                <DataGridColumn 
                    Property=@nameof(AccountWallet.DenominationSecurityId)
                    Caption=@(ModelMetadata.NameFor<AccountWallet>(nameof(AccountWallet.DenominationSecurityId)))
                    width="20%">
                    <CellEditTemplate Context="model">
                        <InputSelect class="form-control" id="denomination-select" @bind-Value="@model.DenominationSecurityId">
                            @foreach (var security in DenominationSecurities)
                                    {
                                    <option value=@security.Key>@security.Display</option>
                                    }
                            </InputSelect>
                            <ValidationMessage For=@(()=> model.DenominationSecurityId) />
                        </CellEditTemplate>
                    </DataGridColumn>
                <DataGridColumn 
                    Property=@nameof(AccountWallet.AddressCode)
                    Caption=@(ModelMetadata.NameFor<AccountWallet>(nameof(AccountWallet.AddressCode)))
                    width="45%">
                        <CellEditTemplate Context="model">
                            <InputText class="form-control" id="addresscode-text" @bind-Value="@model.AddressCode" />
                            <ValidationMessage For=@(()=> model.AddressCode) />
                        </CellEditTemplate>
                    </DataGridColumn>
                <DataGridColumn 
                    Property=@nameof(AccountWallet.AddressTag)
                    Caption=@(ModelMetadata.NameFor<AccountWallet>(nameof(AccountWallet.AddressTag)))
                    width="35%">
                        <CellEditTemplate Context="model">
                            <InputText class="form-control" id="addresscode-text" @bind-Value="@model.AddressTag" />
                            <ValidationMessage For=@(()=> model.AddressTag) />
                        </CellEditTemplate>
                    </DataGridColumn>
                </DataGrid>
        </span>
    </EditForm>
}

@code {
    [Parameter]
    public int AccountId { get; set; }

    private IList<AccountWallet> Wallets { get; set; }

    private IEnumerable<LookupModel> DenominationSecurities { get; set; }

    private Account parent;

    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        parent = ReferenceData.GetSingleAsync<Account>(
            a => a.AccountId == AccountId, include: a => a.AccountNavigation).Result;

        var initResult = Controller.ForParent(parent.AccountId);

        if (initResult is not OkResult)
            return; // TODO: Redirect to error page.

        DenominationSecurities = await ReferenceData.CryptocurrencyListAsync();
        Wallets = (await Controller.SelectAllAsync()).Value;

        if (Wallets.Count() == 0)
        {
            await AddNewAsync(args: null);
        }
    }

    private async Task AddNewAsync(MouseEventArgs? args)
    {
        // TODO: Do something with MouseEventArgs?

        var getDefaultTask = await Controller.GetDefaultAsync();
        await Controller.AddAsync(getDefaultTask.Value);

        if (getDefaultTask.Value is AccountWallet w)
            Wallets.Add(w);
    }

    private async Task DeleteAsync(AccountWallet wallet, MouseEventArgs args)
    {
        var result = await Controller.DeleteAsync(wallet);

        // TODO: interpret the response.
    }

    private async Task HandleSubmit(EditContext context, MouseEventArgs args)
    {
        bool isValid = context.Validate();
        if (isValid)
        {
            var saveResult = await Controller.SaveChangesAsync();

            if (saveResult is NoContentResult)
                return;

            else if (saveResult is ObjectResult objectResult)
                errorMessage = (objectResult.Value as Exception)?.Message;
        }
    }
}