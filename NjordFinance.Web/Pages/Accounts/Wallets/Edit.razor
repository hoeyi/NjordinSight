@page "/accounts/{AccountId:int}/edit/wallets"

@inherits ModelPage<AccountWallet>

@inject IBatchController<AccountWallet> Controller
@inject IReferenceDataService ReferenceData

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {   
        <PageTitle>@(PageTitle.UpdateSingle(parent.AccountCode).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader Header="@(PageTitle.UpdateMany(parent.AccountCode))" />

        <ContentTile>
            <Body>
                @if(!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="error-text">@ErrorMessage</div>
                }
                <EditForm width="100%" Model="@Wallets">
                    <ActionButtonMenu>
                        <button class="form-control button" 
                            @onclick="@(async (args) => await Submit_OnClick(context, args))">
                            @Resources.Strings.Caption_Button_Save
                        </button>
                        <button class="form-control button" 
                            @onclick=@(async (args) => await AddNewAsync(args))>
                            @Resources.Strings.Caption_Button_Add.Format(
                                ModelMetadata.NounFor(typeof(AccountWallet))?.GetSingular())
                        </button>
                        <button class="form-control button" @onclick="Cancel_OnClick"
                            @onclick:preventDefault>
                            @Resources.Strings.Caption_Button_Cancel
                        </button>
                    </ActionButtonMenu>
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <DataGrid Data="@Wallets">
                        <DataGridColumn 
                            Property=@nameof(AccountWallet.DenominationSecurityId)
                            Caption=@(ModelMetadata.NameFor<AccountWallet>(nameof(AccountWallet.DenominationSecurityId)))
                            width="20%">
                            <CellEditTemplate Context="model">
                                <InputSelect class="form-control"
                                    @bind-Value="@model.DenominationSecurityId">
                                    @foreach (var security in DenominationSecurities)
                                    {
                                        <option value=@security.Key>@security.Display</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For=@(()=> model.DenominationSecurityId) />
                                </CellEditTemplate>
                            </DataGridColumn>
                        <DataGridColumn 
                            Property=@nameof(AccountWallet.AddressCode)
                            Caption=@(ModelMetadata.NameFor<AccountWallet>(nameof(AccountWallet.AddressCode)))
                            width="45%">
                                <CellEditTemplate Context="model">
                                    <InputText class="form-control" @bind-Value="@model.AddressCode" />
                                    <ValidationMessage For=@(()=> model.AddressCode) />
                                </CellEditTemplate>
                            </DataGridColumn>
                        <DataGridColumn 
                            Property=@nameof(AccountWallet.AddressTag)
                            Caption=@(ModelMetadata.NameFor<AccountWallet>(nameof(AccountWallet.AddressTag)))
                            width="35%">
                                <CellEditTemplate Context="model">
                                    <InputText class="form-control" @bind-Value="@model.AddressTag" />
                                    <ValidationMessage For=@(()=> model.AddressTag) />
                                </CellEditTemplate>
                            </DataGridColumn>
                            <DataGridColumn Type="DataGridCellType.Button">
                                <CellEditTemplate Context="model">
                                    <ToolTip Text="@Resources.Strings.Caption_Button_Delete">
                                        <button class="form-control button icon"
                                            type="button"
                                            @onclick="async (args) => await DeleteAsync(args, model)">
                                            <IonIcon Name="close-circle" />
                                        </button>
                                    </ToolTip>
                                </CellEditTemplate>
                            </DataGridColumn>
                        </DataGrid>
                </EditForm>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int AccountId { get; set; }

    private IList<AccountWallet> Wallets { get; set; }

    private IEnumerable<LookupModel> DenominationSecurities { get; set; }

    private Account parent;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            parent = await ReferenceData.GetSingleAsync<Account>(
                a => a.AccountId == AccountId, path: a => a.AccountNavigation);

            var initResult = Controller.ForParent(parent.AccountId);

            if (initResult is not OkResult)
                throw new InvalidOperationException();

            DenominationSecurities = (await ReferenceData.CryptocurrencyListAsync()).ToLookups();
            Wallets = (await Controller.SelectAllAsync()).Value;

            if (!Wallets.Any())
            {
                await AddNewAsync(args: null);
            }
        }
        finally
        {
            IsLoading = Wallets is null || parent is null || DenominationSecurities is null;
        }
    }

    private async Task AddNewAsync(MouseEventArgs? args)
    {
        // TODO: Do something with MouseEventArgs?

        var getDefaultTask = await Controller.GetDefaultAsync();
        await Controller.AddAsync(getDefaultTask.Value);

        if (getDefaultTask.Value is AccountWallet w)
            Wallets.Add(w);
    }

    private async Task DeleteAsync(MouseEventArgs args, AccountWallet wallet)
    {
        var result = await Controller.DeleteOrDetachAsync(wallet);

        if (result is OkResult)
            Wallets.Remove(wallet);
        else
            throw new InvalidOperationException();

        // TODO: interpret the response.
    }

    private void Cancel_OnClick() => NavigationHelper
        .NavigateTo($"{IndexUriRelativePath}/{AccountId}/detail");

    private async Task Submit_OnClick(EditContext context, MouseEventArgs args)
    {
        bool isValid = context.Validate();
        if (isValid)
        {
            var saveResult = await Controller.SaveChangesAsync();

            if (saveResult is NoContentResult)
                NavigationHelper.NavigateTo(IndexUriRelativePath);

            else if (saveResult is ObjectResult objectResult)
                ErrorMessage = (objectResult.Value as Exception)?.Message;
        }
    }
}