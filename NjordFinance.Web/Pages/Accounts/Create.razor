@page "/accounts/create/{RequestGuid:guid}"

@inherits ModelDetail<Account>

<PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

<ThemedComponent>
    <ModelPageMenuHeader Header="@(PageTitle.CreateSingle())" />

    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                <CascadingValue Value="@ViewModel">
                    <EditForm class="model-editor" Model="@ViewModel" 
                        OnValidSubmit="HandleValidSubmit" >
                        <DataAnnotationsValidator />
                        <ActionButtonMenu>
                            <button type="submit" class="form-control button">
                                @Strings.Caption_Button_Save
                            </button>
                            <button class="form-control button" @onclick="Cancel_OnClick"
                                @onclick:preventDefault >
                                @Strings.Caption_Button_Cancel
                            </button>
                        </ActionButtonMenu>
                        <AccountCRUD AccountCustodians="@Custodians" 
                            Disabled="false" ReadOnly="false" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    /// <summary>
    /// Gets or sets the unique identifier for the creation action.
    /// </summary>
    [Parameter]
    public Guid RequestGuid { get; init; }

    private IEnumerable<LookupModel<int, string>> Custodians { get; set; }

    private AccountViewModel ViewModel { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var defaultModelTask = Controller.GetDefaultAsync();
            var custodiansQuery = Controller.ReferenceQueries.GetAccountCustodianDTOsAsync();

            var dataTasks = Task.WhenAll(defaultModelTask, custodiansQuery);
            await dataTasks;

            if (dataTasks.Status == TaskStatus.RanToCompletion)
            {
                Model = (await defaultModelTask).Value;
                Custodians = (await custodiansQuery).Value;
                ViewModel = new(Model);
            }
            else
            {
                throw dataTasks.Exception.Flatten();
            }
        }
        finally
        {
            IsLoading = Model is null || Custodians is null;
        }
    }

    private void Cancel_OnClick()
    {
        NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    private async Task HandleValidSubmit()
    {
        Model = ViewModel.ToAccount();

        var result = await Controller.CreateAsync(Model);

        if (result.Result is CreatedAtActionResult cr)
            NavigationHelper.NavigateTo(FormatDetailUri(cr.RouteValues["id"]));
    }
}
