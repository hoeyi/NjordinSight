@page "/Accounts/Create/{RequestGuid:guid}"

@inherits ModelDetail<Account>

@inject IReferenceDataService ReferenceData

<PageTitle>@(PageTitle.Create().AsPageTitle())</PageTitle>

<ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.Create())" />

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <div>
        <AccountObjectCRUD Model="@Model!.AccountNavigation" 
            Disabled="@_disabled" Readonly="@_readonly" />
    </div>
    <div>
        <AccountCRUD Model="@Model" AccountCustodians=@Custodians 
            Disabled="@_disabled" Readonly="@_readonly" />
    </div>
    <div>
        <button type="submit" @onclick=@(args => HandleValidSubmit(args))>
            @Resources.Strings.Caption_Button_Save
        </button>
    </div>
}

@code {
    [Parameter]
    public Guid RequestGuid { get; set; }

    private IEnumerable<LookupModel> Custodians { get; set; }

    private const bool _disabled = false;
    private const bool _readonly = false;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        ActionMenu = new()
        {
            IconKey = "reorder-four",
            Children = new()
            {
                // Add index button.
                { 0, new MenuItem()
                    {
                        IconKey = "list",
                        Caption = $"{Resources.Strings.Caption_Button_Index}",
                        UriStem = $"{PageIndexUri}"
                    }
                }
            }
        };    

        IsLoading = true;

        try
        {
            var modelQuery = Controller.GetDefaultAsync();
            var custodiansQuery = ReferenceData.AccountCustodianListAsync();

            await custodiansQuery;
            await modelQuery;

            Custodians = custodiansQuery.Result;
            if (modelQuery.Result.Value is Account account)
                Model = account;

        }
        finally
        {
            IsLoading = Model is null || Custodians is null;
        }
    }

    private async Task HandleValidSubmit(MouseEventArgs args)
    {
        int defaultId = Model!.AccountId;

        var result = await Controller.CreateAsync(Model);
        var createResult = result.Result as CreatedAtActionResult;

        if (result.Result is CreatedAtActionResult caar &&
            caar.Value is Account account &&
            account.AccountId != defaultId)
            NavigateToDetail($"{account.AccountId}");
    }
}
