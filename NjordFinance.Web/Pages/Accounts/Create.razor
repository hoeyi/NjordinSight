@page "/Accounts/Create/{RequestGuid:guid}"
@using NjordFinance.Exceptions

@inherits ModelDetail<Account>

@inject IReferenceDataService ReferenceData

<PageTitle>@(PageTitle.Create().AsPageTitle())</PageTitle>

<ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.Create())" />

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <ThemedComponent>
        <EditForm class="model-editor" Model=@Model>
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <ActionButtonMenu>
                <button class="form-control button" @onclick="NavigateToIndex">
                    @Resources.Strings.Caption_Button_Cancel
                </button>
                <button class="form-control button" @onclick="@(args => HandleValidSubmit(args))">
                    @Resources.Strings.Caption_Button_Save
                </button>
            </ActionButtonMenu>
            <div>
                <AccountObjectCRUD Model="@Model.AccountNavigation"
                    Disabled="@_disabled" Readonly="@_readonly" />
            </div>
            <div>
                <AccountCRUD Model="@Model" AccountCustodians="@Custodians"
                    Disabled="@_disabled" Readonly="@_readonly" />
            </div>
        </EditForm>
    </ThemedComponent>
}

@code {
    [Parameter]
    public Guid RequestGuid { get; set; }

    private IEnumerable<LookupModel> Custodians { get; set; }

    private const bool _disabled = false;
    private const bool _readonly = false;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        ActionMenu = new()
        {
            IconKey = "reorder-four",
            Children = new()
            {
                // Add index button.
                { 0, new MenuItem()
                    {
                        IconKey = "list",
                        Caption = $"{Resources.Strings.Caption_Button_Index}",
                        UriStem = $"{IndexUriRelativePath}"
                    }
                }
            }
        };    

        IsLoading = true;

        try
        {
            var modelActionResult = await Controller.GetDefaultAsync();
            Custodians = await ReferenceData.AccountCustodianListAsync();

            if (modelActionResult.Value is Account account)
                Model = account;

        }
        finally
        {
            IsLoading = Model is null || Custodians is null;
        }
    }

    private async Task HandleValidSubmit(MouseEventArgs args)
    {
        var result = await Controller.CreateAsync(Model);
        
        var createResult = result.Result as CreatedAtActionResult;

        if (result?.Value is not null)
            NavigateToDetail($"{result.Value.AccountId}");
    }
}
