@page "/Accounts/Create/{RequestGuid:guid}"

@inherits ModelDetail<Account>

@inject IReferenceDataService ReferenceData

<PageTitle>@(PageTitle.CreateSingle().AsPageTitle())</PageTitle>

<ModelPageMenuHeader Header="@(PageTitle.CreateSingle())" />

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <ThemedComponent>
        <EditForm class="model-editor" Model="@ViewModel" 
            OnValidSubmit="HandleValidSubmit" >
            <DataAnnotationsValidator />
            @*<ValidationSummary/>*@
            <ActionButtonMenu>
                <button class="form-control button" @onclick="Cancel_OnClick"
                    @onclick:preventDefault >
                    @Resources.Strings.Caption_Button_Cancel
                </button>
                <button type="submit" class="form-control button">
                    @Resources.Strings.Caption_Button_Save
                </button>
            </ActionButtonMenu>
            <div>
                <AccountCRUD Model="@ViewModel" AccountCustodians="@Custodians" 
                    Disabled="@_disabled" ReadOnly="@_readonly" />
            </div>
        </EditForm>
    </ThemedComponent>
}

@code {
    [Parameter]
    public Guid RequestGuid { get; init; }

    private IEnumerable<LookupModel> Custodians { get; set; }

    private AccountViewModel ViewModel { get; set; }

    private const bool _disabled = false;
    private const bool _readonly = false;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var getDefaultModelTask = Controller.GetDefaultAsync();
            var refreshCustodianListTask = ReferenceData.AccountCustodianListAsync();

            await Task.WhenAll(getDefaultModelTask, refreshCustodianListTask);

            Model = getDefaultModelTask.Result.Value;
            Custodians = refreshCustodianListTask.Result;

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Model is null || Custodians is null;
        }
    }

    private void Cancel_OnClick()
    {
        NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    private async Task HandleValidSubmit()
    {
        Model = ViewModel.ToAccount();

        var result = await Controller.CreateAsync(Model);

        if (result.Result is CreatedAtActionResult cr)
            NavigationHelper.NavigateTo(FormatDetailUri(cr.RouteValues["id"]));
    }
}
