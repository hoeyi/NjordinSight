@page "/accounts/{AccountId:int}/detail"

@inherits ModelDetail<Account>

@inject IReferenceDataService ReferenceData

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle(Model.AccountCode).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.ReadSingle(Model.AccountCode))" />

        <ContentTile>
            <Body>
                <CascadingValue Value="@ViewModel">
                    <EditForm class="model-editor" Model="@ViewModel">
                        <AccountCRUD AccountCustodians="@Custodians" 
                            Disabled="false" ReadOnly="true" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int AccountId { get; set; }

    private IEnumerable<LookupModel> Custodians { get; set; }

    private AccountViewModel ViewModel { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var accountQuery = await Controller.ReadAsync(AccountId);
            if (accountQuery.Value is Account account)
                Model = account;

            ActionMenu = new()
                {
                    IconKey = "reorder-four",
                    Children = new()
                    {
                        // Add index button.
                        { 0, new MenuItem()
                            {
                                IconKey = "list",
                                Caption = string.Format(
                                    Strings.Caption_ViewMany, ModelNoun?.GetPlural()),
                                UriStem = $"{IndexUriRelativePath}"
                            }
                        },
                        // Add edit button.
                        { 1, new MenuItem()
                            {
                                IconKey = "pencil",
                                Caption = string.Format(
                                    Strings.Caption_EditSingle, ModelNoun?.GetSingular()),
                                UriStem = FormatEditUri(GetKeyValueOrDefault<int>(Model))
                            }
                        }
                    }
                };

            // Add view wallets button.
            if (Model.HasWallet)
                ActionMenu.Children.Add(2, new MenuItem()
                    {
                        IconKey = "wallet",
                        Caption = string.Format(
                            Strings.Caption_EditMany, 
                                ModelMetadata.GetAttribute<AccountWallet, NounAttribute>()?.GetPlural()),
                        UriStem = $"{FormatEditUri(Model.AccountId)}/wallets"
                    });

            Custodians = (await ReferenceData.AccountCustodianListAsync()).ToLookups();

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Custodians is null || Model is null;
        }

        // TODO: Take corrective action here, accountQuery.Value should be Account
    }
}
