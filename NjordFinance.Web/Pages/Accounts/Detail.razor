@page "/Accounts/{AccountId:int}/Detail"

@inherits ModelDetail<Account>

@inject IReferenceDataService ReferenceData

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.ReadSingle(Model.AccountCode).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.ReadSingle(Model.AccountCode))" />

        <ContentTile>
            <Body>
                <CascadingValue Value="@ViewModel">
                    <EditForm class="model-editor" Model="@ViewModel">
                        <AccountCRUD AccountCustodians="@Custodians" 
                            Disabled="false" ReadOnly="true" />
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    [Parameter]
    public int AccountId { get; set; }

    private IEnumerable<LookupModel> Custodians { get; set; }

    private AccountViewModel ViewModel { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var accountQuery = await Controller.ReadAsync(AccountId);
            if (accountQuery.Value is Account account)
                Model = account;

            ActionMenu = new()
                {
                    IconKey = "reorder-four",
                    Children = new()
                {
                    // Add index button.
                    { 0, new MenuItem()
                        {
                            IconKey = "list",
                            Caption = $"{Resources.Strings.Caption_Button_Index}",
                            UriStem = $"{IndexUriRelativePath}"
                        }
                    },
                    // Add edit button.
                    { 1, new MenuItem()
                        {
                            IconKey = "pencil",
                            Caption = $"{Resources.Strings.Caption_Button_Edit} {ModelNoun.GetSingular()}",
                            UriStem = FormatEditUri(Model.AccountId)
                        }
                    },
                    // Add view wallets button.
                    { 2, new MenuItem()
                        {
                            IconKey = "wallet",
                            Caption = $"{Resources.Strings.Caption_Button_View} " +
                                $"{ModelMetadata.NounFor(typeof(AccountWallet))?.GetPlural()}",
                            UriStem = $"{IndexUriRelativePath}/{Model.AccountId}/Wallets/Edit"
                        }
                    }
                }
            };

            Custodians = (await ReferenceData.AccountCustodianListAsync()).ToLookups();

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Custodians is null || Model is null;
        }

        // TODO: Take corrective action here, accountQuery.Value should be Account
    }
}
