@page "/Accounts/Detail/{AccountId:int}"

@inherits ModelDetail<Account>

@inject IReferenceDataService ReferenceData

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <PageTitle>@(PageTitle.Read(Model.AccountCode).AsPageTitle())</PageTitle>

    <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.Read(Model.AccountCode))" />

    <ThemedComponent>
        <EditForm class="model-editor" Model=@Model>
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div>
                <AccountObjectCRUD Model="@Model.AccountNavigation"
                    Disabled="@_disabled" Readonly="@_readonly" />
            </div>
            <div>
                <AccountCRUD Model="@Model" AccountCustodians="@Custodians"
                    Disabled="@_disabled" Readonly="@_readonly" />
            </div>
        </EditForm>
    </ThemedComponent>
}

@code {
    [Parameter]
    public int? AccountId { get; set; }

    private IEnumerable<LookupModel> Custodians { get; set; }

    private string WalletsUri
    {
        get
        {
            return NavigationHelper.ToAbsoluteUri("AccountWallets").AbsoluteUri;
        }
    }

    private const bool _disabled = false;
    private const bool _readonly = true;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {

        IsLoading = true;

        try
        {
            var accountQuery = await Controller.ReadAsync(AccountId);
            if (accountQuery.Value is Account account)
            {
                Model = account;
            }

            ActionMenu = new()
            {
                IconKey = "reorder-four",
                Children = new()
                {
                    // Add index button.
                    { 0, new MenuItem()
                        {
                            IconKey = "list",
                            Caption = $"{Resources.Strings.Caption_Button_Index}",
                            UriStem = $"{IndexUriRelativePath}"
                        }
                    },
                    // Add delete button.
                    { 1, new MenuItem()
                        {
                            IconKey = "pencil",
                            Caption = $"{Resources.Strings.Caption_Button_Edit} {ModelNoun.GetSingular()}",
                            UriStem = $"{IndexUriRelativePath}/Edit/{Model.AccountId}"
                        }
                    },
                    // Add delete button.
                    { 2, new MenuItem()
                        {
                            IconKey = "wallet",
                            Caption = $"{Resources.Strings.Caption_Button_View} " +
                                $"{ModelMetadata.NounFor(typeof(AccountWallet))?.GetPlural()}",
                            UriStem = $"{WalletsUri}/Edit/{Model.AccountId}"
                        }
                    }
                }
            };  

            Custodians = await ReferenceData.AccountCustodianListAsync();
        }
        finally
        {
            IsLoading = Custodians is null;
        }

        // TODO: Take corrective action here, accountQuery.Value should be Account
    }

    private void NavigateToEdit(MouseEventArgs args)
    {
        NavigateToEdit($"{Model.AccountId}");
    }

}
