@page "/Accounts/Detail/{AccountId:int}"

@inherits ModelDetail<Account>


@if (Model is null)
{
    <p><em>@Resources.Strings.Caption_Page_Loading</em></p>
}
else
{
    <PageTitle>@(PageTitle.Read(Model.AccountCode).AsPageTitle())</PageTitle>
    <h3>@(PageTitle.Read(Model.AccountCode))</h3>
    <hr/>

    <div>
        <a class="link-button" href="@($"{PageIndexUri}")"
            @onclick="@(args => NavigateToIndex(args))"
            @onclick:preventDefault>
            @Resources.Strings.Caption_Button_Index
        </a>
        <a class="link-button" href="@($"{PageIndexUri}/Accounts/Edit/{Model.AccountId}")"
            @onclick=@(args => NavigateToEdit(args))
            @onclick:preventDefault>
            @Resources.Strings.Caption_Button_Edit
        </a>
        <a class="link-button" href="@NavigationHelper.ToAbsoluteUri($"AccountWallets/Edit/{Model.AccountId}").AbsoluteUri"
            @onclick=@(args => NavigateToWallets(args))
            @onclick:preventDefault>
            @(ModelMetadata.NounFor(typeof(AccountWallet))?.GetPlural()?.ToTitleCase())
        </a>
    </div>
    <hr />
    <div>
        <AccountObjectCRUD Model="@Model.AccountNavigation"
            Disabled="@_disabled" Readonly="@_readonly" />
    </div>
    <div>
        <AccountCRUD Model="@Model" AccountCustodians=@custodians 
            Disabled="@_disabled" Readonly="@_readonly" />
    </div>
}
@code {
    [Parameter]
    public int? AccountId { get; set; }

    private IEnumerable<AccountCustodian> custodians = new AccountCustodian[0];

    private string WalletsUri
    {
        get
        {
            return NavigationHelper.ToAbsoluteUri("AccountWallets").AbsoluteUri;
        }
    }

    private const bool _disabled = false;
    private const bool _readonly = true;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        var accountQuery = await Controller.ReadAsync(AccountId);
        if (accountQuery.Value is Account account)
        {
            Model = account;
        }

        // TODO: Take corrective action here, accountQuery.Value should be Account
    }

    private void NavigateToWallets(MouseEventArgs args)
    {
        if (AccountId is int id)
            NavigationHelper.NavigateTo($"{WalletsUri}/Edit/{id}");
    }

    private void NavigateToEdit(MouseEventArgs args)
    {
        NavigateToEdit($"{Model.AccountId}");
    }

}
