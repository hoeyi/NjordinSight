@page "/accounts/{AccountId:int}/edit"

@inherits ModelDetail<Account>

@inject IReferenceDataService ReferenceData

<ThemedComponent>
    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <PageTitle>@(PageTitle.UpdateSingle(Model.AccountCode).AsPageTitle())</PageTitle>

        <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.UpdateSingle(Model.AccountCode))" />

        <ContentTile>
            <Body>
                <CascadingValue Value="@ViewModel">
                    <EditForm class="model-editor" Model="@ViewModel" 
                        OnValidSubmit="HandleValidSubmit" >
                        <DataAnnotationsValidator/>
                        <ActionButtonMenu>
                            <button type="submit" class="form-control button">
                                @Strings.Caption_Button_Save
                            </button>
                            <button type="button" class="form-control button" 
                                @onclick="Delete_OnClick"
                                @onclick:preventDefault >
                                @Strings.Caption_Button_Delete
                            </button>
                            <button type="button" class="form-control button" 
                                @onclick="Cancel_OnClick"
                                @onclick:preventDefault >
                                @Strings.Caption_Button_Cancel
                            </button>
                        </ActionButtonMenu>
                        <div>
                            <AccountCRUD AccountCustodians="@Custodians" 
                                Disabled="false" ReadOnly="@false" />
                        </div>
                    </EditForm>
                </CascadingValue>
            </Body>
        </ContentTile>
    }
</ThemedComponent>

@code {
    /// <summary>
    /// Gets or sets the identifier for the <see cref="Account" /> worked using this page.
    /// </summary>
    [Parameter]
    public int AccountId { get; set; }

    private IEnumerable<LookupModel> Custodians { get; set; }

    private AccountViewModel ViewModel { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            var accountQuery = Controller.ReadAsync(AccountId);
            var custodiansQuery = ReferenceData.AccountCustodianListAsync();

            if ((await accountQuery).Value is Account account)
            {
                Model = account;
            }

            Custodians = (await custodiansQuery).ToLookups();

            ViewModel = new(Model);
        }
        finally
        {
            IsLoading = Model is null || Custodians is null;
        }
    }

    private void Cancel_OnClick()
    {
        NavigationHelper.NavigateTo(FormatDetailUri(AccountId));
    }

    private async Task Delete_OnClick()
    {
        var result = await Controller.DeleteAsync(Model!);

        if (result is NoContentResult ncr)
            NavigationHelper.NavigateTo(IndexUriRelativePath);
    }

    private async Task HandleValidSubmit()
    {
        Model = ViewModel.ToAccount();

        var result = await Controller.UpdateAsync(AccountId, Model);

        if (result.Value is not null)
            NavigationHelper.NavigateTo(FormatDetailUri(result.Value.AccountId));
    }
}
