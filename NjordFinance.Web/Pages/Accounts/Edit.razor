@page "/Accounts/Edit/{AccountId:int}"

@inherits ModelDetail<Account>

@inject IReferenceDataService ReferenceData

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <PageTitle>@(PageTitle.Update(Model.AccountCode).AsPageTitle())</PageTitle>

    <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.Update(Model.AccountCode))" />

    <ThemedComponent>
        <EditForm class="model-editor" Model="@Model" 
            OnValidSubmit="HandleValidSubmit" >
            <DataAnnotationsValidator/>
            @*<ValidationSummary/>*@
            <ActionButtonMenu>
                <button class="form-control button" 
                    @onclick="@(() => NavigateToDetail(AccountId?.ToString()))"
                    @onclick:preventDefault>
                    @Resources.Strings.Caption_Button_Cancel
                </button>
                <button class="form-control button"
                    @onclick:preventDefault>
                    @Resources.Strings.Caption_Button_Save
                </button>
            </ActionButtonMenu>
            <div>
                <AccountViewModelCRUD Model="@ViewModel" AccountCustodians="@Custodians" 
                    Disabled="@_disabled" ReadOnly="@_readonly" />
            </div>
        </EditForm>
    </ThemedComponent>
}

@code {
    /// <summary>
    /// Gets or sets the identifier <see cref="Account" /> worked using this page.
    /// </summary>
    [Parameter]
    public int? AccountId { get; set; }

    private IEnumerable<LookupModel> Custodians { get; set; }

    private const bool _disabled = false;
    private const bool _readonly = false;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        ActionMenu = new()
        {
            IconKey = "reorder-four",
            Children = new()
            {
                // Add index button.
                { 0, new MenuItem()
                    {
                        IconKey = "list",
                        Caption = $"{Resources.Strings.Caption_Button_Index}",
                        UriStem = $"{IndexUriRelativePath}"
                    }
                },
                // Add delete button.
                { 1, new MenuItem()
                    {
                        IconKey = "close",
                        Caption = $"{Resources.Strings.Caption_Button_Delete} {ModelNoun.GetSingular()}",
                        UriStem = $"#"
                    }
                }
            }
        };            

        IsLoading = true;

        try
        {
            var accountQuery = await Controller.ReadAsync(AccountId);
            if (accountQuery.Value is Account account)
            {
                Model = account;
            }

            Custodians = await ReferenceData.AccountCustodianListAsync();
        }
        finally
        {
            IsLoading = Model is null || Custodians is null;
        }
    }

    private async Task HandleDelete()
    {
        var result = await Controller.DeleteAsync(Model!);

        if (result is NoContentResult)
            NavigateToIndex(args);
    }

    private async Task HandleValidSubmit()
    {
        var result = await Controller.UpdateAsync(AccountId, Model);

        if (result.Value?.AccountId == AccountId)
            NavigateToDetail($"{Model?.AccountId}");
    }
}
