@page "/Accounts/Edit/{AccountId:int}"

@inherits ModelDetail<Account>

@inject IReferenceDataService ReferenceData

@if (IsLoading)
{
    <LoadingSvg />
}
else
{
    <PageTitle>@(PageTitle.Update(Model.AccountCode).AsPageTitle())</PageTitle>

    <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.Update(Model.AccountCode))" />

@*    <div>
        <a class="link-button" href=""
            @onclick=@(args => HandleDelete(args))
            @onclick:preventDefault>
            @Resources.Strings.Caption_Button_Delete
        </a>
    </div>*@

    <EditForm Model=@Model>
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div>
            <AccountObjectCRUD Model="@Model.AccountNavigation"
                Disabled="@_disabled" Readonly="@_readonly" />
        </div>
        <div>
            <AccountCRUD Model="@Model" AccountCustodians="@Custodians"
                Disabled="@_disabled" Readonly="@_readonly" />
        </div>
        <div>
            <button type="submit" @onclick=@(args => HandleValidSubmit(args))>
                @Resources.Strings.Caption_Button_Save
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? AccountId { get; set; }

    private IEnumerable<LookupModel> Custodians { get; set; }

    private const bool _disabled = false;
    private const bool _readonly = false;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        ActionMenu = new()
        {
            IconKey = "reorder-four",
            Children = new()
            {
                // Add index button.
                { 0, new MenuItem()
                    {
                        IconKey = "list",
                        Caption = $"{Resources.Strings.Caption_Button_Index}",
                        UriStem = $"{PageIndexUri}"
                    }
                },
                // Add delete button.
                { 1, new MenuItem()
                    {
                        IconKey = "close",
                        Caption = $"{Resources.Strings.Caption_Button_Delete} {ModelNoun.GetSingular()}",
                        UriStem = $"#"
                    }
                }
            }
        };            

        IsLoading = true;

        try
        {
            var accountQuery = await Controller.ReadAsync(AccountId);
            if (accountQuery.Value is Account account)
            {
                Model = account;
            }

            Custodians = await ReferenceData.AccountCustodianListAsync();
        }
        finally
        {
            IsLoading = Model is null || Custodians is null;
        }
    }

    private async Task HandleDelete(MouseEventArgs args)
    {
        var result = await Controller.DeleteAsync(Model!);

        if (result is NoContentResult)
            NavigateToIndex(args);
    }

    private async Task HandleValidSubmit(MouseEventArgs args)
    {
        var e = args;
        Logger.LogInformation("HandleValidSubmit called");

        var result = await Controller.UpdateAsync(AccountId, Model);

        if (result.Value?.AccountId == AccountId)
            NavigateToDetail($"{Model?.AccountId}");
    }
}
