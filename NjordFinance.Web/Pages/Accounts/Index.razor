@page "/accounts"

@inherits ModelIndex<Account>

<PageTitle>@(PageTitle.ReadMany().AsPageTitle())</PageTitle>

<ThemedComponent>
    <ModelPageMenuHeader ActionMenu="@ActionMenu" Header="@(PageTitle.ReadMany())" />

    <ContentTile>
        <Body>
            <SearchInputTable TModel="Account"
                                ComparisonOperators=@ComparisonOperators
                                ExpressionBuilder=@ExpressionBuilder
                                SearchFields=@SearchFields
                                OnSearchClick=@(args => SearchClicked(args))>
            </SearchInputTable>
        </Body>
    </ContentTile>

    @if (IsLoading)
    {
        <LoadingSvg />
    }
    else
    {
        <ContentTile>
            <Body>
                <DataGrid Data="@Models">
                    <DataGridColumn Property=@nameof(Account.AccountNavigation.AccountObjectCode)
                                Caption=@(NameFor<AccountObject>(nameof(AccountObject.AccountObjectCode)))
                                Type=@DataGridCellType.Link>
                        <CellTemplate Context="model">
                            <a class="custom-nav-link" href=@(FormatDetailUri(model.AccountId)) @onclick:preventDefault 
                                @onclick="@(args => Detail_OnClick(model, args))">
                                @model.AccountNavigation.AccountObjectCode.ToUpper()
                            </a>
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.AccountNavigation.ObjectDisplayName)
                                Caption=@(NameFor<AccountObject>(nameof(AccountObject.ObjectDisplayName)))>
                        <CellTemplate Context="model">
                            @model.AccountNavigation.ObjectDisplayName
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.AccountNavigation.ObjectDescription)
                                Caption=@(NameFor<AccountObject>(nameof(AccountObject.ObjectDescription)))>
                        <CellTemplate Context="model">
                            @model.AccountNavigation.ObjectDescription
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.AccountNavigation.StartDate)
                                Caption=@(NameFor<AccountObject>(nameof(AccountObject.StartDate)))>
                        <CellTemplate Context="model">
                            @model.AccountNavigation.StartDate.ToShortDateString()
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.AccountNavigation.CloseDate)
                                Caption=@(NameFor<AccountObject>(nameof(AccountObject.CloseDate)))>
                        <CellTemplate Context="model">
                            @model.AccountNavigation.CloseDate?.ToShortDateString()
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.AccountNumber)
                                Caption=@(NameFor<Account>(nameof(Account.AccountNumber)))>
                        <CellTemplate Context="model">
                            @model.AccountNumber
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.BooksClosedDate)
                                Caption=@(NameFor<Account>(nameof(Account.BooksClosedDate)))>
                        <CellTemplate Context="model">
                            @model.BooksClosedDate?.ToShortDateString()
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.IsComplianceTradable)
                                Caption=@(NameFor<Account>(nameof(Account.IsComplianceTradable)))>
                        <CellTemplate Context="model">
                            @model.IsComplianceTradable
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.HasWallet)
                                Caption=@(NameFor<Account>(nameof(Account.HasWallet)))>
                        <CellTemplate Context="model">
                            @model.HasWallet
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.HasBankTransaction)
                                Caption=@(NameFor<Account>(nameof(Account.HasBankTransaction)))>
                        <CellTemplate Context="model">
                            @model.HasBankTransaction
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.HasBrokerTransaction)
                                Caption=@(NameFor<Account>(nameof(Account.HasBrokerTransaction)))>
                        <CellTemplate Context="model">
                            @model.HasBrokerTransaction
                        </CellTemplate>
                    </DataGridColumn>
                    <DataGridColumn Property=@nameof(Account.AccountCustodian.CustodianCode)
                                Caption=@(NameFor<Account>(nameof(Account.AccountCustodianId)))>
                        <CellTemplate Context="model">
                            @model.AccountCustodian?.CustodianCode
                        </CellTemplate>
                    </DataGridColumn>
                </DataGrid>
            </Body>
        </ContentTile>
    }
</ThemedComponent>


@code {
    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        ActionMenu = new()
        {
            IconKey = "reorder-four",
            Caption = PageTitle.ReadMany(),
            Children = new()
            {
                { 0, new MenuItem()
                    {
                        IconKey = "create",
                        Caption = $"Create new {ModelNoun.GetSingular()}",
                        UriStem = FormatCreateUri(Guid.NewGuid())
                    }
                }
            }
        };

        MaxRecordCount = -1;

        await base.OnInitializedAsync();
    }

    private void Detail_OnClick(Account model, MouseEventArgs args)
    {
        NavigationHelper.NavigateTo(FormatDetailUri(model.AccountId));
    }
}